var NE=Object.defineProperty;var bE=(ut,ct,un)=>ct in ut?NE(ut,ct,{enumerable:!0,configurable:!0,writable:!0,value:un}):ut[ct]=un;var Wf=(ut,ct,un)=>(bE(ut,typeof ct!="symbol"?ct+"":ct,un),un);(function(){try{var ut=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{},ct=new Error().stack;ct&&(ut._sentryDebugIds=ut._sentryDebugIds||{},ut._sentryDebugIds[ct]="56f6b64f-7289-4581-90f1-603298e3bd64",ut._sentryDebugIdIdentifier="sentry-dbid-56f6b64f-7289-4581-90f1-603298e3bd64")}catch{}})();(function(){"use strict";function ut(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!="string"&&!Array.isArray(r)){for(const o in r)if(o!=="default"&&!(o in e)){const i=Object.getOwnPropertyDescriptor(r,o);i&&Object.defineProperty(e,o,i.get?i:{enumerable:!0,get:()=>r[o]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}var ct=typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};ct.SENTRY_RELEASE={id:"5cbcd2bf50c310c20d9cd244d10275da1e48b4b1"};var un=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ql(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var Yf={exports:{}},ki={},Gf={exports:{}},Y={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var to=Symbol.for("react.element"),By=Symbol.for("react.portal"),Uy=Symbol.for("react.fragment"),Hy=Symbol.for("react.strict_mode"),Vy=Symbol.for("react.profiler"),Wy=Symbol.for("react.provider"),Yy=Symbol.for("react.context"),Gy=Symbol.for("react.forward_ref"),Xy=Symbol.for("react.suspense"),Qy=Symbol.for("react.memo"),Zy=Symbol.for("react.lazy"),Xf=Symbol.iterator;function Ky(e){return e===null||typeof e!="object"?null:(e=Xf&&e[Xf]||e["@@iterator"],typeof e=="function"?e:null)}var Qf={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Zf=Object.assign,Kf={};function fr(e,t,n){this.props=e,this.context=t,this.refs=Kf,this.updater=n||Qf}fr.prototype.isReactComponent={},fr.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},fr.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function qf(){}qf.prototype=fr.prototype;function Jl(e,t,n){this.props=e,this.context=t,this.refs=Kf,this.updater=n||Qf}var ea=Jl.prototype=new qf;ea.constructor=Jl,Zf(ea,fr.prototype),ea.isPureReactComponent=!0;var Jf=Array.isArray,ed=Object.prototype.hasOwnProperty,ta={current:null},td={key:!0,ref:!0,__self:!0,__source:!0};function nd(e,t,n){var r,o={},i=null,s=null;if(t!=null)for(r in t.ref!==void 0&&(s=t.ref),t.key!==void 0&&(i=""+t.key),t)ed.call(t,r)&&!td.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(l===1)o.children=n;else if(1<l){for(var a=Array(l),u=0;u<l;u++)a[u]=arguments[u+2];o.children=a}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)o[r]===void 0&&(o[r]=l[r]);return{$$typeof:to,type:e,key:i,ref:s,props:o,_owner:ta.current}}function qy(e,t){return{$$typeof:to,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function na(e){return typeof e=="object"&&e!==null&&e.$$typeof===to}function Jy(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var rd=/\/+/g;function ra(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Jy(""+e.key):t.toString(36)}function _i(e,t,n,r,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var s=!1;if(e===null)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case to:case By:s=!0}}if(s)return s=e,o=o(s),e=r===""?"."+ra(s,0):r,Jf(o)?(n="",e!=null&&(n=e.replace(rd,"$&/")+"/"),_i(o,t,n,"",function(u){return u})):o!=null&&(na(o)&&(o=qy(o,n+(!o.key||s&&s.key===o.key?"":(""+o.key).replace(rd,"$&/")+"/")+e)),t.push(o)),1;if(s=0,r=r===""?".":r+":",Jf(e))for(var l=0;l<e.length;l++){i=e[l];var a=r+ra(i,l);s+=_i(i,t,n,a,o)}else if(a=Ky(e),typeof a=="function")for(e=a.call(e),l=0;!(i=e.next()).done;)i=i.value,a=r+ra(i,l++),s+=_i(i,t,n,a,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function Ei(e,t,n){if(e==null)return e;var r=[],o=0;return _i(e,r,"","",function(i){return t.call(n,i,o++)}),r}function ev(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Pe={current:null},Ci={transition:null},tv={ReactCurrentDispatcher:Pe,ReactCurrentBatchConfig:Ci,ReactCurrentOwner:ta};Y.Children={map:Ei,forEach:function(e,t,n){Ei(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Ei(e,function(){t++}),t},toArray:function(e){return Ei(e,function(t){return t})||[]},only:function(e){if(!na(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},Y.Component=fr,Y.Fragment=Uy,Y.Profiler=Vy,Y.PureComponent=Jl,Y.StrictMode=Hy,Y.Suspense=Xy,Y.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tv,Y.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Zf({},e.props),o=e.key,i=e.ref,s=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,s=ta.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(a in t)ed.call(t,a)&&!td.hasOwnProperty(a)&&(r[a]=t[a]===void 0&&l!==void 0?l[a]:t[a])}var a=arguments.length-2;if(a===1)r.children=n;else if(1<a){l=Array(a);for(var u=0;u<a;u++)l[u]=arguments[u+2];r.children=l}return{$$typeof:to,type:e.type,key:o,ref:i,props:r,_owner:s}},Y.createContext=function(e){return e={$$typeof:Yy,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:Wy,_context:e},e.Consumer=e},Y.createElement=nd,Y.createFactory=function(e){var t=nd.bind(null,e);return t.type=e,t},Y.createRef=function(){return{current:null}},Y.forwardRef=function(e){return{$$typeof:Gy,render:e}},Y.isValidElement=na,Y.lazy=function(e){return{$$typeof:Zy,_payload:{_status:-1,_result:e},_init:ev}},Y.memo=function(e,t){return{$$typeof:Qy,type:e,compare:t===void 0?null:t}},Y.startTransition=function(e){var t=Ci.transition;Ci.transition={};try{e()}finally{Ci.transition=t}},Y.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},Y.useCallback=function(e,t){return Pe.current.useCallback(e,t)},Y.useContext=function(e){return Pe.current.useContext(e)},Y.useDebugValue=function(){},Y.useDeferredValue=function(e){return Pe.current.useDeferredValue(e)},Y.useEffect=function(e,t){return Pe.current.useEffect(e,t)},Y.useId=function(){return Pe.current.useId()},Y.useImperativeHandle=function(e,t,n){return Pe.current.useImperativeHandle(e,t,n)},Y.useInsertionEffect=function(e,t){return Pe.current.useInsertionEffect(e,t)},Y.useLayoutEffect=function(e,t){return Pe.current.useLayoutEffect(e,t)},Y.useMemo=function(e,t){return Pe.current.useMemo(e,t)},Y.useReducer=function(e,t,n){return Pe.current.useReducer(e,t,n)},Y.useRef=function(e){return Pe.current.useRef(e)},Y.useState=function(e){return Pe.current.useState(e)},Y.useSyncExternalStore=function(e,t,n){return Pe.current.useSyncExternalStore(e,t,n)},Y.useTransition=function(){return Pe.current.useTransition()},Y.version="18.2.0",Gf.exports=Y;var N=Gf.exports;const Vt=ql(N),od=ut({__proto__:null,default:Vt},[N]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var nv=N,rv=Symbol.for("react.element"),ov=Symbol.for("react.fragment"),iv=Object.prototype.hasOwnProperty,sv=nv.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,lv={key:!0,ref:!0,__self:!0,__source:!0};function id(e,t,n){var r,o={},i=null,s=null;n!==void 0&&(i=""+n),t.key!==void 0&&(i=""+t.key),t.ref!==void 0&&(s=t.ref);for(r in t)iv.call(t,r)&&!lv.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)o[r]===void 0&&(o[r]=t[r]);return{$$typeof:rv,type:e,key:i,ref:s,props:o,_owner:sv.current}}ki.Fragment=ov,ki.jsx=id,ki.jsxs=id,Yf.exports=ki;var M=Yf.exports,oa={},sd={exports:{}},Ye={},ld={exports:{}},ad={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(T,I){var F=T.length;T.push(I);e:for(;0<F;){var q=F-1>>>1,pe=T[q];if(0<o(pe,I))T[q]=I,T[F]=pe,F=q;else break e}}function n(T){return T.length===0?null:T[0]}function r(T){if(T.length===0)return null;var I=T[0],F=T.pop();if(F!==I){T[0]=F;e:for(var q=0,pe=T.length,eo=pe>>>1;q<eo;){var an=2*(q+1)-1,Hn=T[an],cr=an+1,Kl=T[cr];if(0>o(Hn,F))cr<pe&&0>o(Kl,Hn)?(T[q]=Kl,T[cr]=F,q=cr):(T[q]=Hn,T[an]=F,q=an);else if(cr<pe&&0>o(Kl,F))T[q]=Kl,T[cr]=F,q=cr;else break e}}return I}function o(T,I){var F=T.sortIndex-I.sortIndex;return F!==0?F:T.id-I.id}if(typeof performance=="object"&&typeof performance.now=="function"){var i=performance;e.unstable_now=function(){return i.now()}}else{var s=Date,l=s.now();e.unstable_now=function(){return s.now()-l}}var a=[],u=[],c=1,f=null,d=3,m=!1,y=!1,v=!1,x=typeof setTimeout=="function"?setTimeout:null,h=typeof clearTimeout=="function"?clearTimeout:null,p=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function g(T){for(var I=n(u);I!==null;){if(I.callback===null)r(u);else if(I.startTime<=T)r(u),I.sortIndex=I.expirationTime,t(a,I);else break;I=n(u)}}function w(T){if(v=!1,g(T),!y)if(n(a)!==null)y=!0,U(S);else{var I=n(u);I!==null&&D(w,I.startTime-T)}}function S(T,I){y=!1,v&&(v=!1,h(k),k=-1),m=!0;var F=d;try{for(g(I),f=n(a);f!==null&&(!(f.expirationTime>I)||T&&!L());){var q=f.callback;if(typeof q=="function"){f.callback=null,d=f.priorityLevel;var pe=q(f.expirationTime<=I);I=e.unstable_now(),typeof pe=="function"?f.callback=pe:f===n(a)&&r(a),g(I)}else r(a);f=n(a)}if(f!==null)var eo=!0;else{var an=n(u);an!==null&&D(w,an.startTime-I),eo=!1}return eo}finally{f=null,d=F,m=!1}}var E=!1,_=null,k=-1,A=5,$=-1;function L(){return!(e.unstable_now()-$<A)}function j(){if(_!==null){var T=e.unstable_now();$=T;var I=!0;try{I=_(!0,T)}finally{I?G():(E=!1,_=null)}}else E=!1}var G;if(typeof p=="function")G=function(){p(j)};else if(typeof MessageChannel<"u"){var W=new MessageChannel,O=W.port2;W.port1.onmessage=j,G=function(){O.postMessage(null)}}else G=function(){x(j,0)};function U(T){_=T,E||(E=!0,G())}function D(T,I){k=x(function(){T(e.unstable_now())},I)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(T){T.callback=null},e.unstable_continueExecution=function(){y||m||(y=!0,U(S))},e.unstable_forceFrameRate=function(T){0>T||125<T?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):A=0<T?Math.floor(1e3/T):5},e.unstable_getCurrentPriorityLevel=function(){return d},e.unstable_getFirstCallbackNode=function(){return n(a)},e.unstable_next=function(T){switch(d){case 1:case 2:case 3:var I=3;break;default:I=d}var F=d;d=I;try{return T()}finally{d=F}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(T,I){switch(T){case 1:case 2:case 3:case 4:case 5:break;default:T=3}var F=d;d=T;try{return I()}finally{d=F}},e.unstable_scheduleCallback=function(T,I,F){var q=e.unstable_now();switch(typeof F=="object"&&F!==null?(F=F.delay,F=typeof F=="number"&&0<F?q+F:q):F=q,T){case 1:var pe=-1;break;case 2:pe=250;break;case 5:pe=1073741823;break;case 4:pe=1e4;break;default:pe=5e3}return pe=F+pe,T={id:c++,callback:I,priorityLevel:T,startTime:F,expirationTime:pe,sortIndex:-1},F>q?(T.sortIndex=F,t(u,T),n(a)===null&&T===n(u)&&(v?(h(k),k=-1):v=!0,D(w,F-q))):(T.sortIndex=pe,t(a,T),y||m||(y=!0,U(S))),T},e.unstable_shouldYield=L,e.unstable_wrapCallback=function(T){var I=d;return function(){var F=d;d=I;try{return T.apply(this,arguments)}finally{d=F}}}})(ad),ld.exports=ad;var av=ld.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ud=N,Ge=av;function C(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var cd=new Set,no={};function Vn(e,t){dr(e,t),dr(e+"Capture",t)}function dr(e,t){for(no[e]=t,e=0;e<t.length;e++)cd.add(t[e])}var Wt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),ia=Object.prototype.hasOwnProperty,uv=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,fd={},dd={};function cv(e){return ia.call(dd,e)?!0:ia.call(fd,e)?!1:uv.test(e)?dd[e]=!0:(fd[e]=!0,!1)}function fv(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function dv(e,t,n,r){if(t===null||typeof t>"u"||fv(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Me(e,t,n,r,o,i,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var we={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){we[e]=new Me(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];we[t]=new Me(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){we[e]=new Me(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){we[e]=new Me(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){we[e]=new Me(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){we[e]=new Me(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){we[e]=new Me(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){we[e]=new Me(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){we[e]=new Me(e,5,!1,e.toLowerCase(),null,!1,!1)});var sa=/[\-:]([a-z])/g;function la(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(sa,la);we[t]=new Me(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(sa,la);we[t]=new Me(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(sa,la);we[t]=new Me(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){we[e]=new Me(e,1,!1,e.toLowerCase(),null,!1,!1)}),we.xlinkHref=new Me("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){we[e]=new Me(e,1,!1,e.toLowerCase(),null,!0,!0)});function aa(e,t,n,r){var o=we.hasOwnProperty(t)?we[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(dv(t,n,o,r)&&(n=null),r||o===null?cv(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Yt=ud.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ai=Symbol.for("react.element"),pr=Symbol.for("react.portal"),hr=Symbol.for("react.fragment"),ua=Symbol.for("react.strict_mode"),ca=Symbol.for("react.profiler"),pd=Symbol.for("react.provider"),hd=Symbol.for("react.context"),fa=Symbol.for("react.forward_ref"),da=Symbol.for("react.suspense"),pa=Symbol.for("react.suspense_list"),ha=Symbol.for("react.memo"),cn=Symbol.for("react.lazy"),md=Symbol.for("react.offscreen"),gd=Symbol.iterator;function ro(e){return e===null||typeof e!="object"?null:(e=gd&&e[gd]||e["@@iterator"],typeof e=="function"?e:null)}var se=Object.assign,ma;function oo(e){if(ma===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);ma=t&&t[1]||""}return`
`+ma+e}var ga=!1;function ya(e,t){if(!e||ga)return"";ga=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var o=u.stack.split(`
`),i=r.stack.split(`
`),s=o.length-1,l=i.length-1;1<=s&&0<=l&&o[s]!==i[l];)l--;for(;1<=s&&0<=l;s--,l--)if(o[s]!==i[l]){if(s!==1||l!==1)do if(s--,l--,0>l||o[s]!==i[l]){var a=`
`+o[s].replace(" at new "," at ");return e.displayName&&a.includes("<anonymous>")&&(a=a.replace("<anonymous>",e.displayName)),a}while(1<=s&&0<=l);break}}}finally{ga=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?oo(e):""}function pv(e){switch(e.tag){case 5:return oo(e.type);case 16:return oo("Lazy");case 13:return oo("Suspense");case 19:return oo("SuspenseList");case 0:case 2:case 15:return e=ya(e.type,!1),e;case 11:return e=ya(e.type.render,!1),e;case 1:return e=ya(e.type,!0),e;default:return""}}function va(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case hr:return"Fragment";case pr:return"Portal";case ca:return"Profiler";case ua:return"StrictMode";case da:return"Suspense";case pa:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case hd:return(e.displayName||"Context")+".Consumer";case pd:return(e._context.displayName||"Context")+".Provider";case fa:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case ha:return t=e.displayName||null,t!==null?t:va(e.type)||"Memo";case cn:t=e._payload,e=e._init;try{return va(e(t))}catch{}}return null}function hv(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return va(t);case 8:return t===ua?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function fn(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function yd(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function mv(e){var t=yd(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(s){r=""+s,i.call(this,s)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(s){r=""+s},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function $i(e){e._valueTracker||(e._valueTracker=mv(e))}function vd(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=yd(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Ti(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function wa(e,t){var n=t.checked;return se({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function wd(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=fn(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function xd(e,t){t=t.checked,t!=null&&aa(e,"checked",t,!1)}function xa(e,t){xd(e,t);var n=fn(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?Sa(e,t.type,n):t.hasOwnProperty("defaultValue")&&Sa(e,t.type,fn(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function Sd(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function Sa(e,t,n){(t!=="number"||Ti(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var io=Array.isArray;function mr(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+fn(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function ka(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(C(91));return se({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function kd(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(C(92));if(io(n)){if(1<n.length)throw Error(C(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:fn(n)}}function _d(e,t){var n=fn(t.value),r=fn(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function Ed(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Cd(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function _a(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Cd(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var Pi,Ad=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(Pi=Pi||document.createElement("div"),Pi.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Pi.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function so(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var lo={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},gv=["Webkit","ms","Moz","O"];Object.keys(lo).forEach(function(e){gv.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),lo[t]=lo[e]})});function $d(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||lo.hasOwnProperty(e)&&lo[e]?(""+t).trim():t+"px"}function Td(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=$d(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var yv=se({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ea(e,t){if(t){if(yv[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(C(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(C(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(C(61))}if(t.style!=null&&typeof t.style!="object")throw Error(C(62))}}function Ca(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Aa=null;function $a(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Ta=null,gr=null,yr=null;function Pd(e){if(e=Mo(e)){if(typeof Ta!="function")throw Error(C(280));var t=e.stateNode;t&&(t=qi(t),Ta(e.stateNode,e.type,t))}}function Md(e){gr?yr?yr.push(e):yr=[e]:gr=e}function Rd(){if(gr){var e=gr,t=yr;if(yr=gr=null,Pd(e),t)for(e=0;e<t.length;e++)Pd(t[e])}}function Nd(e,t){return e(t)}function bd(){}var Pa=!1;function Od(e,t,n){if(Pa)return e(t,n);Pa=!0;try{return Nd(e,t,n)}finally{Pa=!1,(gr!==null||yr!==null)&&(bd(),Rd())}}function ao(e,t){var n=e.stateNode;if(n===null)return null;var r=qi(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(C(231,t,typeof n));return n}var Ma=!1;if(Wt)try{var uo={};Object.defineProperty(uo,"passive",{get:function(){Ma=!0}}),window.addEventListener("test",uo,uo),window.removeEventListener("test",uo,uo)}catch{Ma=!1}function vv(e,t,n,r,o,i,s,l,a){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var co=!1,Mi=null,Ri=!1,Ra=null,wv={onError:function(e){co=!0,Mi=e}};function xv(e,t,n,r,o,i,s,l,a){co=!1,Mi=null,vv.apply(wv,arguments)}function Sv(e,t,n,r,o,i,s,l,a){if(xv.apply(this,arguments),co){if(co){var u=Mi;co=!1,Mi=null}else throw Error(C(198));Ri||(Ri=!0,Ra=u)}}function Wn(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Ld(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Id(e){if(Wn(e)!==e)throw Error(C(188))}function kv(e){var t=e.alternate;if(!t){if(t=Wn(e),t===null)throw Error(C(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Id(o),e;if(i===r)return Id(o),t;i=i.sibling}throw Error(C(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s){for(l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s)throw Error(C(189))}}if(n.alternate!==r)throw Error(C(190))}if(n.tag!==3)throw Error(C(188));return n.stateNode.current===n?e:t}function Fd(e){return e=kv(e),e!==null?Dd(e):null}function Dd(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Dd(e);if(t!==null)return t;e=e.sibling}return null}var zd=Ge.unstable_scheduleCallback,jd=Ge.unstable_cancelCallback,_v=Ge.unstable_shouldYield,Ev=Ge.unstable_requestPaint,ce=Ge.unstable_now,Cv=Ge.unstable_getCurrentPriorityLevel,Na=Ge.unstable_ImmediatePriority,Bd=Ge.unstable_UserBlockingPriority,Ni=Ge.unstable_NormalPriority,Av=Ge.unstable_LowPriority,Ud=Ge.unstable_IdlePriority,bi=null,Nt=null;function $v(e){if(Nt&&typeof Nt.onCommitFiberRoot=="function")try{Nt.onCommitFiberRoot(bi,e,void 0,(e.current.flags&128)===128)}catch{}}var kt=Math.clz32?Math.clz32:Mv,Tv=Math.log,Pv=Math.LN2;function Mv(e){return e>>>=0,e===0?32:31-(Tv(e)/Pv|0)|0}var Oi=64,Li=4194304;function fo(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Ii(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,s=n&268435455;if(s!==0){var l=s&~o;l!==0?r=fo(l):(i&=s,i!==0&&(r=fo(i)))}else s=n&~o,s!==0?r=fo(s):i!==0&&(r=fo(i));if(r===0)return 0;if(t!==0&&t!==r&&!(t&o)&&(o=r&-r,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-kt(t),o=1<<n,r|=e[n],t&=~o;return r}function Rv(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Nv(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var s=31-kt(i),l=1<<s,a=o[s];a===-1?(!(l&n)||l&r)&&(o[s]=Rv(l,t)):a<=t&&(e.expiredLanes|=l),i&=~l}}function ba(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Hd(){var e=Oi;return Oi<<=1,!(Oi&4194240)&&(Oi=64),e}function Oa(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function po(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-kt(t),e[t]=n}function bv(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-kt(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}function La(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-kt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var K=0;function Vd(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var Wd,Ia,Yd,Gd,Xd,Fa=!1,Fi=[],dn=null,pn=null,hn=null,ho=new Map,mo=new Map,mn=[],Ov="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Qd(e,t){switch(e){case"focusin":case"focusout":dn=null;break;case"dragenter":case"dragleave":pn=null;break;case"mouseover":case"mouseout":hn=null;break;case"pointerover":case"pointerout":ho.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":mo.delete(t.pointerId)}}function go(e,t,n,r,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},t!==null&&(t=Mo(t),t!==null&&Ia(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function Lv(e,t,n,r,o){switch(t){case"focusin":return dn=go(dn,e,t,n,r,o),!0;case"dragenter":return pn=go(pn,e,t,n,r,o),!0;case"mouseover":return hn=go(hn,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ho.set(i,go(ho.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,mo.set(i,go(mo.get(i)||null,e,t,n,r,o)),!0}return!1}function Zd(e){var t=Yn(e.target);if(t!==null){var n=Wn(t);if(n!==null){if(t=n.tag,t===13){if(t=Ld(n),t!==null){e.blockedOn=t,Xd(e.priority,function(){Yd(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Di(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=za(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Aa=r,n.target.dispatchEvent(r),Aa=null}else return t=Mo(n),t!==null&&Ia(t),e.blockedOn=n,!1;t.shift()}return!0}function Kd(e,t,n){Di(e)&&n.delete(t)}function Iv(){Fa=!1,dn!==null&&Di(dn)&&(dn=null),pn!==null&&Di(pn)&&(pn=null),hn!==null&&Di(hn)&&(hn=null),ho.forEach(Kd),mo.forEach(Kd)}function yo(e,t){e.blockedOn===t&&(e.blockedOn=null,Fa||(Fa=!0,Ge.unstable_scheduleCallback(Ge.unstable_NormalPriority,Iv)))}function vo(e){function t(o){return yo(o,e)}if(0<Fi.length){yo(Fi[0],e);for(var n=1;n<Fi.length;n++){var r=Fi[n];r.blockedOn===e&&(r.blockedOn=null)}}for(dn!==null&&yo(dn,e),pn!==null&&yo(pn,e),hn!==null&&yo(hn,e),ho.forEach(t),mo.forEach(t),n=0;n<mn.length;n++)r=mn[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<mn.length&&(n=mn[0],n.blockedOn===null);)Zd(n),n.blockedOn===null&&mn.shift()}var vr=Yt.ReactCurrentBatchConfig,zi=!0;function Fv(e,t,n,r){var o=K,i=vr.transition;vr.transition=null;try{K=1,Da(e,t,n,r)}finally{K=o,vr.transition=i}}function Dv(e,t,n,r){var o=K,i=vr.transition;vr.transition=null;try{K=4,Da(e,t,n,r)}finally{K=o,vr.transition=i}}function Da(e,t,n,r){if(zi){var o=za(e,t,n,r);if(o===null)nu(e,t,r,ji,n),Qd(e,r);else if(Lv(o,e,t,n,r))r.stopPropagation();else if(Qd(e,r),t&4&&-1<Ov.indexOf(e)){for(;o!==null;){var i=Mo(o);if(i!==null&&Wd(i),i=za(e,t,n,r),i===null&&nu(e,t,r,ji,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else nu(e,t,r,null,n)}}var ji=null;function za(e,t,n,r){if(ji=null,e=$a(r),e=Yn(e),e!==null)if(t=Wn(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Ld(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return ji=e,null}function qd(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Cv()){case Na:return 1;case Bd:return 4;case Ni:case Av:return 16;case Ud:return 536870912;default:return 16}default:return 16}}var gn=null,ja=null,Bi=null;function Jd(){if(Bi)return Bi;var e,t=ja,n=t.length,r,o="value"in gn?gn.value:gn.textContent,i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var s=n-e;for(r=1;r<=s&&t[n-r]===o[i-r];r++);return Bi=o.slice(e,1<r?1-r:void 0)}function Ui(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function Hi(){return!0}function ep(){return!1}function Xe(e){function t(n,r,o,i,s){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=s,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(i):i[l]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Hi:ep,this.isPropagationStopped=ep,this}return se(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Hi)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Hi)},persist:function(){},isPersistent:Hi}),t}var wr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Ba=Xe(wr),wo=se({},wr,{view:0,detail:0}),zv=Xe(wo),Ua,Ha,xo,Vi=se({},wo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Wa,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==xo&&(xo&&e.type==="mousemove"?(Ua=e.screenX-xo.screenX,Ha=e.screenY-xo.screenY):Ha=Ua=0,xo=e),Ua)},movementY:function(e){return"movementY"in e?e.movementY:Ha}}),tp=Xe(Vi),jv=se({},Vi,{dataTransfer:0}),Bv=Xe(jv),Uv=se({},wo,{relatedTarget:0}),Va=Xe(Uv),Hv=se({},wr,{animationName:0,elapsedTime:0,pseudoElement:0}),Vv=Xe(Hv),Wv=se({},wr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Yv=Xe(Wv),Gv=se({},wr,{data:0}),np=Xe(Gv),Xv={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Qv={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Zv={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Kv(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Zv[e])?!!t[e]:!1}function Wa(){return Kv}var qv=se({},wo,{key:function(e){if(e.key){var t=Xv[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Ui(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Qv[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Wa,charCode:function(e){return e.type==="keypress"?Ui(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Ui(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Jv=Xe(qv),e2=se({},Vi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),rp=Xe(e2),t2=se({},wo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Wa}),n2=Xe(t2),r2=se({},wr,{propertyName:0,elapsedTime:0,pseudoElement:0}),o2=Xe(r2),i2=se({},Vi,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),s2=Xe(i2),l2=[9,13,27,32],Ya=Wt&&"CompositionEvent"in window,So=null;Wt&&"documentMode"in document&&(So=document.documentMode);var a2=Wt&&"TextEvent"in window&&!So,op=Wt&&(!Ya||So&&8<So&&11>=So),ip=" ",sp=!1;function lp(e,t){switch(e){case"keyup":return l2.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function ap(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var xr=!1;function u2(e,t){switch(e){case"compositionend":return ap(t);case"keypress":return t.which!==32?null:(sp=!0,ip);case"textInput":return e=t.data,e===ip&&sp?null:e;default:return null}}function c2(e,t){if(xr)return e==="compositionend"||!Ya&&lp(e,t)?(e=Jd(),Bi=ja=gn=null,xr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return op&&t.locale!=="ko"?null:t.data;default:return null}}var f2={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function up(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!f2[e.type]:t==="textarea"}function cp(e,t,n,r){Md(r),t=Qi(t,"onChange"),0<t.length&&(n=new Ba("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var ko=null,_o=null;function d2(e){Tp(e,0)}function Wi(e){var t=Cr(e);if(vd(t))return e}function p2(e,t){if(e==="change")return t}var fp=!1;if(Wt){var Ga;if(Wt){var Xa="oninput"in document;if(!Xa){var dp=document.createElement("div");dp.setAttribute("oninput","return;"),Xa=typeof dp.oninput=="function"}Ga=Xa}else Ga=!1;fp=Ga&&(!document.documentMode||9<document.documentMode)}function pp(){ko&&(ko.detachEvent("onpropertychange",hp),_o=ko=null)}function hp(e){if(e.propertyName==="value"&&Wi(_o)){var t=[];cp(t,_o,e,$a(e)),Od(d2,t)}}function h2(e,t,n){e==="focusin"?(pp(),ko=t,_o=n,ko.attachEvent("onpropertychange",hp)):e==="focusout"&&pp()}function m2(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Wi(_o)}function g2(e,t){if(e==="click")return Wi(t)}function y2(e,t){if(e==="input"||e==="change")return Wi(t)}function v2(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var _t=typeof Object.is=="function"?Object.is:v2;function Eo(e,t){if(_t(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!ia.call(t,o)||!_t(e[o],t[o]))return!1}return!0}function mp(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function gp(e,t){var n=mp(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=mp(n)}}function yp(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?yp(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function vp(){for(var e=window,t=Ti();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Ti(e.document)}return t}function Qa(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function w2(e){var t=vp(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&yp(n.ownerDocument.documentElement,n)){if(r!==null&&Qa(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=gp(n,i);var s=gp(n,r);o&&s&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var x2=Wt&&"documentMode"in document&&11>=document.documentMode,Sr=null,Za=null,Co=null,Ka=!1;function wp(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Ka||Sr==null||Sr!==Ti(r)||(r=Sr,"selectionStart"in r&&Qa(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),Co&&Eo(Co,r)||(Co=r,r=Qi(Za,"onSelect"),0<r.length&&(t=new Ba("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Sr)))}function Yi(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Yi("Animation","AnimationEnd"),animationiteration:Yi("Animation","AnimationIteration"),animationstart:Yi("Animation","AnimationStart"),transitionend:Yi("Transition","TransitionEnd")},qa={},xp={};Wt&&(xp=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);function Gi(e){if(qa[e])return qa[e];if(!kr[e])return e;var t=kr[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in xp)return qa[e]=t[n];return e}var Sp=Gi("animationend"),kp=Gi("animationiteration"),_p=Gi("animationstart"),Ep=Gi("transitionend"),Cp=new Map,Ap="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function yn(e,t){Cp.set(e,t),Vn(t,[e])}for(var Ja=0;Ja<Ap.length;Ja++){var eu=Ap[Ja],S2=eu.toLowerCase(),k2=eu[0].toUpperCase()+eu.slice(1);yn(S2,"on"+k2)}yn(Sp,"onAnimationEnd"),yn(kp,"onAnimationIteration"),yn(_p,"onAnimationStart"),yn("dblclick","onDoubleClick"),yn("focusin","onFocus"),yn("focusout","onBlur"),yn(Ep,"onTransitionEnd"),dr("onMouseEnter",["mouseout","mouseover"]),dr("onMouseLeave",["mouseout","mouseover"]),dr("onPointerEnter",["pointerout","pointerover"]),dr("onPointerLeave",["pointerout","pointerover"]),Vn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),Vn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),Vn("onBeforeInput",["compositionend","keypress","textInput","paste"]),Vn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),Vn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),Vn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ao="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),_2=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ao));function $p(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,Sv(r,t,void 0,e),e.currentTarget=null}function Tp(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var s=r.length-1;0<=s;s--){var l=r[s],a=l.instance,u=l.currentTarget;if(l=l.listener,a!==i&&o.isPropagationStopped())break e;$p(o,l,u),i=a}else for(s=0;s<r.length;s++){if(l=r[s],a=l.instance,u=l.currentTarget,l=l.listener,a!==i&&o.isPropagationStopped())break e;$p(o,l,u),i=a}}}if(Ri)throw e=Ra,Ri=!1,Ra=null,e}function ne(e,t){var n=t[au];n===void 0&&(n=t[au]=new Set);var r=e+"__bubble";n.has(r)||(Pp(t,e,2,!1),n.add(r))}function tu(e,t,n){var r=0;t&&(r|=4),Pp(n,e,r,t)}var Xi="_reactListening"+Math.random().toString(36).slice(2);function $o(e){if(!e[Xi]){e[Xi]=!0,cd.forEach(function(n){n!=="selectionchange"&&(_2.has(n)||tu(n,!1,e),tu(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Xi]||(t[Xi]=!0,tu("selectionchange",!1,t))}}function Pp(e,t,n,r){switch(qd(t)){case 1:var o=Fv;break;case 4:o=Dv;break;default:o=Da}n=o.bind(null,t,n,e),o=void 0,!Ma||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function nu(e,t,n,r,o){var i=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var s=r.tag;if(s===3||s===4){var l=r.stateNode.containerInfo;if(l===o||l.nodeType===8&&l.parentNode===o)break;if(s===4)for(s=r.return;s!==null;){var a=s.tag;if((a===3||a===4)&&(a=s.stateNode.containerInfo,a===o||a.nodeType===8&&a.parentNode===o))return;s=s.return}for(;l!==null;){if(s=Yn(l),s===null)return;if(a=s.tag,a===5||a===6){r=i=s;continue e}l=l.parentNode}}r=r.return}Od(function(){var u=i,c=$a(n),f=[];e:{var d=Cp.get(e);if(d!==void 0){var m=Ba,y=e;switch(e){case"keypress":if(Ui(n)===0)break e;case"keydown":case"keyup":m=Jv;break;case"focusin":y="focus",m=Va;break;case"focusout":y="blur",m=Va;break;case"beforeblur":case"afterblur":m=Va;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":m=tp;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":m=Bv;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":m=n2;break;case Sp:case kp:case _p:m=Vv;break;case Ep:m=o2;break;case"scroll":m=zv;break;case"wheel":m=s2;break;case"copy":case"cut":case"paste":m=Yv;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":m=rp}var v=(t&4)!==0,x=!v&&e==="scroll",h=v?d!==null?d+"Capture":null:d;v=[];for(var p=u,g;p!==null;){g=p;var w=g.stateNode;if(g.tag===5&&w!==null&&(g=w,h!==null&&(w=ao(p,h),w!=null&&v.push(To(p,w,g)))),x)break;p=p.return}0<v.length&&(d=new m(d,y,null,n,c),f.push({event:d,listeners:v}))}}if(!(t&7)){e:{if(d=e==="mouseover"||e==="pointerover",m=e==="mouseout"||e==="pointerout",d&&n!==Aa&&(y=n.relatedTarget||n.fromElement)&&(Yn(y)||y[Gt]))break e;if((m||d)&&(d=c.window===c?c:(d=c.ownerDocument)?d.defaultView||d.parentWindow:window,m?(y=n.relatedTarget||n.toElement,m=u,y=y?Yn(y):null,y!==null&&(x=Wn(y),y!==x||y.tag!==5&&y.tag!==6)&&(y=null)):(m=null,y=u),m!==y)){if(v=tp,w="onMouseLeave",h="onMouseEnter",p="mouse",(e==="pointerout"||e==="pointerover")&&(v=rp,w="onPointerLeave",h="onPointerEnter",p="pointer"),x=m==null?d:Cr(m),g=y==null?d:Cr(y),d=new v(w,p+"leave",m,n,c),d.target=x,d.relatedTarget=g,w=null,Yn(c)===u&&(v=new v(h,p+"enter",y,n,c),v.target=g,v.relatedTarget=x,w=v),x=w,m&&y)t:{for(v=m,h=y,p=0,g=v;g;g=_r(g))p++;for(g=0,w=h;w;w=_r(w))g++;for(;0<p-g;)v=_r(v),p--;for(;0<g-p;)h=_r(h),g--;for(;p--;){if(v===h||h!==null&&v===h.alternate)break t;v=_r(v),h=_r(h)}v=null}else v=null;m!==null&&Mp(f,d,m,v,!1),y!==null&&x!==null&&Mp(f,x,y,v,!0)}}e:{if(d=u?Cr(u):window,m=d.nodeName&&d.nodeName.toLowerCase(),m==="select"||m==="input"&&d.type==="file")var S=p2;else if(up(d))if(fp)S=y2;else{S=m2;var E=h2}else(m=d.nodeName)&&m.toLowerCase()==="input"&&(d.type==="checkbox"||d.type==="radio")&&(S=g2);if(S&&(S=S(e,u))){cp(f,S,n,c);break e}E&&E(e,d,u),e==="focusout"&&(E=d._wrapperState)&&E.controlled&&d.type==="number"&&Sa(d,"number",d.value)}switch(E=u?Cr(u):window,e){case"focusin":(up(E)||E.contentEditable==="true")&&(Sr=E,Za=u,Co=null);break;case"focusout":Co=Za=Sr=null;break;case"mousedown":Ka=!0;break;case"contextmenu":case"mouseup":case"dragend":Ka=!1,wp(f,n,c);break;case"selectionchange":if(x2)break;case"keydown":case"keyup":wp(f,n,c)}var _;if(Ya)e:{switch(e){case"compositionstart":var k="onCompositionStart";break e;case"compositionend":k="onCompositionEnd";break e;case"compositionupdate":k="onCompositionUpdate";break e}k=void 0}else xr?lp(e,n)&&(k="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(k="onCompositionStart");k&&(op&&n.locale!=="ko"&&(xr||k!=="onCompositionStart"?k==="onCompositionEnd"&&xr&&(_=Jd()):(gn=c,ja="value"in gn?gn.value:gn.textContent,xr=!0)),E=Qi(u,k),0<E.length&&(k=new np(k,e,null,n,c),f.push({event:k,listeners:E}),_?k.data=_:(_=ap(n),_!==null&&(k.data=_)))),(_=a2?u2(e,n):c2(e,n))&&(u=Qi(u,"onBeforeInput"),0<u.length&&(c=new np("onBeforeInput","beforeinput",null,n,c),f.push({event:c,listeners:u}),c.data=_))}Tp(f,t)})}function To(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Qi(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=ao(e,n),i!=null&&r.unshift(To(e,i,o)),i=ao(e,t),i!=null&&r.push(To(e,i,o))),e=e.return}return r}function _r(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Mp(e,t,n,r,o){for(var i=t._reactName,s=[];n!==null&&n!==r;){var l=n,a=l.alternate,u=l.stateNode;if(a!==null&&a===r)break;l.tag===5&&u!==null&&(l=u,o?(a=ao(n,i),a!=null&&s.unshift(To(n,a,l))):o||(a=ao(n,i),a!=null&&s.push(To(n,a,l)))),n=n.return}s.length!==0&&e.push({event:t,listeners:s})}var E2=/\r\n?/g,C2=/\u0000|\uFFFD/g;function Rp(e){return(typeof e=="string"?e:""+e).replace(E2,`
`).replace(C2,"")}function Zi(e,t,n){if(t=Rp(t),Rp(e)!==t&&n)throw Error(C(425))}function Ki(){}var ru=null,ou=null;function iu(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var su=typeof setTimeout=="function"?setTimeout:void 0,A2=typeof clearTimeout=="function"?clearTimeout:void 0,Np=typeof Promise=="function"?Promise:void 0,$2=typeof queueMicrotask=="function"?queueMicrotask:typeof Np<"u"?function(e){return Np.resolve(null).then(e).catch(T2)}:su;function T2(e){setTimeout(function(){throw e})}function lu(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),vo(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);vo(t)}function vn(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function bp(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Er=Math.random().toString(36).slice(2),bt="__reactFiber$"+Er,Po="__reactProps$"+Er,Gt="__reactContainer$"+Er,au="__reactEvents$"+Er,P2="__reactListeners$"+Er,M2="__reactHandles$"+Er;function Yn(e){var t=e[bt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Gt]||n[bt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=bp(e);e!==null;){if(n=e[bt])return n;e=bp(e)}return t}e=n,n=e.parentNode}return null}function Mo(e){return e=e[bt]||e[Gt],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Cr(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(C(33))}function qi(e){return e[Po]||null}var uu=[],Ar=-1;function wn(e){return{current:e}}function re(e){0>Ar||(e.current=uu[Ar],uu[Ar]=null,Ar--)}function J(e,t){Ar++,uu[Ar]=e.current,e.current=t}var xn={},Ce=wn(xn),Ie=wn(!1),Gn=xn;function $r(e,t){var n=e.type.contextTypes;if(!n)return xn;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Fe(e){return e=e.childContextTypes,e!=null}function Ji(){re(Ie),re(Ce)}function Op(e,t,n){if(Ce.current!==xn)throw Error(C(168));J(Ce,t),J(Ie,n)}function Lp(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(C(108,hv(e)||"Unknown",o));return se({},n,r)}function es(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||xn,Gn=Ce.current,J(Ce,e),J(Ie,Ie.current),!0}function Ip(e,t,n){var r=e.stateNode;if(!r)throw Error(C(169));n?(e=Lp(e,t,Gn),r.__reactInternalMemoizedMergedChildContext=e,re(Ie),re(Ce),J(Ce,e)):re(Ie),J(Ie,n)}var Xt=null,ts=!1,cu=!1;function Fp(e){Xt===null?Xt=[e]:Xt.push(e)}function R2(e){ts=!0,Fp(e)}function Sn(){if(!cu&&Xt!==null){cu=!0;var e=0,t=K;try{var n=Xt;for(K=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}Xt=null,ts=!1}catch(o){throw Xt!==null&&(Xt=Xt.slice(e+1)),zd(Na,Sn),o}finally{K=t,cu=!1}}return null}var Tr=[],Pr=0,ns=null,rs=0,ft=[],dt=0,Xn=null,Qt=1,Zt="";function Qn(e,t){Tr[Pr++]=rs,Tr[Pr++]=ns,ns=e,rs=t}function Dp(e,t,n){ft[dt++]=Qt,ft[dt++]=Zt,ft[dt++]=Xn,Xn=e;var r=Qt;e=Zt;var o=32-kt(r)-1;r&=~(1<<o),n+=1;var i=32-kt(t)+o;if(30<i){var s=o-o%5;i=(r&(1<<s)-1).toString(32),r>>=s,o-=s,Qt=1<<32-kt(t)+o|n<<o|r,Zt=i+e}else Qt=1<<i|n<<o|r,Zt=e}function fu(e){e.return!==null&&(Qn(e,1),Dp(e,1,0))}function du(e){for(;e===ns;)ns=Tr[--Pr],Tr[Pr]=null,rs=Tr[--Pr],Tr[Pr]=null;for(;e===Xn;)Xn=ft[--dt],ft[dt]=null,Zt=ft[--dt],ft[dt]=null,Qt=ft[--dt],ft[dt]=null}var Qe=null,Ze=null,ie=!1,Et=null;function zp(e,t){var n=gt(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function jp(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Qe=e,Ze=vn(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Qe=e,Ze=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=Xn!==null?{id:Qt,overflow:Zt}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=gt(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Qe=e,Ze=null,!0):!1;default:return!1}}function pu(e){return(e.mode&1)!==0&&(e.flags&128)===0}function hu(e){if(ie){var t=Ze;if(t){var n=t;if(!jp(e,t)){if(pu(e))throw Error(C(418));t=vn(n.nextSibling);var r=Qe;t&&jp(e,t)?zp(r,n):(e.flags=e.flags&-4097|2,ie=!1,Qe=e)}}else{if(pu(e))throw Error(C(418));e.flags=e.flags&-4097|2,ie=!1,Qe=e}}}function Bp(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Qe=e}function os(e){if(e!==Qe)return!1;if(!ie)return Bp(e),ie=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!iu(e.type,e.memoizedProps)),t&&(t=Ze)){if(pu(e))throw Up(),Error(C(418));for(;t;)zp(e,t),t=vn(t.nextSibling)}if(Bp(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(C(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Ze=vn(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Ze=null}}else Ze=Qe?vn(e.stateNode.nextSibling):null;return!0}function Up(){for(var e=Ze;e;)e=vn(e.nextSibling)}function Mr(){Ze=Qe=null,ie=!1}function mu(e){Et===null?Et=[e]:Et.push(e)}var N2=Yt.ReactCurrentBatchConfig;function Ct(e,t){if(e&&e.defaultProps){t=se({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var is=wn(null),ss=null,Rr=null,gu=null;function yu(){gu=Rr=ss=null}function vu(e){var t=is.current;re(is),e._currentValue=t}function wu(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Nr(e,t){ss=e,gu=Rr=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(De=!0),e.firstContext=null)}function pt(e){var t=e._currentValue;if(gu!==e)if(e={context:e,memoizedValue:t,next:null},Rr===null){if(ss===null)throw Error(C(308));Rr=e,ss.dependencies={lanes:0,firstContext:e}}else Rr=Rr.next=e;return t}var Zn=null;function xu(e){Zn===null?Zn=[e]:Zn.push(e)}function Hp(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,xu(t)):(n.next=o.next,o.next=n),t.interleaved=n,Kt(e,r)}function Kt(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var kn=!1;function Su(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Vp(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function qt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function _n(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,X&2){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Kt(e,n)}return o=r.interleaved,o===null?(t.next=t,xu(r)):(t.next=o.next,o.next=t),r.interleaved=t,Kt(e,n)}function ls(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,La(e,n)}}function Wp(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=s:i=i.next=s,n=n.next}while(n!==null);i===null?o=i=t:i=i.next=t}else o=i=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function as(e,t,n,r){var o=e.updateQueue;kn=!1;var i=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(l!==null){o.shared.pending=null;var a=l,u=a.next;a.next=null,s===null?i=u:s.next=u,s=a;var c=e.alternate;c!==null&&(c=c.updateQueue,l=c.lastBaseUpdate,l!==s&&(l===null?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=a))}if(i!==null){var f=o.baseState;s=0,c=u=a=null,l=i;do{var d=l.lane,m=l.eventTime;if((r&d)===d){c!==null&&(c=c.next={eventTime:m,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var y=e,v=l;switch(d=t,m=n,v.tag){case 1:if(y=v.payload,typeof y=="function"){f=y.call(m,f,d);break e}f=y;break e;case 3:y.flags=y.flags&-65537|128;case 0:if(y=v.payload,d=typeof y=="function"?y.call(m,f,d):y,d==null)break e;f=se({},f,d);break e;case 2:kn=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,d=o.effects,d===null?o.effects=[l]:d.push(l))}else m={eventTime:m,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},c===null?(u=c=m,a=f):c=c.next=m,s|=d;if(l=l.next,l===null){if(l=o.shared.pending,l===null)break;d=l,l=d.next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}while(!0);if(c===null&&(a=f),o.baseState=a,o.firstBaseUpdate=u,o.lastBaseUpdate=c,t=o.shared.interleaved,t!==null){o=t;do s|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);Jn|=s,e.lanes=s,e.memoizedState=f}}function Yp(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(C(191,o));o.call(r)}}}var Gp=new ud.Component().refs;function ku(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:se({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var us={isMounted:function(e){return(e=e._reactInternals)?Wn(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ne(),o=$n(e),i=qt(r,o);i.payload=t,n!=null&&(i.callback=n),t=_n(e,i,o),t!==null&&(Tt(t,e,o,r),ls(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ne(),o=$n(e),i=qt(r,o);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=_n(e,i,o),t!==null&&(Tt(t,e,o,r),ls(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ne(),r=$n(e),o=qt(n,r);o.tag=2,t!=null&&(o.callback=t),t=_n(e,o,r),t!==null&&(Tt(t,e,r,n),ls(t,e,r))}};function Xp(e,t,n,r,o,i,s){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,s):t.prototype&&t.prototype.isPureReactComponent?!Eo(n,r)||!Eo(o,i):!0}function Qp(e,t,n){var r=!1,o=xn,i=t.contextType;return typeof i=="object"&&i!==null?i=pt(i):(o=Fe(t)?Gn:Ce.current,r=t.contextTypes,i=(r=r!=null)?$r(e,o):xn),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=us,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Zp(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&us.enqueueReplaceState(t,t.state,null)}function _u(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=Gp,Su(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=pt(i):(i=Fe(t)?Gn:Ce.current,o.context=$r(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(ku(e,t,i,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&us.enqueueReplaceState(o,o.state,null),as(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Ro(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(C(309));var r=n.stateNode}if(!r)throw Error(C(147,e));var o=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(s){var l=o.refs;l===Gp&&(l=o.refs={}),s===null?delete l[i]:l[i]=s},t._stringRef=i,t)}if(typeof e!="string")throw Error(C(284));if(!n._owner)throw Error(C(290,e))}return e}function cs(e,t){throw e=Object.prototype.toString.call(t),Error(C(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Kp(e){var t=e._init;return t(e._payload)}function qp(e){function t(h,p){if(e){var g=h.deletions;g===null?(h.deletions=[p],h.flags|=16):g.push(p)}}function n(h,p){if(!e)return null;for(;p!==null;)t(h,p),p=p.sibling;return null}function r(h,p){for(h=new Map;p!==null;)p.key!==null?h.set(p.key,p):h.set(p.index,p),p=p.sibling;return h}function o(h,p){return h=Pn(h,p),h.index=0,h.sibling=null,h}function i(h,p,g){return h.index=g,e?(g=h.alternate,g!==null?(g=g.index,g<p?(h.flags|=2,p):g):(h.flags|=2,p)):(h.flags|=1048576,p)}function s(h){return e&&h.alternate===null&&(h.flags|=2),h}function l(h,p,g,w){return p===null||p.tag!==6?(p=sc(g,h.mode,w),p.return=h,p):(p=o(p,g),p.return=h,p)}function a(h,p,g,w){var S=g.type;return S===hr?c(h,p,g.props.children,w,g.key):p!==null&&(p.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===cn&&Kp(S)===p.type)?(w=o(p,g.props),w.ref=Ro(h,p,g),w.return=h,w):(w=Ps(g.type,g.key,g.props,null,h.mode,w),w.ref=Ro(h,p,g),w.return=h,w)}function u(h,p,g,w){return p===null||p.tag!==4||p.stateNode.containerInfo!==g.containerInfo||p.stateNode.implementation!==g.implementation?(p=lc(g,h.mode,w),p.return=h,p):(p=o(p,g.children||[]),p.return=h,p)}function c(h,p,g,w,S){return p===null||p.tag!==7?(p=rr(g,h.mode,w,S),p.return=h,p):(p=o(p,g),p.return=h,p)}function f(h,p,g){if(typeof p=="string"&&p!==""||typeof p=="number")return p=sc(""+p,h.mode,g),p.return=h,p;if(typeof p=="object"&&p!==null){switch(p.$$typeof){case Ai:return g=Ps(p.type,p.key,p.props,null,h.mode,g),g.ref=Ro(h,null,p),g.return=h,g;case pr:return p=lc(p,h.mode,g),p.return=h,p;case cn:var w=p._init;return f(h,w(p._payload),g)}if(io(p)||ro(p))return p=rr(p,h.mode,g,null),p.return=h,p;cs(h,p)}return null}function d(h,p,g,w){var S=p!==null?p.key:null;if(typeof g=="string"&&g!==""||typeof g=="number")return S!==null?null:l(h,p,""+g,w);if(typeof g=="object"&&g!==null){switch(g.$$typeof){case Ai:return g.key===S?a(h,p,g,w):null;case pr:return g.key===S?u(h,p,g,w):null;case cn:return S=g._init,d(h,p,S(g._payload),w)}if(io(g)||ro(g))return S!==null?null:c(h,p,g,w,null);cs(h,g)}return null}function m(h,p,g,w,S){if(typeof w=="string"&&w!==""||typeof w=="number")return h=h.get(g)||null,l(p,h,""+w,S);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case Ai:return h=h.get(w.key===null?g:w.key)||null,a(p,h,w,S);case pr:return h=h.get(w.key===null?g:w.key)||null,u(p,h,w,S);case cn:var E=w._init;return m(h,p,g,E(w._payload),S)}if(io(w)||ro(w))return h=h.get(g)||null,c(p,h,w,S,null);cs(p,w)}return null}function y(h,p,g,w){for(var S=null,E=null,_=p,k=p=0,A=null;_!==null&&k<g.length;k++){_.index>k?(A=_,_=null):A=_.sibling;var $=d(h,_,g[k],w);if($===null){_===null&&(_=A);break}e&&_&&$.alternate===null&&t(h,_),p=i($,p,k),E===null?S=$:E.sibling=$,E=$,_=A}if(k===g.length)return n(h,_),ie&&Qn(h,k),S;if(_===null){for(;k<g.length;k++)_=f(h,g[k],w),_!==null&&(p=i(_,p,k),E===null?S=_:E.sibling=_,E=_);return ie&&Qn(h,k),S}for(_=r(h,_);k<g.length;k++)A=m(_,h,k,g[k],w),A!==null&&(e&&A.alternate!==null&&_.delete(A.key===null?k:A.key),p=i(A,p,k),E===null?S=A:E.sibling=A,E=A);return e&&_.forEach(function(L){return t(h,L)}),ie&&Qn(h,k),S}function v(h,p,g,w){var S=ro(g);if(typeof S!="function")throw Error(C(150));if(g=S.call(g),g==null)throw Error(C(151));for(var E=S=null,_=p,k=p=0,A=null,$=g.next();_!==null&&!$.done;k++,$=g.next()){_.index>k?(A=_,_=null):A=_.sibling;var L=d(h,_,$.value,w);if(L===null){_===null&&(_=A);break}e&&_&&L.alternate===null&&t(h,_),p=i(L,p,k),E===null?S=L:E.sibling=L,E=L,_=A}if($.done)return n(h,_),ie&&Qn(h,k),S;if(_===null){for(;!$.done;k++,$=g.next())$=f(h,$.value,w),$!==null&&(p=i($,p,k),E===null?S=$:E.sibling=$,E=$);return ie&&Qn(h,k),S}for(_=r(h,_);!$.done;k++,$=g.next())$=m(_,h,k,$.value,w),$!==null&&(e&&$.alternate!==null&&_.delete($.key===null?k:$.key),p=i($,p,k),E===null?S=$:E.sibling=$,E=$);return e&&_.forEach(function(j){return t(h,j)}),ie&&Qn(h,k),S}function x(h,p,g,w){if(typeof g=="object"&&g!==null&&g.type===hr&&g.key===null&&(g=g.props.children),typeof g=="object"&&g!==null){switch(g.$$typeof){case Ai:e:{for(var S=g.key,E=p;E!==null;){if(E.key===S){if(S=g.type,S===hr){if(E.tag===7){n(h,E.sibling),p=o(E,g.props.children),p.return=h,h=p;break e}}else if(E.elementType===S||typeof S=="object"&&S!==null&&S.$$typeof===cn&&Kp(S)===E.type){n(h,E.sibling),p=o(E,g.props),p.ref=Ro(h,E,g),p.return=h,h=p;break e}n(h,E);break}else t(h,E);E=E.sibling}g.type===hr?(p=rr(g.props.children,h.mode,w,g.key),p.return=h,h=p):(w=Ps(g.type,g.key,g.props,null,h.mode,w),w.ref=Ro(h,p,g),w.return=h,h=w)}return s(h);case pr:e:{for(E=g.key;p!==null;){if(p.key===E)if(p.tag===4&&p.stateNode.containerInfo===g.containerInfo&&p.stateNode.implementation===g.implementation){n(h,p.sibling),p=o(p,g.children||[]),p.return=h,h=p;break e}else{n(h,p);break}else t(h,p);p=p.sibling}p=lc(g,h.mode,w),p.return=h,h=p}return s(h);case cn:return E=g._init,x(h,p,E(g._payload),w)}if(io(g))return y(h,p,g,w);if(ro(g))return v(h,p,g,w);cs(h,g)}return typeof g=="string"&&g!==""||typeof g=="number"?(g=""+g,p!==null&&p.tag===6?(n(h,p.sibling),p=o(p,g),p.return=h,h=p):(n(h,p),p=sc(g,h.mode,w),p.return=h,h=p),s(h)):n(h,p)}return x}var br=qp(!0),Jp=qp(!1),No={},Ot=wn(No),bo=wn(No),Oo=wn(No);function Kn(e){if(e===No)throw Error(C(174));return e}function Eu(e,t){switch(J(Oo,t),J(bo,e),J(Ot,No),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:_a(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=_a(t,e)}re(Ot),J(Ot,t)}function Or(){re(Ot),re(bo),re(Oo)}function e0(e){Kn(Oo.current);var t=Kn(Ot.current),n=_a(t,e.type);t!==n&&(J(bo,e),J(Ot,n))}function Cu(e){bo.current===e&&(re(Ot),re(bo))}var le=wn(0);function fs(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Au=[];function $u(){for(var e=0;e<Au.length;e++)Au[e]._workInProgressVersionPrimary=null;Au.length=0}var ds=Yt.ReactCurrentDispatcher,Tu=Yt.ReactCurrentBatchConfig,qn=0,ae=null,he=null,ge=null,ps=!1,Lo=!1,Io=0,b2=0;function Ae(){throw Error(C(321))}function Pu(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!_t(e[n],t[n]))return!1;return!0}function Mu(e,t,n,r,o,i){if(qn=i,ae=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ds.current=e===null||e.memoizedState===null?F2:D2,e=n(r,o),Lo){i=0;do{if(Lo=!1,Io=0,25<=i)throw Error(C(301));i+=1,ge=he=null,t.updateQueue=null,ds.current=z2,e=n(r,o)}while(Lo)}if(ds.current=gs,t=he!==null&&he.next!==null,qn=0,ge=he=ae=null,ps=!1,t)throw Error(C(300));return e}function Ru(){var e=Io!==0;return Io=0,e}function Lt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ge===null?ae.memoizedState=ge=e:ge=ge.next=e,ge}function ht(){if(he===null){var e=ae.alternate;e=e!==null?e.memoizedState:null}else e=he.next;var t=ge===null?ae.memoizedState:ge.next;if(t!==null)ge=t,he=e;else{if(e===null)throw Error(C(310));he=e,e={memoizedState:he.memoizedState,baseState:he.baseState,baseQueue:he.baseQueue,queue:he.queue,next:null},ge===null?ae.memoizedState=ge=e:ge=ge.next=e}return ge}function Fo(e,t){return typeof t=="function"?t(e):t}function Nu(e){var t=ht(),n=t.queue;if(n===null)throw Error(C(311));n.lastRenderedReducer=e;var r=he,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var l=s=null,a=null,u=i;do{var c=u.lane;if((qn&c)===c)a!==null&&(a=a.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};a===null?(l=a=f,s=r):a=a.next=f,ae.lanes|=c,Jn|=c}u=u.next}while(u!==null&&u!==i);a===null?s=r:a.next=l,_t(r,t.memoizedState)||(De=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=a,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do i=o.lane,ae.lanes|=i,Jn|=i,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function bu(e){var t=ht(),n=t.queue;if(n===null)throw Error(C(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(o!==null){n.pending=null;var s=o=o.next;do i=e(i,s.action),s=s.next;while(s!==o);_t(i,t.memoizedState)||(De=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function t0(){}function n0(e,t){var n=ae,r=ht(),o=t(),i=!_t(r.memoizedState,o);if(i&&(r.memoizedState=o,De=!0),r=r.queue,Ou(i0.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||ge!==null&&ge.memoizedState.tag&1){if(n.flags|=2048,Do(9,o0.bind(null,n,r,o,t),void 0,null),ye===null)throw Error(C(349));qn&30||r0(n,t,o)}return o}function r0(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=ae.updateQueue,t===null?(t={lastEffect:null,stores:null},ae.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function o0(e,t,n,r){t.value=n,t.getSnapshot=r,s0(t)&&l0(e)}function i0(e,t,n){return n(function(){s0(t)&&l0(e)})}function s0(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!_t(e,n)}catch{return!0}}function l0(e){var t=Kt(e,1);t!==null&&Tt(t,e,1,-1)}function a0(e){var t=Lt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Fo,lastRenderedState:e},t.queue=e,e=e.dispatch=I2.bind(null,ae,e),[t.memoizedState,e]}function Do(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=ae.updateQueue,t===null?(t={lastEffect:null,stores:null},ae.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function u0(){return ht().memoizedState}function hs(e,t,n,r){var o=Lt();ae.flags|=e,o.memoizedState=Do(1|t,n,void 0,r===void 0?null:r)}function ms(e,t,n,r){var o=ht();r=r===void 0?null:r;var i=void 0;if(he!==null){var s=he.memoizedState;if(i=s.destroy,r!==null&&Pu(r,s.deps)){o.memoizedState=Do(t,n,i,r);return}}ae.flags|=e,o.memoizedState=Do(1|t,n,i,r)}function c0(e,t){return hs(8390656,8,e,t)}function Ou(e,t){return ms(2048,8,e,t)}function f0(e,t){return ms(4,2,e,t)}function d0(e,t){return ms(4,4,e,t)}function p0(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function h0(e,t,n){return n=n!=null?n.concat([e]):null,ms(4,4,p0.bind(null,t,e),n)}function Lu(){}function m0(e,t){var n=ht();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Pu(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function g0(e,t){var n=ht();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Pu(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function y0(e,t,n){return qn&21?(_t(n,t)||(n=Hd(),ae.lanes|=n,Jn|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,De=!0),e.memoizedState=n)}function O2(e,t){var n=K;K=n!==0&&4>n?n:4,e(!0);var r=Tu.transition;Tu.transition={};try{e(!1),t()}finally{K=n,Tu.transition=r}}function v0(){return ht().memoizedState}function L2(e,t,n){var r=$n(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},w0(e))x0(t,n);else if(n=Hp(e,t,n,r),n!==null){var o=Ne();Tt(n,e,r,o),S0(n,t,r)}}function I2(e,t,n){var r=$n(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(w0(e))x0(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var s=t.lastRenderedState,l=i(s,n);if(o.hasEagerState=!0,o.eagerState=l,_t(l,s)){var a=t.interleaved;a===null?(o.next=o,xu(t)):(o.next=a.next,a.next=o),t.interleaved=o;return}}catch{}finally{}n=Hp(e,t,o,r),n!==null&&(o=Ne(),Tt(n,e,r,o),S0(n,t,r))}}function w0(e){var t=e.alternate;return e===ae||t!==null&&t===ae}function x0(e,t){Lo=ps=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function S0(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,La(e,n)}}var gs={readContext:pt,useCallback:Ae,useContext:Ae,useEffect:Ae,useImperativeHandle:Ae,useInsertionEffect:Ae,useLayoutEffect:Ae,useMemo:Ae,useReducer:Ae,useRef:Ae,useState:Ae,useDebugValue:Ae,useDeferredValue:Ae,useTransition:Ae,useMutableSource:Ae,useSyncExternalStore:Ae,useId:Ae,unstable_isNewReconciler:!1},F2={readContext:pt,useCallback:function(e,t){return Lt().memoizedState=[e,t===void 0?null:t],e},useContext:pt,useEffect:c0,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,hs(4194308,4,p0.bind(null,t,e),n)},useLayoutEffect:function(e,t){return hs(4194308,4,e,t)},useInsertionEffect:function(e,t){return hs(4,2,e,t)},useMemo:function(e,t){var n=Lt();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Lt();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=L2.bind(null,ae,e),[r.memoizedState,e]},useRef:function(e){var t=Lt();return e={current:e},t.memoizedState=e},useState:a0,useDebugValue:Lu,useDeferredValue:function(e){return Lt().memoizedState=e},useTransition:function(){var e=a0(!1),t=e[0];return e=O2.bind(null,e[1]),Lt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ae,o=Lt();if(ie){if(n===void 0)throw Error(C(407));n=n()}else{if(n=t(),ye===null)throw Error(C(349));qn&30||r0(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,c0(i0.bind(null,r,i,e),[e]),r.flags|=2048,Do(9,o0.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Lt(),t=ye.identifierPrefix;if(ie){var n=Zt,r=Qt;n=(r&~(1<<32-kt(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Io++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=b2++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},D2={readContext:pt,useCallback:m0,useContext:pt,useEffect:Ou,useImperativeHandle:h0,useInsertionEffect:f0,useLayoutEffect:d0,useMemo:g0,useReducer:Nu,useRef:u0,useState:function(){return Nu(Fo)},useDebugValue:Lu,useDeferredValue:function(e){var t=ht();return y0(t,he.memoizedState,e)},useTransition:function(){var e=Nu(Fo)[0],t=ht().memoizedState;return[e,t]},useMutableSource:t0,useSyncExternalStore:n0,useId:v0,unstable_isNewReconciler:!1},z2={readContext:pt,useCallback:m0,useContext:pt,useEffect:Ou,useImperativeHandle:h0,useInsertionEffect:f0,useLayoutEffect:d0,useMemo:g0,useReducer:bu,useRef:u0,useState:function(){return bu(Fo)},useDebugValue:Lu,useDeferredValue:function(e){var t=ht();return he===null?t.memoizedState=e:y0(t,he.memoizedState,e)},useTransition:function(){var e=bu(Fo)[0],t=ht().memoizedState;return[e,t]},useMutableSource:t0,useSyncExternalStore:n0,useId:v0,unstable_isNewReconciler:!1};function Lr(e,t){try{var n="",r=t;do n+=pv(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function Iu(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Fu(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var j2=typeof WeakMap=="function"?WeakMap:Map;function k0(e,t,n){n=qt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){_s||(_s=!0,qu=r),Fu(e,t)},n}function _0(e,t,n){n=qt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){Fu(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){Fu(e,t),typeof r!="function"&&(Cn===null?Cn=new Set([this]):Cn.add(this));var s=t.stack;this.componentDidCatch(t.value,{componentStack:s!==null?s:""})}),n}function E0(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new j2;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=ew.bind(null,e,t,n),t.then(e,e))}function C0(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function A0(e,t,n,r,o){return e.mode&1?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=qt(-1,1),t.tag=2,_n(n,t,1))),n.lanes|=1),e)}var B2=Yt.ReactCurrentOwner,De=!1;function Re(e,t,n,r){t.child=e===null?Jp(t,null,n,r):br(t,e.child,n,r)}function $0(e,t,n,r,o){n=n.render;var i=t.ref;return Nr(t,o),r=Mu(e,t,n,r,i,o),n=Ru(),e!==null&&!De?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Jt(e,t,o)):(ie&&n&&fu(t),t.flags|=1,Re(e,t,r,o),t.child)}function T0(e,t,n,r,o){if(e===null){var i=n.type;return typeof i=="function"&&!ic(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,P0(e,t,i,r,o)):(e=Ps(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,!(e.lanes&o)){var s=i.memoizedProps;if(n=n.compare,n=n!==null?n:Eo,n(s,r)&&e.ref===t.ref)return Jt(e,t,o)}return t.flags|=1,e=Pn(i,r),e.ref=t.ref,e.return=t,t.child=e}function P0(e,t,n,r,o){if(e!==null){var i=e.memoizedProps;if(Eo(i,r)&&e.ref===t.ref)if(De=!1,t.pendingProps=r=i,(e.lanes&o)!==0)e.flags&131072&&(De=!0);else return t.lanes=e.lanes,Jt(e,t,o)}return Du(e,t,n,r,o)}function M0(e,t,n){var r=t.pendingProps,o=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},J(Fr,Ke),Ke|=n;else{if(!(n&1073741824))return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,J(Fr,Ke),Ke|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,J(Fr,Ke),Ke|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,J(Fr,Ke),Ke|=r;return Re(e,t,o,n),t.child}function R0(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Du(e,t,n,r,o){var i=Fe(n)?Gn:Ce.current;return i=$r(t,i),Nr(t,o),n=Mu(e,t,n,r,i,o),r=Ru(),e!==null&&!De?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Jt(e,t,o)):(ie&&r&&fu(t),t.flags|=1,Re(e,t,n,o),t.child)}function N0(e,t,n,r,o){if(Fe(n)){var i=!0;es(t)}else i=!1;if(Nr(t,o),t.stateNode===null)vs(e,t),Qp(t,n,r),_u(t,n,r,o),r=!0;else if(e===null){var s=t.stateNode,l=t.memoizedProps;s.props=l;var a=s.context,u=n.contextType;typeof u=="object"&&u!==null?u=pt(u):(u=Fe(n)?Gn:Ce.current,u=$r(t,u));var c=n.getDerivedStateFromProps,f=typeof c=="function"||typeof s.getSnapshotBeforeUpdate=="function";f||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(l!==r||a!==u)&&Zp(t,s,r,u),kn=!1;var d=t.memoizedState;s.state=d,as(t,r,s,o),a=t.memoizedState,l!==r||d!==a||Ie.current||kn?(typeof c=="function"&&(ku(t,n,c,r),a=t.memoizedState),(l=kn||Xp(t,n,l,r,d,a,u))?(f||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(t.flags|=4194308)):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=a),s.props=r,s.state=a,s.context=u,r=l):(typeof s.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{s=t.stateNode,Vp(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Ct(t.type,l),s.props=u,f=t.pendingProps,d=s.context,a=n.contextType,typeof a=="object"&&a!==null?a=pt(a):(a=Fe(n)?Gn:Ce.current,a=$r(t,a));var m=n.getDerivedStateFromProps;(c=typeof m=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(l!==f||d!==a)&&Zp(t,s,r,a),kn=!1,d=t.memoizedState,s.state=d,as(t,r,s,o);var y=t.memoizedState;l!==f||d!==y||Ie.current||kn?(typeof m=="function"&&(ku(t,n,m,r),y=t.memoizedState),(u=kn||Xp(t,n,u,r,d,y,a)||!1)?(c||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(r,y,a),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(r,y,a)),typeof s.componentDidUpdate=="function"&&(t.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof s.componentDidUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=y),s.props=r,s.state=y,s.context=a,r=u):(typeof s.componentDidUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return zu(e,t,n,r,i,o)}function zu(e,t,n,r,o,i){R0(e,t);var s=(t.flags&128)!==0;if(!r&&!s)return o&&Ip(t,n,!1),Jt(e,t,i);r=t.stateNode,B2.current=t;var l=s&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&s?(t.child=br(t,e.child,null,i),t.child=br(t,null,l,i)):Re(e,t,l,i),t.memoizedState=r.state,o&&Ip(t,n,!0),t.child}function b0(e){var t=e.stateNode;t.pendingContext?Op(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Op(e,t.context,!1),Eu(e,t.containerInfo)}function O0(e,t,n,r,o){return Mr(),mu(o),t.flags|=256,Re(e,t,n,r),t.child}var ju={dehydrated:null,treeContext:null,retryLane:0};function Bu(e){return{baseLanes:e,cachePool:null,transitions:null}}function L0(e,t,n){var r=t.pendingProps,o=le.current,i=!1,s=(t.flags&128)!==0,l;if((l=s)||(l=e!==null&&e.memoizedState===null?!1:(o&2)!==0),l?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),J(le,o&1),e===null)return hu(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=r.children,e=r.fallback,i?(r=t.mode,i=t.child,s={mode:"hidden",children:s},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=s):i=Ms(s,r,0,null),e=rr(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Bu(n),t.memoizedState=ju,e):Uu(t,s));if(o=e.memoizedState,o!==null&&(l=o.dehydrated,l!==null))return U2(e,t,s,r,l,o,n);if(i){i=r.fallback,s=t.mode,o=e.child,l=o.sibling;var a={mode:"hidden",children:r.children};return!(s&1)&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=a,t.deletions=null):(r=Pn(o,a),r.subtreeFlags=o.subtreeFlags&14680064),l!==null?i=Pn(l,i):(i=rr(i,s,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,s=e.child.memoizedState,s=s===null?Bu(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},i.memoizedState=s,i.childLanes=e.childLanes&~n,t.memoizedState=ju,r}return i=e.child,e=i.sibling,r=Pn(i,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Uu(e,t){return t=Ms({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function ys(e,t,n,r){return r!==null&&mu(r),br(t,e.child,null,n),e=Uu(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function U2(e,t,n,r,o,i,s){if(n)return t.flags&256?(t.flags&=-257,r=Iu(Error(C(422))),ys(e,t,s,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Ms({mode:"visible",children:r.children},o,0,null),i=rr(i,o,s,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,t.mode&1&&br(t,e.child,null,s),t.child.memoizedState=Bu(s),t.memoizedState=ju,i);if(!(t.mode&1))return ys(e,t,s,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var l=r.dgst;return r=l,i=Error(C(419)),r=Iu(i,r,void 0),ys(e,t,s,r)}if(l=(s&e.childLanes)!==0,De||l){if(r=ye,r!==null){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|s)?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,Kt(e,o),Tt(r,e,o,-1))}return oc(),r=Iu(Error(C(421))),ys(e,t,s,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=tw.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,Ze=vn(o.nextSibling),Qe=t,ie=!0,Et=null,e!==null&&(ft[dt++]=Qt,ft[dt++]=Zt,ft[dt++]=Xn,Qt=e.id,Zt=e.overflow,Xn=t),t=Uu(t,r.children),t.flags|=4096,t)}function I0(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),wu(e.return,t,n)}function Hu(e,t,n,r,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function F0(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Re(e,t,r.children,n),r=le.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&I0(e,n,t);else if(e.tag===19)I0(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(J(le,r),!(t.mode&1))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&fs(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Hu(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&fs(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Hu(t,!0,n,null,i);break;case"together":Hu(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function vs(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Jt(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Jn|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(C(153));if(t.child!==null){for(e=t.child,n=Pn(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Pn(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function H2(e,t,n){switch(t.tag){case 3:b0(t),Mr();break;case 5:e0(t);break;case 1:Fe(t.type)&&es(t);break;case 4:Eu(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;J(is,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(J(le,le.current&1),t.flags|=128,null):n&t.child.childLanes?L0(e,t,n):(J(le,le.current&1),e=Jt(e,t,n),e!==null?e.sibling:null);J(le,le.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return F0(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),J(le,le.current),r)break;return null;case 22:case 23:return t.lanes=0,M0(e,t,n)}return Jt(e,t,n)}var D0,Vu,z0,j0;D0=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Vu=function(){},z0=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Kn(Ot.current);var i=null;switch(n){case"input":o=wa(e,o),r=wa(e,r),i=[];break;case"select":o=se({},o,{value:void 0}),r=se({},r,{value:void 0}),i=[];break;case"textarea":o=ka(e,o),r=ka(e,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Ki)}Ea(n,r);var s;n=null;for(u in o)if(!r.hasOwnProperty(u)&&o.hasOwnProperty(u)&&o[u]!=null)if(u==="style"){var l=o[u];for(s in l)l.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(no.hasOwnProperty(u)?i||(i=[]):(i=i||[]).push(u,null));for(u in r){var a=r[u];if(l=o!=null?o[u]:void 0,r.hasOwnProperty(u)&&a!==l&&(a!=null||l!=null))if(u==="style")if(l){for(s in l)!l.hasOwnProperty(s)||a&&a.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in a)a.hasOwnProperty(s)&&l[s]!==a[s]&&(n||(n={}),n[s]=a[s])}else n||(i||(i=[]),i.push(u,n)),n=a;else u==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,l=l?l.__html:void 0,a!=null&&l!==a&&(i=i||[]).push(u,a)):u==="children"?typeof a!="string"&&typeof a!="number"||(i=i||[]).push(u,""+a):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(no.hasOwnProperty(u)?(a!=null&&u==="onScroll"&&ne("scroll",e),i||l===a||(i=[])):(i=i||[]).push(u,a))}n&&(i=i||[]).push("style",n);var u=i;(t.updateQueue=u)&&(t.flags|=4)}},j0=function(e,t,n,r){n!==r&&(t.flags|=4)};function zo(e,t){if(!ie)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $e(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function V2(e,t,n){var r=t.pendingProps;switch(du(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $e(t),null;case 1:return Fe(t.type)&&Ji(),$e(t),null;case 3:return r=t.stateNode,Or(),re(Ie),re(Ce),$u(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(os(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,Et!==null&&(tc(Et),Et=null))),Vu(e,t),$e(t),null;case 5:Cu(t);var o=Kn(Oo.current);if(n=t.type,e!==null&&t.stateNode!=null)z0(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(C(166));return $e(t),null}if(e=Kn(Ot.current),os(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[bt]=t,r[Po]=i,e=(t.mode&1)!==0,n){case"dialog":ne("cancel",r),ne("close",r);break;case"iframe":case"object":case"embed":ne("load",r);break;case"video":case"audio":for(o=0;o<Ao.length;o++)ne(Ao[o],r);break;case"source":ne("error",r);break;case"img":case"image":case"link":ne("error",r),ne("load",r);break;case"details":ne("toggle",r);break;case"input":wd(r,i),ne("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},ne("invalid",r);break;case"textarea":kd(r,i),ne("invalid",r)}Ea(n,i),o=null;for(var s in i)if(i.hasOwnProperty(s)){var l=i[s];s==="children"?typeof l=="string"?r.textContent!==l&&(i.suppressHydrationWarning!==!0&&Zi(r.textContent,l,e),o=["children",l]):typeof l=="number"&&r.textContent!==""+l&&(i.suppressHydrationWarning!==!0&&Zi(r.textContent,l,e),o=["children",""+l]):no.hasOwnProperty(s)&&l!=null&&s==="onScroll"&&ne("scroll",r)}switch(n){case"input":$i(r),Sd(r,i,!0);break;case"textarea":$i(r),Ed(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=Ki)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{s=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Cd(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=s.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),n==="select"&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[bt]=t,e[Po]=r,D0(e,t,!1,!1),t.stateNode=e;e:{switch(s=Ca(n,r),n){case"dialog":ne("cancel",e),ne("close",e),o=r;break;case"iframe":case"object":case"embed":ne("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ao.length;o++)ne(Ao[o],e);o=r;break;case"source":ne("error",e),o=r;break;case"img":case"image":case"link":ne("error",e),ne("load",e),o=r;break;case"details":ne("toggle",e),o=r;break;case"input":wd(e,r),o=wa(e,r),ne("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=se({},r,{value:void 0}),ne("invalid",e);break;case"textarea":kd(e,r),o=ka(e,r),ne("invalid",e);break;default:o=r}Ea(n,o),l=o;for(i in l)if(l.hasOwnProperty(i)){var a=l[i];i==="style"?Td(e,a):i==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,a!=null&&Ad(e,a)):i==="children"?typeof a=="string"?(n!=="textarea"||a!=="")&&so(e,a):typeof a=="number"&&so(e,""+a):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(no.hasOwnProperty(i)?a!=null&&i==="onScroll"&&ne("scroll",e):a!=null&&aa(e,i,a,s))}switch(n){case"input":$i(e),Sd(e,r,!1);break;case"textarea":$i(e),Ed(e);break;case"option":r.value!=null&&e.setAttribute("value",""+fn(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?mr(e,!!r.multiple,i,!1):r.defaultValue!=null&&mr(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=Ki)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return $e(t),null;case 6:if(e&&t.stateNode!=null)j0(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(C(166));if(n=Kn(Oo.current),Kn(Ot.current),os(t)){if(r=t.stateNode,n=t.memoizedProps,r[bt]=t,(i=r.nodeValue!==n)&&(e=Qe,e!==null))switch(e.tag){case 3:Zi(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Zi(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[bt]=t,t.stateNode=r}return $e(t),null;case 13:if(re(le),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(ie&&Ze!==null&&t.mode&1&&!(t.flags&128))Up(),Mr(),t.flags|=98560,i=!1;else if(i=os(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(C(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(C(317));i[bt]=t}else Mr(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;$e(t),i=!1}else Et!==null&&(tc(Et),Et=null),i=!0;if(!i)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||le.current&1?me===0&&(me=3):oc())),t.updateQueue!==null&&(t.flags|=4),$e(t),null);case 4:return Or(),Vu(e,t),e===null&&$o(t.stateNode.containerInfo),$e(t),null;case 10:return vu(t.type._context),$e(t),null;case 17:return Fe(t.type)&&Ji(),$e(t),null;case 19:if(re(le),i=t.memoizedState,i===null)return $e(t),null;if(r=(t.flags&128)!==0,s=i.rendering,s===null)if(r)zo(i,!1);else{if(me!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(s=fs(e),s!==null){for(t.flags|=128,zo(i,!1),r=s.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,s=i.alternate,s===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return J(le,le.current&1|2),t.child}e=e.sibling}i.tail!==null&&ce()>Dr&&(t.flags|=128,r=!0,zo(i,!1),t.lanes=4194304)}else{if(!r)if(e=fs(s),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),zo(i,!0),i.tail===null&&i.tailMode==="hidden"&&!s.alternate&&!ie)return $e(t),null}else 2*ce()-i.renderingStartTime>Dr&&n!==1073741824&&(t.flags|=128,r=!0,zo(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(n=i.last,n!==null?n.sibling=s:t.child=s,i.last=s)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=ce(),t.sibling=null,n=le.current,J(le,r?n&1|2:n&1),t):($e(t),null);case 22:case 23:return rc(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Ke&1073741824&&($e(t),t.subtreeFlags&6&&(t.flags|=8192)):$e(t),null;case 24:return null;case 25:return null}throw Error(C(156,t.tag))}function W2(e,t){switch(du(t),t.tag){case 1:return Fe(t.type)&&Ji(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return Or(),re(Ie),re(Ce),$u(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return Cu(t),null;case 13:if(re(le),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(C(340));Mr()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return re(le),null;case 4:return Or(),null;case 10:return vu(t.type._context),null;case 22:case 23:return rc(),null;case 24:return null;default:return null}}var ws=!1,Te=!1,Y2=typeof WeakSet=="function"?WeakSet:Set,R=null;function Ir(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){ue(e,t,r)}else n.current=null}function Wu(e,t,n){try{n()}catch(r){ue(e,t,r)}}var B0=!1;function G2(e,t){if(ru=zi,e=vp(),Qa(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var s=0,l=-1,a=-1,u=0,c=0,f=e,d=null;t:for(;;){for(var m;f!==n||o!==0&&f.nodeType!==3||(l=s+o),f!==i||r!==0&&f.nodeType!==3||(a=s+r),f.nodeType===3&&(s+=f.nodeValue.length),(m=f.firstChild)!==null;)d=f,f=m;for(;;){if(f===e)break t;if(d===n&&++u===o&&(l=s),d===i&&++c===r&&(a=s),(m=f.nextSibling)!==null)break;f=d,d=f.parentNode}f=m}n=l===-1||a===-1?null:{start:l,end:a}}else n=null}n=n||{start:0,end:0}}else n=null;for(ou={focusedElem:e,selectionRange:n},zi=!1,R=t;R!==null;)if(t=R,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,R=e;else for(;R!==null;){t=R;try{var y=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(y!==null){var v=y.memoizedProps,x=y.memoizedState,h=t.stateNode,p=h.getSnapshotBeforeUpdate(t.elementType===t.type?v:Ct(t.type,v),x);h.__reactInternalSnapshotBeforeUpdate=p}break;case 3:var g=t.stateNode.containerInfo;g.nodeType===1?g.textContent="":g.nodeType===9&&g.documentElement&&g.removeChild(g.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(C(163))}}catch(w){ue(t,t.return,w)}if(e=t.sibling,e!==null){e.return=t.return,R=e;break}R=t.return}return y=B0,B0=!1,y}function jo(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&Wu(t,n,i)}o=o.next}while(o!==r)}}function xs(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Yu(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function U0(e){var t=e.alternate;t!==null&&(e.alternate=null,U0(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[bt],delete t[Po],delete t[au],delete t[P2],delete t[M2])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function H0(e){return e.tag===5||e.tag===3||e.tag===4}function V0(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||H0(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Gu(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Ki));else if(r!==4&&(e=e.child,e!==null))for(Gu(e,t,n),e=e.sibling;e!==null;)Gu(e,t,n),e=e.sibling}function Xu(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Xu(e,t,n),e=e.sibling;e!==null;)Xu(e,t,n),e=e.sibling}var xe=null,At=!1;function En(e,t,n){for(n=n.child;n!==null;)W0(e,t,n),n=n.sibling}function W0(e,t,n){if(Nt&&typeof Nt.onCommitFiberUnmount=="function")try{Nt.onCommitFiberUnmount(bi,n)}catch{}switch(n.tag){case 5:Te||Ir(n,t);case 6:var r=xe,o=At;xe=null,En(e,t,n),xe=r,At=o,xe!==null&&(At?(e=xe,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):xe.removeChild(n.stateNode));break;case 18:xe!==null&&(At?(e=xe,n=n.stateNode,e.nodeType===8?lu(e.parentNode,n):e.nodeType===1&&lu(e,n),vo(e)):lu(xe,n.stateNode));break;case 4:r=xe,o=At,xe=n.stateNode.containerInfo,At=!0,En(e,t,n),xe=r,At=o;break;case 0:case 11:case 14:case 15:if(!Te&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,s=i.destroy;i=i.tag,s!==void 0&&(i&2||i&4)&&Wu(n,t,s),o=o.next}while(o!==r)}En(e,t,n);break;case 1:if(!Te&&(Ir(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){ue(n,t,l)}En(e,t,n);break;case 21:En(e,t,n);break;case 22:n.mode&1?(Te=(r=Te)||n.memoizedState!==null,En(e,t,n),Te=r):En(e,t,n);break;default:En(e,t,n)}}function Y0(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new Y2),t.forEach(function(r){var o=nw.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function $t(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,s=t,l=s;e:for(;l!==null;){switch(l.tag){case 5:xe=l.stateNode,At=!1;break e;case 3:xe=l.stateNode.containerInfo,At=!0;break e;case 4:xe=l.stateNode.containerInfo,At=!0;break e}l=l.return}if(xe===null)throw Error(C(160));W0(i,s,o),xe=null,At=!1;var a=o.alternate;a!==null&&(a.return=null),o.return=null}catch(u){ue(o,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)G0(t,e),t=t.sibling}function G0(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if($t(t,e),It(e),r&4){try{jo(3,e,e.return),xs(3,e)}catch(v){ue(e,e.return,v)}try{jo(5,e,e.return)}catch(v){ue(e,e.return,v)}}break;case 1:$t(t,e),It(e),r&512&&n!==null&&Ir(n,n.return);break;case 5:if($t(t,e),It(e),r&512&&n!==null&&Ir(n,n.return),e.flags&32){var o=e.stateNode;try{so(o,"")}catch(v){ue(e,e.return,v)}}if(r&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,s=n!==null?n.memoizedProps:i,l=e.type,a=e.updateQueue;if(e.updateQueue=null,a!==null)try{l==="input"&&i.type==="radio"&&i.name!=null&&xd(o,i),Ca(l,s);var u=Ca(l,i);for(s=0;s<a.length;s+=2){var c=a[s],f=a[s+1];c==="style"?Td(o,f):c==="dangerouslySetInnerHTML"?Ad(o,f):c==="children"?so(o,f):aa(o,c,f,u)}switch(l){case"input":xa(o,i);break;case"textarea":_d(o,i);break;case"select":var d=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;m!=null?mr(o,!!i.multiple,m,!1):d!==!!i.multiple&&(i.defaultValue!=null?mr(o,!!i.multiple,i.defaultValue,!0):mr(o,!!i.multiple,i.multiple?[]:"",!1))}o[Po]=i}catch(v){ue(e,e.return,v)}}break;case 6:if($t(t,e),It(e),r&4){if(e.stateNode===null)throw Error(C(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(v){ue(e,e.return,v)}}break;case 3:if($t(t,e),It(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{vo(t.containerInfo)}catch(v){ue(e,e.return,v)}break;case 4:$t(t,e),It(e);break;case 13:$t(t,e),It(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(Ku=ce())),r&4&&Y0(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(Te=(u=Te)||c,$t(t,e),Te=u):$t(t,e),It(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(R=e,c=e.child;c!==null;){for(f=R=c;R!==null;){switch(d=R,m=d.child,d.tag){case 0:case 11:case 14:case 15:jo(4,d,d.return);break;case 1:Ir(d,d.return);var y=d.stateNode;if(typeof y.componentWillUnmount=="function"){r=d,n=d.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(v){ue(r,n,v)}}break;case 5:Ir(d,d.return);break;case 22:if(d.memoizedState!==null){Z0(f);continue}}m!==null?(m.return=d,R=m):Z0(f)}c=c.sibling}e:for(c=null,f=e;;){if(f.tag===5){if(c===null){c=f;try{o=f.stateNode,u?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(l=f.stateNode,a=f.memoizedProps.style,s=a!=null&&a.hasOwnProperty("display")?a.display:null,l.style.display=$d("display",s))}catch(v){ue(e,e.return,v)}}}else if(f.tag===6){if(c===null)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(v){ue(e,e.return,v)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;c===f&&(c=null),f=f.return}c===f&&(c=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:$t(t,e),It(e),r&4&&Y0(e);break;case 21:break;default:$t(t,e),It(e)}}function It(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(H0(n)){var r=n;break e}n=n.return}throw Error(C(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(so(o,""),r.flags&=-33);var i=V0(e);Xu(e,i,o);break;case 3:case 4:var s=r.stateNode.containerInfo,l=V0(e);Gu(e,l,s);break;default:throw Error(C(161))}}catch(a){ue(e,e.return,a)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function X2(e,t,n){R=e,X0(e)}function X0(e,t,n){for(var r=(e.mode&1)!==0;R!==null;){var o=R,i=o.child;if(o.tag===22&&r){var s=o.memoizedState!==null||ws;if(!s){var l=o.alternate,a=l!==null&&l.memoizedState!==null||Te;l=ws;var u=Te;if(ws=s,(Te=a)&&!u)for(R=o;R!==null;)s=R,a=s.child,s.tag===22&&s.memoizedState!==null?K0(o):a!==null?(a.return=s,R=a):K0(o);for(;i!==null;)R=i,X0(i),i=i.sibling;R=o,ws=l,Te=u}Q0(e)}else o.subtreeFlags&8772&&i!==null?(i.return=o,R=i):Q0(e)}}function Q0(e){for(;R!==null;){var t=R;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:Te||xs(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Te)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Ct(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&Yp(t,i,r);break;case 3:var s=t.updateQueue;if(s!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Yp(t,s,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var a=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":a.autoFocus&&n.focus();break;case"img":a.src&&(n.src=a.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var f=c.dehydrated;f!==null&&vo(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(C(163))}Te||t.flags&512&&Yu(t)}catch(d){ue(t,t.return,d)}}if(t===e){R=null;break}if(n=t.sibling,n!==null){n.return=t.return,R=n;break}R=t.return}}function Z0(e){for(;R!==null;){var t=R;if(t===e){R=null;break}var n=t.sibling;if(n!==null){n.return=t.return,R=n;break}R=t.return}}function K0(e){for(;R!==null;){var t=R;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{xs(4,t)}catch(a){ue(t,n,a)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(a){ue(t,o,a)}}var i=t.return;try{Yu(t)}catch(a){ue(t,i,a)}break;case 5:var s=t.return;try{Yu(t)}catch(a){ue(t,s,a)}}}catch(a){ue(t,t.return,a)}if(t===e){R=null;break}var l=t.sibling;if(l!==null){l.return=t.return,R=l;break}R=t.return}}var Q2=Math.ceil,Ss=Yt.ReactCurrentDispatcher,Qu=Yt.ReactCurrentOwner,mt=Yt.ReactCurrentBatchConfig,X=0,ye=null,fe=null,Se=0,Ke=0,Fr=wn(0),me=0,Bo=null,Jn=0,ks=0,Zu=0,Uo=null,ze=null,Ku=0,Dr=1/0,en=null,_s=!1,qu=null,Cn=null,Es=!1,An=null,Cs=0,Ho=0,Ju=null,As=-1,$s=0;function Ne(){return X&6?ce():As!==-1?As:As=ce()}function $n(e){return e.mode&1?X&2&&Se!==0?Se&-Se:N2.transition!==null?($s===0&&($s=Hd()),$s):(e=K,e!==0||(e=window.event,e=e===void 0?16:qd(e.type)),e):1}function Tt(e,t,n,r){if(50<Ho)throw Ho=0,Ju=null,Error(C(185));po(e,n,r),(!(X&2)||e!==ye)&&(e===ye&&(!(X&2)&&(ks|=n),me===4&&Tn(e,Se)),je(e,r),n===1&&X===0&&!(t.mode&1)&&(Dr=ce()+500,ts&&Sn()))}function je(e,t){var n=e.callbackNode;Nv(e,t);var r=Ii(e,e===ye?Se:0);if(r===0)n!==null&&jd(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&jd(n),t===1)e.tag===0?R2(J0.bind(null,e)):Fp(J0.bind(null,e)),$2(function(){!(X&6)&&Sn()}),n=null;else{switch(Vd(r)){case 1:n=Na;break;case 4:n=Bd;break;case 16:n=Ni;break;case 536870912:n=Ud;break;default:n=Ni}n=lh(n,q0.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function q0(e,t){if(As=-1,$s=0,X&6)throw Error(C(327));var n=e.callbackNode;if(zr()&&e.callbackNode!==n)return null;var r=Ii(e,e===ye?Se:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=Ts(e,r);else{t=r;var o=X;X|=2;var i=th();(ye!==e||Se!==t)&&(en=null,Dr=ce()+500,tr(e,t));do try{q2();break}catch(l){eh(e,l)}while(!0);yu(),Ss.current=i,X=o,fe!==null?t=0:(ye=null,Se=0,t=me)}if(t!==0){if(t===2&&(o=ba(e),o!==0&&(r=o,t=ec(e,o))),t===1)throw n=Bo,tr(e,0),Tn(e,r),je(e,ce()),n;if(t===6)Tn(e,r);else{if(o=e.current.alternate,!(r&30)&&!Z2(o)&&(t=Ts(e,r),t===2&&(i=ba(e),i!==0&&(r=i,t=ec(e,i))),t===1))throw n=Bo,tr(e,0),Tn(e,r),je(e,ce()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(C(345));case 2:nr(e,ze,en);break;case 3:if(Tn(e,r),(r&130023424)===r&&(t=Ku+500-ce(),10<t)){if(Ii(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){Ne(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=su(nr.bind(null,e,ze,en),t);break}nr(e,ze,en);break;case 4:if(Tn(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var s=31-kt(r);i=1<<s,s=t[s],s>o&&(o=s),r&=~i}if(r=o,r=ce()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Q2(r/1960))-r,10<r){e.timeoutHandle=su(nr.bind(null,e,ze,en),r);break}nr(e,ze,en);break;case 5:nr(e,ze,en);break;default:throw Error(C(329))}}}return je(e,ce()),e.callbackNode===n?q0.bind(null,e):null}function ec(e,t){var n=Uo;return e.current.memoizedState.isDehydrated&&(tr(e,t).flags|=256),e=Ts(e,t),e!==2&&(t=ze,ze=n,t!==null&&tc(t)),e}function tc(e){ze===null?ze=e:ze.push.apply(ze,e)}function Z2(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!_t(i(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Tn(e,t){for(t&=~Zu,t&=~ks,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-kt(t),r=1<<n;e[n]=-1,t&=~r}}function J0(e){if(X&6)throw Error(C(327));zr();var t=Ii(e,0);if(!(t&1))return je(e,ce()),null;var n=Ts(e,t);if(e.tag!==0&&n===2){var r=ba(e);r!==0&&(t=r,n=ec(e,r))}if(n===1)throw n=Bo,tr(e,0),Tn(e,t),je(e,ce()),n;if(n===6)throw Error(C(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,nr(e,ze,en),je(e,ce()),null}function nc(e,t){var n=X;X|=1;try{return e(t)}finally{X=n,X===0&&(Dr=ce()+500,ts&&Sn())}}function er(e){An!==null&&An.tag===0&&!(X&6)&&zr();var t=X;X|=1;var n=mt.transition,r=K;try{if(mt.transition=null,K=1,e)return e()}finally{K=r,mt.transition=n,X=t,!(X&6)&&Sn()}}function rc(){Ke=Fr.current,re(Fr)}function tr(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,A2(n)),fe!==null)for(n=fe.return;n!==null;){var r=n;switch(du(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Ji();break;case 3:Or(),re(Ie),re(Ce),$u();break;case 5:Cu(r);break;case 4:Or();break;case 13:re(le);break;case 19:re(le);break;case 10:vu(r.type._context);break;case 22:case 23:rc()}n=n.return}if(ye=e,fe=e=Pn(e.current,null),Se=Ke=t,me=0,Bo=null,Zu=ks=Jn=0,ze=Uo=null,Zn!==null){for(t=0;t<Zn.length;t++)if(n=Zn[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var s=i.next;i.next=o,r.next=s}n.pending=r}Zn=null}return e}function eh(e,t){do{var n=fe;try{if(yu(),ds.current=gs,ps){for(var r=ae.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}ps=!1}if(qn=0,ge=he=ae=null,Lo=!1,Io=0,Qu.current=null,n===null||n.return===null){me=1,Bo=t,fe=null;break}e:{var i=e,s=n.return,l=n,a=t;if(t=Se,l.flags|=32768,a!==null&&typeof a=="object"&&typeof a.then=="function"){var u=a,c=l,f=c.tag;if(!(c.mode&1)&&(f===0||f===11||f===15)){var d=c.alternate;d?(c.updateQueue=d.updateQueue,c.memoizedState=d.memoizedState,c.lanes=d.lanes):(c.updateQueue=null,c.memoizedState=null)}var m=C0(s);if(m!==null){m.flags&=-257,A0(m,s,l,i,t),m.mode&1&&E0(i,u,t),t=m,a=u;var y=t.updateQueue;if(y===null){var v=new Set;v.add(a),t.updateQueue=v}else y.add(a);break e}else{if(!(t&1)){E0(i,u,t),oc();break e}a=Error(C(426))}}else if(ie&&l.mode&1){var x=C0(s);if(x!==null){!(x.flags&65536)&&(x.flags|=256),A0(x,s,l,i,t),mu(Lr(a,l));break e}}i=a=Lr(a,l),me!==4&&(me=2),Uo===null?Uo=[i]:Uo.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var h=k0(i,a,t);Wp(i,h);break e;case 1:l=a;var p=i.type,g=i.stateNode;if(!(i.flags&128)&&(typeof p.getDerivedStateFromError=="function"||g!==null&&typeof g.componentDidCatch=="function"&&(Cn===null||!Cn.has(g)))){i.flags|=65536,t&=-t,i.lanes|=t;var w=_0(i,l,t);Wp(i,w);break e}}i=i.return}while(i!==null)}rh(n)}catch(S){t=S,fe===n&&n!==null&&(fe=n=n.return);continue}break}while(!0)}function th(){var e=Ss.current;return Ss.current=gs,e===null?gs:e}function oc(){(me===0||me===3||me===2)&&(me=4),ye===null||!(Jn&268435455)&&!(ks&268435455)||Tn(ye,Se)}function Ts(e,t){var n=X;X|=2;var r=th();(ye!==e||Se!==t)&&(en=null,tr(e,t));do try{K2();break}catch(o){eh(e,o)}while(!0);if(yu(),X=n,Ss.current=r,fe!==null)throw Error(C(261));return ye=null,Se=0,me}function K2(){for(;fe!==null;)nh(fe)}function q2(){for(;fe!==null&&!_v();)nh(fe)}function nh(e){var t=sh(e.alternate,e,Ke);e.memoizedProps=e.pendingProps,t===null?rh(e):fe=t,Qu.current=null}function rh(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=W2(n,t),n!==null){n.flags&=32767,fe=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{me=6,fe=null;return}}else if(n=V2(n,t,Ke),n!==null){fe=n;return}if(t=t.sibling,t!==null){fe=t;return}fe=t=e}while(t!==null);me===0&&(me=5)}function nr(e,t,n){var r=K,o=mt.transition;try{mt.transition=null,K=1,J2(e,t,n,r)}finally{mt.transition=o,K=r}return null}function J2(e,t,n,r){do zr();while(An!==null);if(X&6)throw Error(C(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(C(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(bv(e,i),e===ye&&(fe=ye=null,Se=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Es||(Es=!0,lh(Ni,function(){return zr(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=mt.transition,mt.transition=null;var s=K;K=1;var l=X;X|=4,Qu.current=null,G2(e,n),G0(n,e),w2(ou),zi=!!ru,ou=ru=null,e.current=n,X2(n),Ev(),X=l,K=s,mt.transition=i}else e.current=n;if(Es&&(Es=!1,An=e,Cs=o),i=e.pendingLanes,i===0&&(Cn=null),$v(n.stateNode),je(e,ce()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(_s)throw _s=!1,e=qu,qu=null,e;return Cs&1&&e.tag!==0&&zr(),i=e.pendingLanes,i&1?e===Ju?Ho++:(Ho=0,Ju=e):Ho=0,Sn(),null}function zr(){if(An!==null){var e=Vd(Cs),t=mt.transition,n=K;try{if(mt.transition=null,K=16>e?16:e,An===null)var r=!1;else{if(e=An,An=null,Cs=0,X&6)throw Error(C(331));var o=X;for(X|=4,R=e.current;R!==null;){var i=R,s=i.child;if(R.flags&16){var l=i.deletions;if(l!==null){for(var a=0;a<l.length;a++){var u=l[a];for(R=u;R!==null;){var c=R;switch(c.tag){case 0:case 11:case 15:jo(8,c,i)}var f=c.child;if(f!==null)f.return=c,R=f;else for(;R!==null;){c=R;var d=c.sibling,m=c.return;if(U0(c),c===u){R=null;break}if(d!==null){d.return=m,R=d;break}R=m}}}var y=i.alternate;if(y!==null){var v=y.child;if(v!==null){y.child=null;do{var x=v.sibling;v.sibling=null,v=x}while(v!==null)}}R=i}}if(i.subtreeFlags&2064&&s!==null)s.return=i,R=s;else e:for(;R!==null;){if(i=R,i.flags&2048)switch(i.tag){case 0:case 11:case 15:jo(9,i,i.return)}var h=i.sibling;if(h!==null){h.return=i.return,R=h;break e}R=i.return}}var p=e.current;for(R=p;R!==null;){s=R;var g=s.child;if(s.subtreeFlags&2064&&g!==null)g.return=s,R=g;else e:for(s=p;R!==null;){if(l=R,l.flags&2048)try{switch(l.tag){case 0:case 11:case 15:xs(9,l)}}catch(S){ue(l,l.return,S)}if(l===s){R=null;break e}var w=l.sibling;if(w!==null){w.return=l.return,R=w;break e}R=l.return}}if(X=o,Sn(),Nt&&typeof Nt.onPostCommitFiberRoot=="function")try{Nt.onPostCommitFiberRoot(bi,e)}catch{}r=!0}return r}finally{K=n,mt.transition=t}}return!1}function oh(e,t,n){t=Lr(n,t),t=k0(e,t,1),e=_n(e,t,1),t=Ne(),e!==null&&(po(e,1,t),je(e,t))}function ue(e,t,n){if(e.tag===3)oh(e,e,n);else for(;t!==null;){if(t.tag===3){oh(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Cn===null||!Cn.has(r))){e=Lr(n,e),e=_0(t,e,1),t=_n(t,e,1),e=Ne(),t!==null&&(po(t,1,e),je(t,e));break}}t=t.return}}function ew(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=Ne(),e.pingedLanes|=e.suspendedLanes&n,ye===e&&(Se&n)===n&&(me===4||me===3&&(Se&130023424)===Se&&500>ce()-Ku?tr(e,0):Zu|=n),je(e,t)}function ih(e,t){t===0&&(e.mode&1?(t=Li,Li<<=1,!(Li&130023424)&&(Li=4194304)):t=1);var n=Ne();e=Kt(e,t),e!==null&&(po(e,t,n),je(e,n))}function tw(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),ih(e,n)}function nw(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(C(314))}r!==null&&r.delete(t),ih(e,n)}var sh;sh=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ie.current)De=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return De=!1,H2(e,t,n);De=!!(e.flags&131072)}else De=!1,ie&&t.flags&1048576&&Dp(t,rs,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;vs(e,t),e=t.pendingProps;var o=$r(t,Ce.current);Nr(t,n),o=Mu(null,t,r,e,o,n);var i=Ru();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Fe(r)?(i=!0,es(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Su(t),o.updater=us,t.stateNode=o,o._reactInternals=t,_u(t,r,e,n),t=zu(null,t,r,!0,i,n)):(t.tag=0,ie&&i&&fu(t),Re(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(vs(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=ow(r),e=Ct(r,e),o){case 0:t=Du(null,t,r,e,n);break e;case 1:t=N0(null,t,r,e,n);break e;case 11:t=$0(null,t,r,e,n);break e;case 14:t=T0(null,t,r,Ct(r.type,e),n);break e}throw Error(C(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ct(r,o),Du(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ct(r,o),N0(e,t,r,o,n);case 3:e:{if(b0(t),e===null)throw Error(C(387));r=t.pendingProps,i=t.memoizedState,o=i.element,Vp(e,t),as(t,r,null,n);var s=t.memoizedState;if(r=s.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=Lr(Error(C(423)),t),t=O0(e,t,r,n,o);break e}else if(r!==o){o=Lr(Error(C(424)),t),t=O0(e,t,r,n,o);break e}else for(Ze=vn(t.stateNode.containerInfo.firstChild),Qe=t,ie=!0,Et=null,n=Jp(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(Mr(),r===o){t=Jt(e,t,n);break e}Re(e,t,r,n)}t=t.child}return t;case 5:return e0(t),e===null&&hu(t),r=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,s=o.children,iu(r,o)?s=null:i!==null&&iu(r,i)&&(t.flags|=32),R0(e,t),Re(e,t,s,n),t.child;case 6:return e===null&&hu(t),null;case 13:return L0(e,t,n);case 4:return Eu(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=br(t,null,r,n):Re(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ct(r,o),$0(e,t,r,o,n);case 7:return Re(e,t,t.pendingProps,n),t.child;case 8:return Re(e,t,t.pendingProps.children,n),t.child;case 12:return Re(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,s=o.value,J(is,r._currentValue),r._currentValue=s,i!==null)if(_t(i.value,s)){if(i.children===o.children&&!Ie.current){t=Jt(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var l=i.dependencies;if(l!==null){s=i.child;for(var a=l.firstContext;a!==null;){if(a.context===r){if(i.tag===1){a=qt(-1,n&-n),a.tag=2;var u=i.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?a.next=a:(a.next=c.next,c.next=a),u.pending=a}}i.lanes|=n,a=i.alternate,a!==null&&(a.lanes|=n),wu(i.return,n,t),l.lanes|=n;break}a=a.next}}else if(i.tag===10)s=i.type===t.type?null:i.child;else if(i.tag===18){if(s=i.return,s===null)throw Error(C(341));s.lanes|=n,l=s.alternate,l!==null&&(l.lanes|=n),wu(s,n,t),s=i.sibling}else s=i.child;if(s!==null)s.return=i;else for(s=i;s!==null;){if(s===t){s=null;break}if(i=s.sibling,i!==null){i.return=s.return,s=i;break}s=s.return}i=s}Re(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Nr(t,n),o=pt(o),r=r(o),t.flags|=1,Re(e,t,r,n),t.child;case 14:return r=t.type,o=Ct(r,t.pendingProps),o=Ct(r.type,o),T0(e,t,r,o,n);case 15:return P0(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ct(r,o),vs(e,t),t.tag=1,Fe(r)?(e=!0,es(t)):e=!1,Nr(t,n),Qp(t,r,o),_u(t,r,o,n),zu(null,t,r,!0,e,n);case 19:return F0(e,t,n);case 22:return M0(e,t,n)}throw Error(C(156,t.tag))};function lh(e,t){return zd(e,t)}function rw(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function gt(e,t,n,r){return new rw(e,t,n,r)}function ic(e){return e=e.prototype,!(!e||!e.isReactComponent)}function ow(e){if(typeof e=="function")return ic(e)?1:0;if(e!=null){if(e=e.$$typeof,e===fa)return 11;if(e===ha)return 14}return 2}function Pn(e,t){var n=e.alternate;return n===null?(n=gt(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ps(e,t,n,r,o,i){var s=2;if(r=e,typeof e=="function")ic(e)&&(s=1);else if(typeof e=="string")s=5;else e:switch(e){case hr:return rr(n.children,o,i,t);case ua:s=8,o|=8;break;case ca:return e=gt(12,n,t,o|2),e.elementType=ca,e.lanes=i,e;case da:return e=gt(13,n,t,o),e.elementType=da,e.lanes=i,e;case pa:return e=gt(19,n,t,o),e.elementType=pa,e.lanes=i,e;case md:return Ms(n,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case pd:s=10;break e;case hd:s=9;break e;case fa:s=11;break e;case ha:s=14;break e;case cn:s=16,r=null;break e}throw Error(C(130,e==null?e:typeof e,""))}return t=gt(s,n,t,o),t.elementType=e,t.type=r,t.lanes=i,t}function rr(e,t,n,r){return e=gt(7,e,r,t),e.lanes=n,e}function Ms(e,t,n,r){return e=gt(22,e,r,t),e.elementType=md,e.lanes=n,e.stateNode={isHidden:!1},e}function sc(e,t,n){return e=gt(6,e,null,t),e.lanes=n,e}function lc(e,t,n){return t=gt(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function iw(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Oa(0),this.expirationTimes=Oa(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Oa(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function ac(e,t,n,r,o,i,s,l,a){return e=new iw(e,t,n,l,a),t===1?(t=1,i===!0&&(t|=8)):t=0,i=gt(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Su(i),e}function sw(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:pr,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function ah(e){if(!e)return xn;e=e._reactInternals;e:{if(Wn(e)!==e||e.tag!==1)throw Error(C(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Fe(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(C(171))}if(e.tag===1){var n=e.type;if(Fe(n))return Lp(e,n,t)}return t}function uh(e,t,n,r,o,i,s,l,a){return e=ac(n,r,!0,e,o,i,s,l,a),e.context=ah(null),n=e.current,r=Ne(),o=$n(n),i=qt(r,o),i.callback=t??null,_n(n,i,o),e.current.lanes=o,po(e,o,r),je(e,r),e}function Rs(e,t,n,r){var o=t.current,i=Ne(),s=$n(o);return n=ah(n),t.context===null?t.context=n:t.pendingContext=n,t=qt(i,s),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=_n(o,t,s),e!==null&&(Tt(e,o,s,i),ls(e,o,s)),s}function Ns(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function ch(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function uc(e,t){ch(e,t),(e=e.alternate)&&ch(e,t)}function lw(){return null}var fh=typeof reportError=="function"?reportError:function(e){console.error(e)};function cc(e){this._internalRoot=e}bs.prototype.render=cc.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(C(409));Rs(e,t,null,null)},bs.prototype.unmount=cc.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;er(function(){Rs(null,e,null,null)}),t[Gt]=null}};function bs(e){this._internalRoot=e}bs.prototype.unstable_scheduleHydration=function(e){if(e){var t=Gd();e={blockedOn:null,target:e,priority:t};for(var n=0;n<mn.length&&t!==0&&t<mn[n].priority;n++);mn.splice(n,0,e),n===0&&Zd(e)}};function fc(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Os(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function dh(){}function aw(e,t,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var u=Ns(s);i.call(u)}}var s=uh(t,r,e,0,null,!1,!1,"",dh);return e._reactRootContainer=s,e[Gt]=s.current,$o(e.nodeType===8?e.parentNode:e),er(),s}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var l=r;r=function(){var u=Ns(a);l.call(u)}}var a=ac(e,0,!1,null,null,!1,!1,"",dh);return e._reactRootContainer=a,e[Gt]=a.current,$o(e.nodeType===8?e.parentNode:e),er(function(){Rs(t,a,n,r)}),a}function Ls(e,t,n,r,o){var i=n._reactRootContainer;if(i){var s=i;if(typeof o=="function"){var l=o;o=function(){var a=Ns(s);l.call(a)}}Rs(t,s,e,o)}else s=aw(n,t,e,o,r);return Ns(s)}Wd=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=fo(t.pendingLanes);n!==0&&(La(t,n|1),je(t,ce()),!(X&6)&&(Dr=ce()+500,Sn()))}break;case 13:er(function(){var r=Kt(e,1);if(r!==null){var o=Ne();Tt(r,e,1,o)}}),uc(e,1)}},Ia=function(e){if(e.tag===13){var t=Kt(e,134217728);if(t!==null){var n=Ne();Tt(t,e,134217728,n)}uc(e,134217728)}},Yd=function(e){if(e.tag===13){var t=$n(e),n=Kt(e,t);if(n!==null){var r=Ne();Tt(n,e,t,r)}uc(e,t)}},Gd=function(){return K},Xd=function(e,t){var n=K;try{return K=e,t()}finally{K=n}},Ta=function(e,t,n){switch(t){case"input":if(xa(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=qi(r);if(!o)throw Error(C(90));vd(r),xa(r,o)}}}break;case"textarea":_d(e,n);break;case"select":t=n.value,t!=null&&mr(e,!!n.multiple,t,!1)}},Nd=nc,bd=er;var uw={usingClientEntryPoint:!1,Events:[Mo,Cr,qi,Md,Rd,nc]},Vo={findFiberByHostInstance:Yn,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},cw={bundleType:Vo.bundleType,version:Vo.version,rendererPackageName:Vo.rendererPackageName,rendererConfig:Vo.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Yt.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Fd(e),e===null?null:e.stateNode},findFiberByHostInstance:Vo.findFiberByHostInstance||lw,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Is=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Is.isDisabled&&Is.supportsFiber)try{bi=Is.inject(cw),Nt=Is}catch{}}Ye.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=uw,Ye.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!fc(t))throw Error(C(200));return sw(e,t,null,n)},Ye.createRoot=function(e,t){if(!fc(e))throw Error(C(299));var n=!1,r="",o=fh;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=ac(e,1,!1,null,null,n,!1,r,o),e[Gt]=t.current,$o(e.nodeType===8?e.parentNode:e),new cc(t)},Ye.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(C(188)):(e=Object.keys(e).join(","),Error(C(268,e)));return e=Fd(t),e=e===null?null:e.stateNode,e},Ye.flushSync=function(e){return er(e)},Ye.hydrate=function(e,t,n){if(!Os(t))throw Error(C(200));return Ls(null,e,t,!0,n)},Ye.hydrateRoot=function(e,t,n){if(!fc(e))throw Error(C(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",s=fh;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(s=n.onRecoverableError)),t=uh(t,null,e,1,n??null,o,!1,i,s),e[Gt]=t.current,$o(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new bs(t)},Ye.render=function(e,t,n){if(!Os(t))throw Error(C(200));return Ls(null,e,t,!1,n)},Ye.unmountComponentAtNode=function(e){if(!Os(e))throw Error(C(40));return e._reactRootContainer?(er(function(){Ls(null,null,e,!1,function(){e._reactRootContainer=null,e[Gt]=null})}),!0):!1},Ye.unstable_batchedUpdates=nc,Ye.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Os(n))throw Error(C(200));if(e==null||e._reactInternals===void 0)throw Error(C(38));return Ls(e,t,n,!1,r)},Ye.version="18.2.0-next-9e3b772b8-20220608";function ph(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(ph)}catch(e){console.error(e)}}ph(),sd.exports=Ye;var dc=sd.exports,hh=dc;oa.createRoot=hh.createRoot,oa.hydrateRoot=hh.hydrateRoot;var mh={exports:{}};(function(e,t){(function(n,r){r(e)})(typeof globalThis<"u"?globalThis:typeof self<"u"?self:un,function(n){var r,o;if(!((o=(r=globalThis.chrome)==null?void 0:r.runtime)!=null&&o.id))throw new Error("This script should only be loaded in a browser extension.");if(typeof globalThis.browser>"u"||Object.getPrototypeOf(globalThis.browser)!==Object.prototype){const i="The message port closed before a response was received.",s=l=>{const a={alarms:{clear:{minArgs:0,maxArgs:1},clearAll:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getAll:{minArgs:0,maxArgs:0}},bookmarks:{create:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},getChildren:{minArgs:1,maxArgs:1},getRecent:{minArgs:1,maxArgs:1},getSubTree:{minArgs:1,maxArgs:1},getTree:{minArgs:0,maxArgs:0},move:{minArgs:2,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeTree:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}},browserAction:{disable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},enable:{minArgs:0,maxArgs:1,fallbackToNoCallback:!0},getBadgeBackgroundColor:{minArgs:1,maxArgs:1},getBadgeText:{minArgs:1,maxArgs:1},getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},openPopup:{minArgs:0,maxArgs:0},setBadgeBackgroundColor:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setBadgeText:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},browsingData:{remove:{minArgs:2,maxArgs:2},removeCache:{minArgs:1,maxArgs:1},removeCookies:{minArgs:1,maxArgs:1},removeDownloads:{minArgs:1,maxArgs:1},removeFormData:{minArgs:1,maxArgs:1},removeHistory:{minArgs:1,maxArgs:1},removeLocalStorage:{minArgs:1,maxArgs:1},removePasswords:{minArgs:1,maxArgs:1},removePluginData:{minArgs:1,maxArgs:1},settings:{minArgs:0,maxArgs:0}},commands:{getAll:{minArgs:0,maxArgs:0}},contextMenus:{remove:{minArgs:1,maxArgs:1},removeAll:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},cookies:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:1,maxArgs:1},getAllCookieStores:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},devtools:{inspectedWindow:{eval:{minArgs:1,maxArgs:2,singleCallbackArg:!1}},panels:{create:{minArgs:3,maxArgs:3,singleCallbackArg:!0},elements:{createSidebarPane:{minArgs:1,maxArgs:1}}}},downloads:{cancel:{minArgs:1,maxArgs:1},download:{minArgs:1,maxArgs:1},erase:{minArgs:1,maxArgs:1},getFileIcon:{minArgs:1,maxArgs:2},open:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},pause:{minArgs:1,maxArgs:1},removeFile:{minArgs:1,maxArgs:1},resume:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},extension:{isAllowedFileSchemeAccess:{minArgs:0,maxArgs:0},isAllowedIncognitoAccess:{minArgs:0,maxArgs:0}},history:{addUrl:{minArgs:1,maxArgs:1},deleteAll:{minArgs:0,maxArgs:0},deleteRange:{minArgs:1,maxArgs:1},deleteUrl:{minArgs:1,maxArgs:1},getVisits:{minArgs:1,maxArgs:1},search:{minArgs:1,maxArgs:1}},i18n:{detectLanguage:{minArgs:1,maxArgs:1},getAcceptLanguages:{minArgs:0,maxArgs:0}},identity:{launchWebAuthFlow:{minArgs:1,maxArgs:1}},idle:{queryState:{minArgs:1,maxArgs:1}},management:{get:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},getSelf:{minArgs:0,maxArgs:0},setEnabled:{minArgs:2,maxArgs:2},uninstallSelf:{minArgs:0,maxArgs:1}},notifications:{clear:{minArgs:1,maxArgs:1},create:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:0},getPermissionLevel:{minArgs:0,maxArgs:0},update:{minArgs:2,maxArgs:2}},pageAction:{getPopup:{minArgs:1,maxArgs:1},getTitle:{minArgs:1,maxArgs:1},hide:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setIcon:{minArgs:1,maxArgs:1},setPopup:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},setTitle:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0},show:{minArgs:1,maxArgs:1,fallbackToNoCallback:!0}},permissions:{contains:{minArgs:1,maxArgs:1},getAll:{minArgs:0,maxArgs:0},remove:{minArgs:1,maxArgs:1},request:{minArgs:1,maxArgs:1}},runtime:{getBackgroundPage:{minArgs:0,maxArgs:0},getPlatformInfo:{minArgs:0,maxArgs:0},openOptionsPage:{minArgs:0,maxArgs:0},requestUpdateCheck:{minArgs:0,maxArgs:0},sendMessage:{minArgs:1,maxArgs:3},sendNativeMessage:{minArgs:2,maxArgs:2},setUninstallURL:{minArgs:1,maxArgs:1}},sessions:{getDevices:{minArgs:0,maxArgs:1},getRecentlyClosed:{minArgs:0,maxArgs:1},restore:{minArgs:0,maxArgs:1}},storage:{local:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}},managed:{get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1}},sync:{clear:{minArgs:0,maxArgs:0},get:{minArgs:0,maxArgs:1},getBytesInUse:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}}},tabs:{captureVisibleTab:{minArgs:0,maxArgs:2},create:{minArgs:1,maxArgs:1},detectLanguage:{minArgs:0,maxArgs:1},discard:{minArgs:0,maxArgs:1},duplicate:{minArgs:1,maxArgs:1},executeScript:{minArgs:1,maxArgs:2},get:{minArgs:1,maxArgs:1},getCurrent:{minArgs:0,maxArgs:0},getZoom:{minArgs:0,maxArgs:1},getZoomSettings:{minArgs:0,maxArgs:1},goBack:{minArgs:0,maxArgs:1},goForward:{minArgs:0,maxArgs:1},highlight:{minArgs:1,maxArgs:1},insertCSS:{minArgs:1,maxArgs:2},move:{minArgs:2,maxArgs:2},query:{minArgs:1,maxArgs:1},reload:{minArgs:0,maxArgs:2},remove:{minArgs:1,maxArgs:1},removeCSS:{minArgs:1,maxArgs:2},sendMessage:{minArgs:2,maxArgs:3},setZoom:{minArgs:1,maxArgs:2},setZoomSettings:{minArgs:1,maxArgs:2},update:{minArgs:1,maxArgs:2}},topSites:{get:{minArgs:0,maxArgs:0}},webNavigation:{getAllFrames:{minArgs:1,maxArgs:1},getFrame:{minArgs:1,maxArgs:1}},webRequest:{handlerBehaviorChanged:{minArgs:0,maxArgs:0}},windows:{create:{minArgs:0,maxArgs:1},get:{minArgs:1,maxArgs:2},getAll:{minArgs:0,maxArgs:1},getCurrent:{minArgs:0,maxArgs:1},getLastFocused:{minArgs:0,maxArgs:1},remove:{minArgs:1,maxArgs:1},update:{minArgs:2,maxArgs:2}}};if(Object.keys(a).length===0)throw new Error("api-metadata.json has not been included in browser-polyfill");class u extends WeakMap{constructor(A,$=void 0){super($),this.createItem=A}get(A){return this.has(A)||this.set(A,this.createItem(A)),super.get(A)}}const c=k=>k&&typeof k=="object"&&typeof k.then=="function",f=(k,A)=>(...$)=>{l.runtime.lastError?k.reject(new Error(l.runtime.lastError.message)):A.singleCallbackArg||$.length<=1&&A.singleCallbackArg!==!1?k.resolve($[0]):k.resolve($)},d=k=>k==1?"argument":"arguments",m=(k,A)=>function(L,...j){if(j.length<A.minArgs)throw new Error(`Expected at least ${A.minArgs} ${d(A.minArgs)} for ${k}(), got ${j.length}`);if(j.length>A.maxArgs)throw new Error(`Expected at most ${A.maxArgs} ${d(A.maxArgs)} for ${k}(), got ${j.length}`);return new Promise((G,W)=>{if(A.fallbackToNoCallback)try{L[k](...j,f({resolve:G,reject:W},A))}catch(O){console.warn(`${k} API method doesn't seem to support the callback parameter, falling back to call it without a callback: `,O),L[k](...j),A.fallbackToNoCallback=!1,A.noCallback=!0,G()}else A.noCallback?(L[k](...j),G()):L[k](...j,f({resolve:G,reject:W},A))})},y=(k,A,$)=>new Proxy(A,{apply(L,j,G){return $.call(j,k,...G)}});let v=Function.call.bind(Object.prototype.hasOwnProperty);const x=(k,A={},$={})=>{let L=Object.create(null),j={has(W,O){return O in k||O in L},get(W,O,U){if(O in L)return L[O];if(!(O in k))return;let D=k[O];if(typeof D=="function")if(typeof A[O]=="function")D=y(k,k[O],A[O]);else if(v($,O)){let T=m(O,$[O]);D=y(k,k[O],T)}else D=D.bind(k);else if(typeof D=="object"&&D!==null&&(v(A,O)||v($,O)))D=x(D,A[O],$[O]);else if(v($,"*"))D=x(D,A[O],$["*"]);else return Object.defineProperty(L,O,{configurable:!0,enumerable:!0,get(){return k[O]},set(T){k[O]=T}}),D;return L[O]=D,D},set(W,O,U,D){return O in L?L[O]=U:k[O]=U,!0},defineProperty(W,O,U){return Reflect.defineProperty(L,O,U)},deleteProperty(W,O){return Reflect.deleteProperty(L,O)}},G=Object.create(k);return new Proxy(G,j)},h=k=>({addListener(A,$,...L){A.addListener(k.get($),...L)},hasListener(A,$){return A.hasListener(k.get($))},removeListener(A,$){A.removeListener(k.get($))}}),p=new u(k=>typeof k!="function"?k:function($){const L=x($,{},{getContent:{minArgs:0,maxArgs:0}});k(L)}),g=new u(k=>typeof k!="function"?k:function($,L,j){let G=!1,W,O=new Promise(I=>{W=function(F){G=!0,I(F)}}),U;try{U=k($,L,W)}catch(I){U=Promise.reject(I)}const D=U!==!0&&c(U);if(U!==!0&&!D&&!G)return!1;const T=I=>{I.then(F=>{j(F)},F=>{let q;F&&(F instanceof Error||typeof F.message=="string")?q=F.message:q="An unexpected error occurred",j({__mozWebExtensionPolyfillReject__:!0,message:q})}).catch(F=>{console.error("Failed to send onMessage rejected reply",F)})};return T(D?U:O),!0}),w=({reject:k,resolve:A},$)=>{l.runtime.lastError?l.runtime.lastError.message===i?A():k(new Error(l.runtime.lastError.message)):$&&$.__mozWebExtensionPolyfillReject__?k(new Error($.message)):A($)},S=(k,A,$,...L)=>{if(L.length<A.minArgs)throw new Error(`Expected at least ${A.minArgs} ${d(A.minArgs)} for ${k}(), got ${L.length}`);if(L.length>A.maxArgs)throw new Error(`Expected at most ${A.maxArgs} ${d(A.maxArgs)} for ${k}(), got ${L.length}`);return new Promise((j,G)=>{const W=w.bind(null,{resolve:j,reject:G});L.push(W),$.sendMessage(...L)})},E={devtools:{network:{onRequestFinished:h(p)}},runtime:{onMessage:h(g),onMessageExternal:h(g),sendMessage:S.bind(null,"sendMessage",{minArgs:1,maxArgs:3})},tabs:{sendMessage:S.bind(null,"sendMessage",{minArgs:2,maxArgs:3})}},_={clear:{minArgs:1,maxArgs:1},get:{minArgs:1,maxArgs:1},set:{minArgs:1,maxArgs:1}};return a.privacy={network:{"*":_},services:{"*":_},websites:{"*":_}},x(l,E,a)};n.exports=s(chrome)}else n.exports=globalThis.browser})})(mh);var fw=mh.exports;const gh=ql(fw);var pc=(e=>(e.Activated="activated",e.Deactivated="deactivated",e))(pc||{});function hc(...e){}const dw={manifest_version:3,name:"WhatFont",author:"chengyin.liu@gmail.com",description:"The easiest way to identify fonts on web pages.",homepage_url:"http://chengyinliu.com/whatfont.html",version:"3.2.0",background:{service_worker:"./background/background.js"},action:{default_icon:{19:"icons/icon19.png",38:"icons/icon38.png",76:"icons/icon76.png"}},permissions:["activeTab","scripting"],icons:{16:"icons/icon16.png",32:"icons/icon32.png",48:"icons/icon48.png",96:"icons/icon96.png",128:"icons/icon128.png",256:"icons/icon256.png"}};var jr={};/**
 * @license React
 * react-dom-server-legacy.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var yh=N;function B(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Be=Object.prototype.hasOwnProperty,pw=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,vh={},wh={};function xh(e){return Be.call(wh,e)?!0:Be.call(vh,e)?!1:pw.test(e)?wh[e]=!0:(vh[e]=!0,!1)}function be(e,t,n,r,o,i,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var ke={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ke[e]=new be(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ke[t]=new be(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ke[e]=new be(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ke[e]=new be(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ke[e]=new be(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){ke[e]=new be(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){ke[e]=new be(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){ke[e]=new be(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){ke[e]=new be(e,5,!1,e.toLowerCase(),null,!1,!1)});var mc=/[\-:]([a-z])/g;function gc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mc,gc);ke[t]=new be(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mc,gc);ke[t]=new be(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mc,gc);ke[t]=new be(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){ke[e]=new be(e,1,!1,e.toLowerCase(),null,!1,!1)}),ke.xlinkHref=new be("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){ke[e]=new be(e,1,!1,e.toLowerCase(),null,!0,!0)});var Fs={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},hw=["Webkit","ms","Moz","O"];Object.keys(Fs).forEach(function(e){hw.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Fs[t]=Fs[e]})});var mw=/["'&<>]/;function Oe(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=mw.exec(e);if(t){var n="",r,o=0;for(r=t.index;r<e.length;r++){switch(e.charCodeAt(r)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==r&&(n+=e.substring(o,r)),o=r+1,n+=t}e=o!==r?n+e.substring(o,r):n}return e}var gw=/([A-Z])/g,yw=/^ms-/,yc=Array.isArray;function tn(e,t){return{insertionMode:e,selectedValue:t}}function vw(e,t,n){switch(t){case"select":return tn(1,n.value!=null?n.value:n.defaultValue);case"svg":return tn(2,null);case"math":return tn(3,null);case"foreignObject":return tn(1,null);case"table":return tn(4,null);case"thead":case"tbody":case"tfoot":return tn(5,null);case"colgroup":return tn(7,null);case"tr":return tn(6,null)}return 4<=e.insertionMode||e.insertionMode===0?tn(1,null):e}var Sh=new Map;function kh(e,t,n){if(typeof n!="object")throw Error(B(62));t=!0;for(var r in n)if(Be.call(n,r)){var o=n[r];if(o!=null&&typeof o!="boolean"&&o!==""){if(r.indexOf("--")===0){var i=Oe(r);o=Oe((""+o).trim())}else{i=r;var s=Sh.get(i);s!==void 0||(s=Oe(i.replace(gw,"-$1").toLowerCase().replace(yw,"-ms-")),Sh.set(i,s)),i=s,o=typeof o=="number"?o===0||Be.call(Fs,r)?""+o:o+"px":Oe((""+o).trim())}t?(t=!1,e.push(' style="',i,":",o)):e.push(";",i,":",o)}}t||e.push('"')}function qe(e,t,n,r){switch(n){case"style":kh(e,t,r);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||n[0]!=="o"&&n[0]!=="O"||n[1]!=="n"&&n[1]!=="N"){if(t=ke.hasOwnProperty(n)?ke[n]:null,t!==null){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=t.attributeName,t.type){case 3:r&&e.push(" ",n,'=""');break;case 4:r===!0?e.push(" ",n,'=""'):r!==!1&&e.push(" ",n,'="',Oe(r),'"');break;case 5:isNaN(r)||e.push(" ",n,'="',Oe(r),'"');break;case 6:!isNaN(r)&&1<=r&&e.push(" ",n,'="',Oe(r),'"');break;default:t.sanitizeURL&&(r=""+r),e.push(" ",n,'="',Oe(r),'"')}}else if(xh(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(t=n.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(" ",n,'="',Oe(r),'"')}}}function Ds(e,t,n){if(t!=null){if(n!=null)throw Error(B(60));if(typeof t!="object"||!("__html"in t))throw Error(B(61));t=t.__html,t!=null&&e.push(""+t)}}function ww(e){var t="";return yh.Children.forEach(e,function(n){n!=null&&(t+=n)}),t}function vc(e,t,n,r){e.push(Ft(n));var o=n=null,i;for(i in t)if(Be.call(t,i)){var s=t[i];if(s!=null)switch(i){case"children":n=s;break;case"dangerouslySetInnerHTML":o=s;break;default:qe(e,r,i,s)}}return e.push(">"),Ds(e,o,n),typeof n=="string"?(e.push(Oe(n)),null):n}var xw=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,_h=new Map;function Ft(e){var t=_h.get(e);if(t===void 0){if(!xw.test(e))throw Error(B(65,e));t="<"+e,_h.set(e,t)}return t}function Sw(e,t,n,r,o){switch(t){case"select":e.push(Ft("select"));var i=null,s=null;for(c in n)if(Be.call(n,c)){var l=n[c];if(l!=null)switch(c){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"defaultValue":case"value":break;default:qe(e,r,c,l)}}return e.push(">"),Ds(e,s,i),i;case"option":s=o.selectedValue,e.push(Ft("option"));var a=l=null,u=null,c=null;for(i in n)if(Be.call(n,i)){var f=n[i];if(f!=null)switch(i){case"children":l=f;break;case"selected":u=f;break;case"dangerouslySetInnerHTML":c=f;break;case"value":a=f;default:qe(e,r,i,f)}}if(s!=null)if(n=a!==null?""+a:ww(l),yc(s)){for(r=0;r<s.length;r++)if(""+s[r]===n){e.push(' selected=""');break}}else""+s===n&&e.push(' selected=""');else u&&e.push(' selected=""');return e.push(">"),Ds(e,c,l),l;case"textarea":e.push(Ft("textarea")),c=s=i=null;for(l in n)if(Be.call(n,l)&&(a=n[l],a!=null))switch(l){case"children":c=a;break;case"value":i=a;break;case"defaultValue":s=a;break;case"dangerouslySetInnerHTML":throw Error(B(91));default:qe(e,r,l,a)}if(i===null&&s!==null&&(i=s),e.push(">"),c!=null){if(i!=null)throw Error(B(92));if(yc(c)&&1<c.length)throw Error(B(93));i=""+c}return typeof i=="string"&&i[0]===`
`&&e.push(`
`),i!==null&&e.push(Oe(""+i)),null;case"input":e.push(Ft("input")),a=c=l=i=null;for(s in n)if(Be.call(n,s)&&(u=n[s],u!=null))switch(s){case"children":case"dangerouslySetInnerHTML":throw Error(B(399,"input"));case"defaultChecked":a=u;break;case"defaultValue":l=u;break;case"checked":c=u;break;case"value":i=u;break;default:qe(e,r,s,u)}return c!==null?qe(e,r,"checked",c):a!==null&&qe(e,r,"checked",a),i!==null?qe(e,r,"value",i):l!==null&&qe(e,r,"value",l),e.push("/>"),null;case"menuitem":e.push(Ft("menuitem"));for(var d in n)if(Be.call(n,d)&&(i=n[d],i!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(B(400));default:qe(e,r,d,i)}return e.push(">"),null;case"title":e.push(Ft("title")),i=null;for(f in n)if(Be.call(n,f)&&(s=n[f],s!=null))switch(f){case"children":i=s;break;case"dangerouslySetInnerHTML":throw Error(B(434));default:qe(e,r,f,s)}return e.push(">"),i;case"listing":case"pre":e.push(Ft(t)),s=i=null;for(a in n)if(Be.call(n,a)&&(l=n[a],l!=null))switch(a){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;default:qe(e,r,a,l)}if(e.push(">"),s!=null){if(i!=null)throw Error(B(60));if(typeof s!="object"||!("__html"in s))throw Error(B(61));n=s.__html,n!=null&&(typeof n=="string"&&0<n.length&&n[0]===`
`?e.push(`
`,n):e.push(""+n))}return typeof i=="string"&&i[0]===`
`&&e.push(`
`),i;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(Ft(t));for(var m in n)if(Be.call(n,m)&&(i=n[m],i!=null))switch(m){case"children":case"dangerouslySetInnerHTML":throw Error(B(399,t));default:qe(e,r,m,i)}return e.push("/>"),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return vc(e,n,t,r);case"html":return o.insertionMode===0&&e.push("<!DOCTYPE html>"),vc(e,n,t,r);default:if(t.indexOf("-")===-1&&typeof n.is!="string")return vc(e,n,t,r);e.push(Ft(t)),s=i=null;for(u in n)if(Be.call(n,u)&&(l=n[u],l!=null))switch(u){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"style":kh(e,r,l);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:xh(u)&&typeof l!="function"&&typeof l!="symbol"&&e.push(" ",u,'="',Oe(l),'"')}return e.push(">"),Ds(e,s,i),i}}function Eh(e,t,n){if(e.push('<!--$?--><template id="'),n===null)throw Error(B(395));return e.push(n),e.push('"></template>')}function kw(e,t,n,r){switch(n.insertionMode){case 0:case 1:return e.push('<div hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 2:return e.push('<svg aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 3:return e.push('<math aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 4:return e.push('<table hidden id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 5:return e.push('<table hidden><tbody id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 6:return e.push('<table hidden><tr id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');case 7:return e.push('<table hidden><colgroup id="'),e.push(t.segmentPrefix),t=r.toString(16),e.push(t),e.push('">');default:throw Error(B(397))}}function _w(e,t){switch(t.insertionMode){case 0:case 1:return e.push("</div>");case 2:return e.push("</svg>");case 3:return e.push("</math>");case 4:return e.push("</table>");case 5:return e.push("</tbody></table>");case 6:return e.push("</tr></table>");case 7:return e.push("</colgroup></table>");default:throw Error(B(397))}}var Ew=/[<\u2028\u2029]/g;function wc(e){return JSON.stringify(e).replace(Ew,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}function Cw(e,t){return t=t===void 0?"":t,{bootstrapChunks:[],startInlineScript:"<script>",placeholderPrefix:t+"P:",segmentPrefix:t+"S:",boundaryPrefix:t+"B:",idPrefix:t,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1,generateStaticMarkup:e}}function Ch(e,t,n,r){return n.generateStaticMarkup?(e.push(Oe(t)),!1):(t===""?e=r:(r&&e.push("<!-- -->"),e.push(Oe(t)),e=!0),e)}var Wo=Object.assign,Aw=Symbol.for("react.element"),Ah=Symbol.for("react.portal"),$h=Symbol.for("react.fragment"),Th=Symbol.for("react.strict_mode"),Ph=Symbol.for("react.profiler"),Mh=Symbol.for("react.provider"),Rh=Symbol.for("react.context"),Nh=Symbol.for("react.forward_ref"),bh=Symbol.for("react.suspense"),Oh=Symbol.for("react.suspense_list"),Lh=Symbol.for("react.memo"),xc=Symbol.for("react.lazy"),$w=Symbol.for("react.scope"),Tw=Symbol.for("react.debug_trace_mode"),Pw=Symbol.for("react.legacy_hidden"),Mw=Symbol.for("react.default_value"),Ih=Symbol.iterator;function Sc(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case $h:return"Fragment";case Ah:return"Portal";case Ph:return"Profiler";case Th:return"StrictMode";case bh:return"Suspense";case Oh:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Rh:return(e.displayName||"Context")+".Consumer";case Mh:return(e._context.displayName||"Context")+".Provider";case Nh:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Lh:return t=e.displayName||null,t!==null?t:Sc(e.type)||"Memo";case xc:t=e._payload,e=e._init;try{return Sc(e(t))}catch{}}return null}var Fh={};function Dh(e,t){if(e=e.contextTypes,!e)return Fh;var n={},r;for(r in e)n[r]=t[r];return n}var or=null;function zs(e,t){if(e!==t){e.context._currentValue2=e.parentValue,e=e.parent;var n=t.parent;if(e===null){if(n!==null)throw Error(B(401))}else{if(n===null)throw Error(B(401));zs(e,n)}t.context._currentValue2=t.value}}function zh(e){e.context._currentValue2=e.parentValue,e=e.parent,e!==null&&zh(e)}function jh(e){var t=e.parent;t!==null&&jh(t),e.context._currentValue2=e.value}function Bh(e,t){if(e.context._currentValue2=e.parentValue,e=e.parent,e===null)throw Error(B(402));e.depth===t.depth?zs(e,t):Bh(e,t)}function Uh(e,t){var n=t.parent;if(n===null)throw Error(B(402));e.depth===n.depth?zs(e,n):Uh(e,n),t.context._currentValue2=t.value}function js(e){var t=or;t!==e&&(t===null?jh(e):e===null?zh(t):t.depth===e.depth?zs(t,e):t.depth>e.depth?Bh(t,e):Uh(t,e),or=e)}var Hh={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function Vh(e,t,n,r){var o=e.state!==void 0?e.state:null;e.updater=Hh,e.props=n,e.state=o;var i={queue:[],replace:!1};e._reactInternals=i;var s=t.contextType;if(e.context=typeof s=="object"&&s!==null?s._currentValue2:r,s=t.getDerivedStateFromProps,typeof s=="function"&&(s=s(n,o),o=s==null?o:Wo({},o,s),e.state=o),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&Hh.enqueueReplaceState(e,e.state,null),i.queue!==null&&0<i.queue.length)if(t=i.queue,s=i.replace,i.queue=null,i.replace=!1,s&&t.length===1)e.state=t[0];else{for(i=s?t[0]:e.state,o=!0,s=s?1:0;s<t.length;s++){var l=t[s];l=typeof l=="function"?l.call(e,i,n,r):l,l!=null&&(o?(o=!1,i=Wo({},i,l)):Wo(i,l))}e.state=i}else i.queue=null}var Rw={id:1,overflow:""};function kc(e,t,n){var r=e.id;e=e.overflow;var o=32-Bs(r)-1;r&=~(1<<o),n+=1;var i=32-Bs(t)+o;if(30<i){var s=o-o%5;return i=(r&(1<<s)-1).toString(32),r>>=s,o-=s,{id:1<<32-Bs(t)+o|n<<o|r,overflow:i+e}}return{id:1<<i|n<<o|r,overflow:e}}var Bs=Math.clz32?Math.clz32:Ow,Nw=Math.log,bw=Math.LN2;function Ow(e){return e>>>=0,e===0?32:31-(Nw(e)/bw|0)|0}function Lw(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Iw=typeof Object.is=="function"?Object.is:Lw,nn=null,_c=null,Us=null,ee=null,Yo=!1,Hs=!1,Go=0,Mn=null,Vs=0;function ir(){if(nn===null)throw Error(B(321));return nn}function Wh(){if(0<Vs)throw Error(B(312));return{memoizedState:null,queue:null,next:null}}function Ec(){return ee===null?Us===null?(Yo=!1,Us=ee=Wh()):(Yo=!0,ee=Us):ee.next===null?(Yo=!1,ee=ee.next=Wh()):(Yo=!0,ee=ee.next),ee}function Cc(){_c=nn=null,Hs=!1,Us=null,Vs=0,ee=Mn=null}function Yh(e,t){return typeof t=="function"?t(e):t}function Gh(e,t,n){if(nn=ir(),ee=Ec(),Yo){var r=ee.queue;if(t=r.dispatch,Mn!==null&&(n=Mn.get(r),n!==void 0)){Mn.delete(r),r=ee.memoizedState;do r=e(r,n.action),n=n.next;while(n!==null);return ee.memoizedState=r,[r,t]}return[ee.memoizedState,t]}return e=e===Yh?typeof t=="function"?t():t:n!==void 0?n(t):t,ee.memoizedState=e,e=ee.queue={last:null,dispatch:null},e=e.dispatch=Fw.bind(null,nn,e),[ee.memoizedState,e]}function Xh(e,t){if(nn=ir(),ee=Ec(),t=t===void 0?null:t,ee!==null){var n=ee.memoizedState;if(n!==null&&t!==null){var r=n[1];e:if(r===null)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!Iw(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),ee.memoizedState=[e,t],e}function Fw(e,t,n){if(25<=Vs)throw Error(B(301));if(e===nn)if(Hs=!0,e={action:n,next:null},Mn===null&&(Mn=new Map),n=Mn.get(t),n===void 0)Mn.set(t,e);else{for(t=n;t.next!==null;)t=t.next;t.next=e}}function Dw(){throw Error(B(394))}function Ws(){}var Qh={readContext:function(e){return e._currentValue2},useContext:function(e){return ir(),e._currentValue2},useMemo:Xh,useReducer:Gh,useRef:function(e){nn=ir(),ee=Ec();var t=ee.memoizedState;return t===null?(e={current:e},ee.memoizedState=e):t},useState:function(e){return Gh(Yh,e)},useInsertionEffect:Ws,useLayoutEffect:function(){},useCallback:function(e,t){return Xh(function(){return e},t)},useImperativeHandle:Ws,useEffect:Ws,useDebugValue:Ws,useDeferredValue:function(e){return ir(),e},useTransition:function(){return ir(),[!1,Dw]},useId:function(){var e=_c.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-Bs(e)-1)).toString(32)+t;var n=Ys;if(n===null)throw Error(B(404));return t=Go++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return ir(),t(e._source)},useSyncExternalStore:function(e,t,n){if(n===void 0)throw Error(B(407));return n()}},Ys=null,Ac=yh.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function zw(e){return console.error(e),null}function Xo(){}function jw(e,t,n,r,o,i,s,l,a){var u=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:r===void 0?12800:r,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:u,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:o===void 0?zw:o,onAllReady:i===void 0?Xo:i,onShellReady:s===void 0?Xo:s,onShellError:l===void 0?Xo:l,onFatalError:a===void 0?Xo:a},n=Gs(t,0,null,n,!1,!1),n.parentFlushed=!0,e=$c(t,e,null,n,c,Fh,null,Rw),u.push(e),t}function $c(e,t,n,r,o,i,s,l){e.allPendingTasks++,n===null?e.pendingRootTasks++:n.pendingTasks++;var a={node:t,ping:function(){var u=e.pingedTasks;u.push(a),u.length===1&&nm(e)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:i,context:s,treeContext:l};return o.add(a),a}function Gs(e,t,n,r,o,i){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:i}}function Qo(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function Xs(e,t){var n=e.onShellError;n(t),n=e.onFatalError,n(t),e.destination!==null?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function Zh(e,t,n,r,o){for(nn={},_c=t,Go=0,e=n(r,o);Hs;)Hs=!1,Go=0,Vs+=1,ee=null,e=n(r,o);return Cc(),e}function Kh(e,t,n,r){var o=n.render(),i=r.childContextTypes;if(i!=null){var s=t.legacyContext;if(typeof n.getChildContext!="function")r=s;else{n=n.getChildContext();for(var l in n)if(!(l in i))throw Error(B(108,Sc(r)||"Unknown",l));r=Wo({},s,n)}t.legacyContext=r,Je(e,t,o),t.legacyContext=s}else Je(e,t,o)}function qh(e,t){if(e&&e.defaultProps){t=Wo({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function Tc(e,t,n,r,o){if(typeof n=="function")if(n.prototype&&n.prototype.isReactComponent){o=Dh(n,t.legacyContext);var i=n.contextType;i=new n(r,typeof i=="object"&&i!==null?i._currentValue2:o),Vh(i,n,r,o),Kh(e,t,i,n)}else{i=Dh(n,t.legacyContext),o=Zh(e,t,n,r,i);var s=Go!==0;if(typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0)Vh(o,n,r,i),Kh(e,t,o,n);else if(s){r=t.treeContext,t.treeContext=kc(r,1,0);try{Je(e,t,o)}finally{t.treeContext=r}}else Je(e,t,o)}else if(typeof n=="string"){switch(o=t.blockedSegment,i=Sw(o.chunks,n,r,e.responseState,o.formatContext),o.lastPushedText=!1,s=o.formatContext,o.formatContext=vw(s,n,r),Pc(e,t,i),o.formatContext=s,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:o.chunks.push("</",n,">")}o.lastPushedText=!1}else{switch(n){case Pw:case Tw:case Th:case Ph:case $h:Je(e,t,r.children);return;case Oh:Je(e,t,r.children);return;case $w:throw Error(B(343));case bh:e:{n=t.blockedBoundary,o=t.blockedSegment,i=r.fallback,r=r.children,s=new Set;var l={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:s,errorDigest:null},a=Gs(e,o.chunks.length,l,o.formatContext,!1,!1);o.children.push(a),o.lastPushedText=!1;var u=Gs(e,0,null,o.formatContext,!1,!1);u.parentFlushed=!0,t.blockedBoundary=l,t.blockedSegment=u;try{if(Pc(e,t,r),e.responseState.generateStaticMarkup||u.lastPushedText&&u.textEmbedded&&u.chunks.push("<!-- -->"),u.status=1,Qs(l,u),l.pendingTasks===0)break e}catch(c){u.status=4,l.forceClientRender=!0,l.errorDigest=Qo(e,c)}finally{t.blockedBoundary=n,t.blockedSegment=o}t=$c(e,i,n,a,s,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof n=="object"&&n!==null)switch(n.$$typeof){case Nh:if(r=Zh(e,t,n.render,r,o),Go!==0){n=t.treeContext,t.treeContext=kc(n,1,0);try{Je(e,t,r)}finally{t.treeContext=n}}else Je(e,t,r);return;case Lh:n=n.type,r=qh(n,r),Tc(e,t,n,r,o);return;case Mh:if(o=r.children,n=n._context,r=r.value,i=n._currentValue2,n._currentValue2=r,s=or,or=r={parent:s,depth:s===null?0:s.depth+1,context:n,parentValue:i,value:r},t.context=r,Je(e,t,o),e=or,e===null)throw Error(B(403));r=e.parentValue,e.context._currentValue2=r===Mw?e.context._defaultValue:r,e=or=e.parent,t.context=e;return;case Rh:r=r.children,r=r(n._currentValue2),Je(e,t,r);return;case xc:o=n._init,n=o(n._payload),r=qh(n,r),Tc(e,t,n,r,void 0);return}throw Error(B(130,n==null?n:typeof n,""))}}function Je(e,t,n){if(t.node=n,typeof n=="object"&&n!==null){switch(n.$$typeof){case Aw:Tc(e,t,n.type,n.props,n.ref);return;case Ah:throw Error(B(257));case xc:var r=n._init;n=r(n._payload),Je(e,t,n);return}if(yc(n)){Jh(e,t,n);return}if(n===null||typeof n!="object"?r=null:(r=Ih&&n[Ih]||n["@@iterator"],r=typeof r=="function"?r:null),r&&(r=r.call(n))){if(n=r.next(),!n.done){var o=[];do o.push(n.value),n=r.next();while(!n.done);Jh(e,t,o)}return}throw e=Object.prototype.toString.call(n),Error(B(31,e==="[object Object]"?"object with keys {"+Object.keys(n).join(", ")+"}":e))}typeof n=="string"?(r=t.blockedSegment,r.lastPushedText=Ch(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText)):typeof n=="number"&&(r=t.blockedSegment,r.lastPushedText=Ch(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function Jh(e,t,n){for(var r=n.length,o=0;o<r;o++){var i=t.treeContext;t.treeContext=kc(i,r,o);try{Pc(e,t,n[o])}finally{t.treeContext=i}}}function Pc(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,i=t.context;try{return Je(e,t,n)}catch(a){if(Cc(),typeof a=="object"&&a!==null&&typeof a.then=="function"){n=a;var s=t.blockedSegment,l=Gs(e,s.chunks.length,null,s.formatContext,s.lastPushedText,!0);s.children.push(l),s.lastPushedText=!1,e=$c(e,t.node,t.blockedBoundary,l,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=i,js(i)}else throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=i,js(i),a}}function Bw(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,tm(this,t,e)}function em(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,r===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.push(null))):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,e=n===void 0?Error(B(432)):n,r.errorDigest=t.onError(e),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach(function(o){return em(o,t,n)}),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(r=t.onAllReady,r()))}function Qs(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,n.status===1&&Qs(e,n)}else e.completedSegments.push(t)}function tm(e,t,n){if(t===null){if(n.parentFlushed){if(e.completedRootSegment!==null)throw Error(B(389));e.completedRootSegment=n}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=Xo,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(n.parentFlushed&&n.status===1&&Qs(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Bw,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&n.status===1&&(Qs(t,n),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function nm(e){if(e.status!==2){var t=or,n=Ac.current;Ac.current=Qh;var r=Ys;Ys=e.responseState;try{var o=e.pingedTasks,i;for(i=0;i<o.length;i++){var s=o[i],l=e,a=s.blockedSegment;if(a.status===0){js(s.context);try{Je(l,s,s.node),l.responseState.generateStaticMarkup||a.lastPushedText&&a.textEmbedded&&a.chunks.push("<!-- -->"),s.abortSet.delete(s),a.status=1,tm(l,s.blockedBoundary,a)}catch(y){if(Cc(),typeof y=="object"&&y!==null&&typeof y.then=="function"){var u=s.ping;y.then(u,u)}else{s.abortSet.delete(s),a.status=4;var c=s.blockedBoundary,f=y,d=Qo(l,f);if(c===null?Xs(l,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&l.clientRenderedBoundaries.push(c))),l.allPendingTasks--,l.allPendingTasks===0){var m=l.onAllReady;m()}}}finally{}}}o.splice(0,i),e.destination!==null&&Mc(e,e.destination)}catch(y){Qo(e,y),Xs(e,y)}finally{Ys=r,Ac.current=n,n===Qh&&js(t)}}}function Zs(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,t.push('<template id="'),t.push(e.placeholderPrefix),e=r.toString(16),t.push(e),t.push('"></template>');case 1:n.status=2;var o=!0;r=n.chunks;var i=0;n=n.children;for(var s=0;s<n.length;s++){for(o=n[s];i<o.index;i++)t.push(r[i]);o=Ks(e,t,o)}for(;i<r.length-1;i++)t.push(r[i]);return i<r.length&&(o=t.push(r[i])),o;default:throw Error(B(390))}}function Ks(e,t,n){var r=n.boundary;if(r===null)return Zs(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)return e.responseState.generateStaticMarkup||(r=r.errorDigest,t.push("<!--$!-->"),t.push("<template"),r&&(t.push(' data-dgst="'),r=Oe(r),t.push(r),t.push('"')),t.push("></template>")),Zs(e,t,n),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e;if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var o=e.responseState,i=o.nextSuspenseID++;return o=o.boundaryPrefix+i.toString(16),r=r.id=o,Eh(t,e.responseState,r),Zs(e,t,n),t.push("<!--/$-->")}if(r.byteSize>e.progressiveChunkSize)return r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),Eh(t,e.responseState,r.id),Zs(e,t,n),t.push("<!--/$-->");if(e.responseState.generateStaticMarkup||t.push("<!--$-->"),n=r.completedSegments,n.length!==1)throw Error(B(391));return Ks(e,t,n[0]),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e}function rm(e,t,n){return kw(t,e.responseState,n.formatContext,n.id),Ks(e,t,n),_w(t,n.formatContext)}function om(e,t,n){for(var r=n.completedSegments,o=0;o<r.length;o++)im(e,t,n,r[o]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,t.push(e.startInlineScript),e.sentCompleteBoundaryFunction?t.push('$RC("'):(e.sentCompleteBoundaryFunction=!0,t.push('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("')),r===null)throw Error(B(395));return n=n.toString(16),t.push(r),t.push('","'),t.push(e.segmentPrefix),t.push(n),t.push('")<\/script>')}function im(e,t,n,r){if(r.status===2)return!0;var o=r.id;if(o===-1){if((r.id=n.rootSegmentID)===-1)throw Error(B(392));return rm(e,t,r)}return rm(e,t,r),e=e.responseState,t.push(e.startInlineScript),e.sentCompleteSegmentFunction?t.push('$RS("'):(e.sentCompleteSegmentFunction=!0,t.push('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("')),t.push(e.segmentPrefix),o=o.toString(16),t.push(o),t.push('","'),t.push(e.placeholderPrefix),t.push(o),t.push('")<\/script>')}function Mc(e,t){try{var n=e.completedRootSegment;if(n!==null&&e.pendingRootTasks===0){Ks(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)t.push(r[n]);n<r.length&&t.push(r[n])}var o=e.clientRenderedBoundaries,i;for(i=0;i<o.length;i++){var s=o[i];r=t;var l=e.responseState,a=s.id,u=s.errorDigest,c=s.errorMessage,f=s.errorComponentStack;if(r.push(l.startInlineScript),l.sentClientRenderFunction?r.push('$RX("'):(l.sentClientRenderFunction=!0,r.push('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("')),a===null)throw Error(B(395));if(r.push(a),r.push('"'),u||c||f){r.push(",");var d=wc(u||"");r.push(d)}if(c||f){r.push(",");var m=wc(c||"");r.push(m)}if(f){r.push(",");var y=wc(f);r.push(y)}if(!r.push(")<\/script>")){e.destination=null,i++,o.splice(0,i);return}}o.splice(0,i);var v=e.completedBoundaries;for(i=0;i<v.length;i++)if(!om(e,t,v[i])){e.destination=null,i++,v.splice(0,i);return}v.splice(0,i);var x=e.partialBoundaries;for(i=0;i<x.length;i++){var h=x[i];e:{o=e,s=t;var p=h.completedSegments;for(l=0;l<p.length;l++)if(!im(o,s,h,p[l])){l++,p.splice(0,l);var g=!1;break e}p.splice(0,l),g=!0}if(!g){e.destination=null,i++,x.splice(0,i);return}}x.splice(0,i);var w=e.completedBoundaries;for(i=0;i<w.length;i++)if(!om(e,t,w[i])){e.destination=null,i++,w.splice(0,i);return}w.splice(0,i)}finally{e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.push(null)}}function Uw(e,t){try{var n=e.abortableTasks;n.forEach(function(r){return em(r,e,t)}),n.clear(),e.destination!==null&&Mc(e,e.destination)}catch(r){Qo(e,r),Xs(e,r)}}function Hw(){}function sm(e,t,n,r){var o=!1,i=null,s="",l={push:function(u){return u!==null&&(s+=u),!0},destroy:function(u){o=!0,i=u}},a=!1;if(e=jw(e,Cw(n,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,Hw,void 0,function(){a=!0},void 0,void 0),nm(e),Uw(e,r),e.status===1)e.status=2,l.destroy(e.fatalError);else if(e.status!==2&&e.destination===null){e.destination=l;try{Mc(e,l)}catch(u){Qo(e,u),Xs(e,u)}}if(o)throw i;if(!a)throw Error(B(426));return s}jr.renderToNodeStream=function(){throw Error(B(207))},jr.renderToStaticMarkup=function(e,t){return sm(e,t,!0,'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')},jr.renderToStaticNodeStream=function(){throw Error(B(208))},jr.renderToString=function(e,t){return sm(e,t,!1,'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')},jr.version="18.2.0";var Rc={};/**
 * @license React
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var lm=N;function H(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var et=null,tt=0;function b(e,t){if(t.length!==0)if(512<t.length)0<tt&&(e.enqueue(new Uint8Array(et.buffer,0,tt)),et=new Uint8Array(512),tt=0),e.enqueue(t);else{var n=et.length-tt;n<t.length&&(n===0?e.enqueue(et):(et.set(t.subarray(0,n),tt),e.enqueue(et),t=t.subarray(n)),et=new Uint8Array(512),tt=0),et.set(t,tt),tt+=t.length}}function oe(e,t){return b(e,t),!0}function am(e){et&&0<tt&&(e.enqueue(new Uint8Array(et.buffer,0,tt)),et=null,tt=0)}var um=new TextEncoder;function V(e){return um.encode(e)}function P(e){return um.encode(e)}function cm(e,t){typeof e.error=="function"?e.error(t):e.close()}var Ue=Object.prototype.hasOwnProperty,Vw=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,fm={},dm={};function pm(e){return Ue.call(dm,e)?!0:Ue.call(fm,e)?!1:Vw.test(e)?dm[e]=!0:(fm[e]=!0,!1)}function Le(e,t,n,r,o,i,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var _e={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){_e[e]=new Le(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];_e[t]=new Le(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){_e[e]=new Le(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){_e[e]=new Le(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){_e[e]=new Le(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){_e[e]=new Le(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){_e[e]=new Le(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){_e[e]=new Le(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){_e[e]=new Le(e,5,!1,e.toLowerCase(),null,!1,!1)});var Nc=/[\-:]([a-z])/g;function bc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Nc,bc);_e[t]=new Le(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Nc,bc);_e[t]=new Le(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Nc,bc);_e[t]=new Le(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){_e[e]=new Le(e,1,!1,e.toLowerCase(),null,!1,!1)}),_e.xlinkHref=new Le("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){_e[e]=new Le(e,1,!1,e.toLowerCase(),null,!0,!0)});var qs={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ww=["Webkit","ms","Moz","O"];Object.keys(qs).forEach(function(e){Ww.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),qs[t]=qs[e]})});var Yw=/["'&<>]/;function Ee(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=Yw.exec(e);if(t){var n="",r,o=0;for(r=t.index;r<e.length;r++){switch(e.charCodeAt(r)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==r&&(n+=e.substring(o,r)),o=r+1,n+=t}e=o!==r?n+e.substring(o,r):n}return e}var Gw=/([A-Z])/g,Xw=/^ms-/,Oc=Array.isArray,Qw=P("<script>"),Zw=P("<\/script>"),Kw=P('<script src="'),qw=P('<script type="module" src="'),hm=P('" async=""><\/script>'),Jw=/(<\/|<)(s)(cript)/gi;function e5(e,t,n,r){return""+t+(n==="s"?"\\u0073":"\\u0053")+r}function t5(e,t,n,r,o){e=e===void 0?"":e,t=t===void 0?Qw:P('<script nonce="'+Ee(t)+'">');var i=[];if(n!==void 0&&i.push(t,V((""+n).replace(Jw,e5)),Zw),r!==void 0)for(n=0;n<r.length;n++)i.push(Kw,V(Ee(r[n])),hm);if(o!==void 0)for(r=0;r<o.length;r++)i.push(qw,V(Ee(o[r])),hm);return{bootstrapChunks:i,startInlineScript:t,placeholderPrefix:P(e+"P:"),segmentPrefix:P(e+"S:"),boundaryPrefix:e+"B:",idPrefix:e,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1}}function Dt(e,t){return{insertionMode:e,selectedValue:t}}function n5(e){return Dt(e==="http://www.w3.org/2000/svg"?2:e==="http://www.w3.org/1998/Math/MathML"?3:0,null)}function r5(e,t,n){switch(t){case"select":return Dt(1,n.value!=null?n.value:n.defaultValue);case"svg":return Dt(2,null);case"math":return Dt(3,null);case"foreignObject":return Dt(1,null);case"table":return Dt(4,null);case"thead":case"tbody":case"tfoot":return Dt(5,null);case"colgroup":return Dt(7,null);case"tr":return Dt(6,null)}return 4<=e.insertionMode||e.insertionMode===0?Dt(1,null):e}var Lc=P("<!-- -->");function mm(e,t,n,r){return t===""?r:(r&&e.push(Lc),e.push(V(Ee(t))),!0)}var gm=new Map,o5=P(' style="'),ym=P(":"),i5=P(";");function vm(e,t,n){if(typeof n!="object")throw Error(H(62));t=!0;for(var r in n)if(Ue.call(n,r)){var o=n[r];if(o!=null&&typeof o!="boolean"&&o!==""){if(r.indexOf("--")===0){var i=V(Ee(r));o=V(Ee((""+o).trim()))}else{i=r;var s=gm.get(i);s!==void 0||(s=P(Ee(i.replace(Gw,"-$1").toLowerCase().replace(Xw,"-ms-"))),gm.set(i,s)),i=s,o=typeof o=="number"?o===0||Ue.call(qs,r)?V(""+o):V(o+"px"):V(Ee((""+o).trim()))}t?(t=!1,e.push(o5,i,ym,o)):e.push(i5,i,ym,o)}}t||e.push(sr)}var Rn=P(" "),Br=P('="'),sr=P('"'),wm=P('=""');function nt(e,t,n,r){switch(n){case"style":vm(e,t,r);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<n.length)||n[0]!=="o"&&n[0]!=="O"||n[1]!=="n"&&n[1]!=="N"){if(t=_e.hasOwnProperty(n)?_e[n]:null,t!==null){switch(typeof r){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(n=V(t.attributeName),t.type){case 3:r&&e.push(Rn,n,wm);break;case 4:r===!0?e.push(Rn,n,wm):r!==!1&&e.push(Rn,n,Br,V(Ee(r)),sr);break;case 5:isNaN(r)||e.push(Rn,n,Br,V(Ee(r)),sr);break;case 6:!isNaN(r)&&1<=r&&e.push(Rn,n,Br,V(Ee(r)),sr);break;default:t.sanitizeURL&&(r=""+r),e.push(Rn,n,Br,V(Ee(r)),sr)}}else if(pm(n)){switch(typeof r){case"function":case"symbol":return;case"boolean":if(t=n.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(Rn,V(n),Br,V(Ee(r)),sr)}}}var Nn=P(">"),xm=P("/>");function Js(e,t,n){if(t!=null){if(n!=null)throw Error(H(60));if(typeof t!="object"||!("__html"in t))throw Error(H(61));t=t.__html,t!=null&&e.push(V(""+t))}}function s5(e){var t="";return lm.Children.forEach(e,function(n){n!=null&&(t+=n)}),t}var Ic=P(' selected=""');function Fc(e,t,n,r){e.push(zt(n));var o=n=null,i;for(i in t)if(Ue.call(t,i)){var s=t[i];if(s!=null)switch(i){case"children":n=s;break;case"dangerouslySetInnerHTML":o=s;break;default:nt(e,r,i,s)}}return e.push(Nn),Js(e,o,n),typeof n=="string"?(e.push(V(Ee(n))),null):n}var Dc=P(`
`),l5=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,Sm=new Map;function zt(e){var t=Sm.get(e);if(t===void 0){if(!l5.test(e))throw Error(H(65,e));t=P("<"+e),Sm.set(e,t)}return t}var a5=P("<!DOCTYPE html>");function u5(e,t,n,r,o){switch(t){case"select":e.push(zt("select"));var i=null,s=null;for(c in n)if(Ue.call(n,c)){var l=n[c];if(l!=null)switch(c){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"defaultValue":case"value":break;default:nt(e,r,c,l)}}return e.push(Nn),Js(e,s,i),i;case"option":s=o.selectedValue,e.push(zt("option"));var a=l=null,u=null,c=null;for(i in n)if(Ue.call(n,i)){var f=n[i];if(f!=null)switch(i){case"children":l=f;break;case"selected":u=f;break;case"dangerouslySetInnerHTML":c=f;break;case"value":a=f;default:nt(e,r,i,f)}}if(s!=null)if(n=a!==null?""+a:s5(l),Oc(s)){for(r=0;r<s.length;r++)if(""+s[r]===n){e.push(Ic);break}}else""+s===n&&e.push(Ic);else u&&e.push(Ic);return e.push(Nn),Js(e,c,l),l;case"textarea":e.push(zt("textarea")),c=s=i=null;for(l in n)if(Ue.call(n,l)&&(a=n[l],a!=null))switch(l){case"children":c=a;break;case"value":i=a;break;case"defaultValue":s=a;break;case"dangerouslySetInnerHTML":throw Error(H(91));default:nt(e,r,l,a)}if(i===null&&s!==null&&(i=s),e.push(Nn),c!=null){if(i!=null)throw Error(H(92));if(Oc(c)&&1<c.length)throw Error(H(93));i=""+c}return typeof i=="string"&&i[0]===`
`&&e.push(Dc),i!==null&&e.push(V(Ee(""+i))),null;case"input":e.push(zt("input")),a=c=l=i=null;for(s in n)if(Ue.call(n,s)&&(u=n[s],u!=null))switch(s){case"children":case"dangerouslySetInnerHTML":throw Error(H(399,"input"));case"defaultChecked":a=u;break;case"defaultValue":l=u;break;case"checked":c=u;break;case"value":i=u;break;default:nt(e,r,s,u)}return c!==null?nt(e,r,"checked",c):a!==null&&nt(e,r,"checked",a),i!==null?nt(e,r,"value",i):l!==null&&nt(e,r,"value",l),e.push(xm),null;case"menuitem":e.push(zt("menuitem"));for(var d in n)if(Ue.call(n,d)&&(i=n[d],i!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(H(400));default:nt(e,r,d,i)}return e.push(Nn),null;case"title":e.push(zt("title")),i=null;for(f in n)if(Ue.call(n,f)&&(s=n[f],s!=null))switch(f){case"children":i=s;break;case"dangerouslySetInnerHTML":throw Error(H(434));default:nt(e,r,f,s)}return e.push(Nn),i;case"listing":case"pre":e.push(zt(t)),s=i=null;for(a in n)if(Ue.call(n,a)&&(l=n[a],l!=null))switch(a){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;default:nt(e,r,a,l)}if(e.push(Nn),s!=null){if(i!=null)throw Error(H(60));if(typeof s!="object"||!("__html"in s))throw Error(H(61));n=s.__html,n!=null&&(typeof n=="string"&&0<n.length&&n[0]===`
`?e.push(Dc,V(n)):e.push(V(""+n)))}return typeof i=="string"&&i[0]===`
`&&e.push(Dc),i;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(zt(t));for(var m in n)if(Ue.call(n,m)&&(i=n[m],i!=null))switch(m){case"children":case"dangerouslySetInnerHTML":throw Error(H(399,t));default:nt(e,r,m,i)}return e.push(xm),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return Fc(e,n,t,r);case"html":return o.insertionMode===0&&e.push(a5),Fc(e,n,t,r);default:if(t.indexOf("-")===-1&&typeof n.is!="string")return Fc(e,n,t,r);e.push(zt(t)),s=i=null;for(u in n)if(Ue.call(n,u)&&(l=n[u],l!=null))switch(u){case"children":i=l;break;case"dangerouslySetInnerHTML":s=l;break;case"style":vm(e,r,l);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:pm(u)&&typeof l!="function"&&typeof l!="symbol"&&e.push(Rn,V(u),Br,V(Ee(l)),sr)}return e.push(Nn),Js(e,s,i),i}}var c5=P("</"),f5=P(">"),d5=P('<template id="'),p5=P('"></template>'),h5=P("<!--$-->"),m5=P('<!--$?--><template id="'),g5=P('"></template>'),y5=P("<!--$!-->"),v5=P("<!--/$-->"),w5=P("<template"),x5=P('"'),S5=P(' data-dgst="');P(' data-msg="'),P(' data-stck="');var k5=P("></template>");function km(e,t,n){if(b(e,m5),n===null)throw Error(H(395));return b(e,n),oe(e,g5)}var _5=P('<div hidden id="'),E5=P('">'),C5=P("</div>"),A5=P('<svg aria-hidden="true" style="display:none" id="'),$5=P('">'),T5=P("</svg>"),P5=P('<math aria-hidden="true" style="display:none" id="'),M5=P('">'),R5=P("</math>"),N5=P('<table hidden id="'),b5=P('">'),O5=P("</table>"),L5=P('<table hidden><tbody id="'),I5=P('">'),F5=P("</tbody></table>"),D5=P('<table hidden><tr id="'),z5=P('">'),j5=P("</tr></table>"),B5=P('<table hidden><colgroup id="'),U5=P('">'),H5=P("</colgroup></table>");function V5(e,t,n,r){switch(n.insertionMode){case 0:case 1:return b(e,_5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,E5);case 2:return b(e,A5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,$5);case 3:return b(e,P5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,M5);case 4:return b(e,N5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,b5);case 5:return b(e,L5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,I5);case 6:return b(e,D5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,z5);case 7:return b(e,B5),b(e,t.segmentPrefix),b(e,V(r.toString(16))),oe(e,U5);default:throw Error(H(397))}}function W5(e,t){switch(t.insertionMode){case 0:case 1:return oe(e,C5);case 2:return oe(e,T5);case 3:return oe(e,R5);case 4:return oe(e,O5);case 5:return oe(e,F5);case 6:return oe(e,j5);case 7:return oe(e,H5);default:throw Error(H(397))}}var Y5=P('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'),G5=P('$RS("'),X5=P('","'),Q5=P('")<\/script>'),Z5=P('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'),K5=P('$RC("'),q5=P('","'),J5=P('")<\/script>'),ex=P('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'),tx=P('$RX("'),nx=P('"'),rx=P(")<\/script>"),zc=P(","),ox=/[<\u2028\u2029]/g;function jc(e){return JSON.stringify(e).replace(ox,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}var Zo=Object.assign,ix=Symbol.for("react.element"),_m=Symbol.for("react.portal"),Em=Symbol.for("react.fragment"),Cm=Symbol.for("react.strict_mode"),Am=Symbol.for("react.profiler"),$m=Symbol.for("react.provider"),Tm=Symbol.for("react.context"),Pm=Symbol.for("react.forward_ref"),Mm=Symbol.for("react.suspense"),Rm=Symbol.for("react.suspense_list"),Nm=Symbol.for("react.memo"),Bc=Symbol.for("react.lazy"),sx=Symbol.for("react.scope"),lx=Symbol.for("react.debug_trace_mode"),ax=Symbol.for("react.legacy_hidden"),ux=Symbol.for("react.default_value"),bm=Symbol.iterator;function Uc(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Em:return"Fragment";case _m:return"Portal";case Am:return"Profiler";case Cm:return"StrictMode";case Mm:return"Suspense";case Rm:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Tm:return(e.displayName||"Context")+".Consumer";case $m:return(e._context.displayName||"Context")+".Provider";case Pm:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Nm:return t=e.displayName||null,t!==null?t:Uc(e.type)||"Memo";case Bc:t=e._payload,e=e._init;try{return Uc(e(t))}catch{}}return null}var Om={};function Lm(e,t){if(e=e.contextTypes,!e)return Om;var n={},r;for(r in e)n[r]=t[r];return n}var lr=null;function el(e,t){if(e!==t){e.context._currentValue=e.parentValue,e=e.parent;var n=t.parent;if(e===null){if(n!==null)throw Error(H(401))}else{if(n===null)throw Error(H(401));el(e,n)}t.context._currentValue=t.value}}function Im(e){e.context._currentValue=e.parentValue,e=e.parent,e!==null&&Im(e)}function Fm(e){var t=e.parent;t!==null&&Fm(t),e.context._currentValue=e.value}function Dm(e,t){if(e.context._currentValue=e.parentValue,e=e.parent,e===null)throw Error(H(402));e.depth===t.depth?el(e,t):Dm(e,t)}function zm(e,t){var n=t.parent;if(n===null)throw Error(H(402));e.depth===n.depth?el(e,n):zm(e,n),t.context._currentValue=t.value}function tl(e){var t=lr;t!==e&&(t===null?Fm(e):e===null?Im(t):t.depth===e.depth?el(t,e):t.depth>e.depth?Dm(t,e):zm(t,e),lr=e)}var jm={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function Bm(e,t,n,r){var o=e.state!==void 0?e.state:null;e.updater=jm,e.props=n,e.state=o;var i={queue:[],replace:!1};e._reactInternals=i;var s=t.contextType;if(e.context=typeof s=="object"&&s!==null?s._currentValue:r,s=t.getDerivedStateFromProps,typeof s=="function"&&(s=s(n,o),o=s==null?o:Zo({},o,s),e.state=o),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&jm.enqueueReplaceState(e,e.state,null),i.queue!==null&&0<i.queue.length)if(t=i.queue,s=i.replace,i.queue=null,i.replace=!1,s&&t.length===1)e.state=t[0];else{for(i=s?t[0]:e.state,o=!0,s=s?1:0;s<t.length;s++){var l=t[s];l=typeof l=="function"?l.call(e,i,n,r):l,l!=null&&(o?(o=!1,i=Zo({},i,l)):Zo(i,l))}e.state=i}else i.queue=null}var cx={id:1,overflow:""};function Hc(e,t,n){var r=e.id;e=e.overflow;var o=32-nl(r)-1;r&=~(1<<o),n+=1;var i=32-nl(t)+o;if(30<i){var s=o-o%5;return i=(r&(1<<s)-1).toString(32),r>>=s,o-=s,{id:1<<32-nl(t)+o|n<<o|r,overflow:i+e}}return{id:1<<i|n<<o|r,overflow:e}}var nl=Math.clz32?Math.clz32:px,fx=Math.log,dx=Math.LN2;function px(e){return e>>>=0,e===0?32:31-(fx(e)/dx|0)|0}function hx(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var mx=typeof Object.is=="function"?Object.is:hx,rn=null,Vc=null,rl=null,te=null,Ko=!1,ol=!1,qo=0,bn=null,il=0;function ar(){if(rn===null)throw Error(H(321));return rn}function Um(){if(0<il)throw Error(H(312));return{memoizedState:null,queue:null,next:null}}function Wc(){return te===null?rl===null?(Ko=!1,rl=te=Um()):(Ko=!0,te=rl):te.next===null?(Ko=!1,te=te.next=Um()):(Ko=!0,te=te.next),te}function Yc(){Vc=rn=null,ol=!1,rl=null,il=0,te=bn=null}function Hm(e,t){return typeof t=="function"?t(e):t}function Vm(e,t,n){if(rn=ar(),te=Wc(),Ko){var r=te.queue;if(t=r.dispatch,bn!==null&&(n=bn.get(r),n!==void 0)){bn.delete(r),r=te.memoizedState;do r=e(r,n.action),n=n.next;while(n!==null);return te.memoizedState=r,[r,t]}return[te.memoizedState,t]}return e=e===Hm?typeof t=="function"?t():t:n!==void 0?n(t):t,te.memoizedState=e,e=te.queue={last:null,dispatch:null},e=e.dispatch=gx.bind(null,rn,e),[te.memoizedState,e]}function Wm(e,t){if(rn=ar(),te=Wc(),t=t===void 0?null:t,te!==null){var n=te.memoizedState;if(n!==null&&t!==null){var r=n[1];e:if(r===null)r=!1;else{for(var o=0;o<r.length&&o<t.length;o++)if(!mx(t[o],r[o])){r=!1;break e}r=!0}if(r)return n[0]}}return e=e(),te.memoizedState=[e,t],e}function gx(e,t,n){if(25<=il)throw Error(H(301));if(e===rn)if(ol=!0,e={action:n,next:null},bn===null&&(bn=new Map),n=bn.get(t),n===void 0)bn.set(t,e);else{for(t=n;t.next!==null;)t=t.next;t.next=e}}function yx(){throw Error(H(394))}function sl(){}var Ym={readContext:function(e){return e._currentValue},useContext:function(e){return ar(),e._currentValue},useMemo:Wm,useReducer:Vm,useRef:function(e){rn=ar(),te=Wc();var t=te.memoizedState;return t===null?(e={current:e},te.memoizedState=e):t},useState:function(e){return Vm(Hm,e)},useInsertionEffect:sl,useLayoutEffect:function(){},useCallback:function(e,t){return Wm(function(){return e},t)},useImperativeHandle:sl,useEffect:sl,useDebugValue:sl,useDeferredValue:function(e){return ar(),e},useTransition:function(){return ar(),[!1,yx]},useId:function(){var e=Vc.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-nl(e)-1)).toString(32)+t;var n=ll;if(n===null)throw Error(H(404));return t=qo++,e=":"+n.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return ar(),t(e._source)},useSyncExternalStore:function(e,t,n){if(n===void 0)throw Error(H(407));return n()}},ll=null,Gc=lm.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function vx(e){return console.error(e),null}function Jo(){}function wx(e,t,n,r,o,i,s,l,a){var u=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:r===void 0?12800:r,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:u,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:o===void 0?vx:o,onAllReady:i===void 0?Jo:i,onShellReady:s===void 0?Jo:s,onShellError:l===void 0?Jo:l,onFatalError:a===void 0?Jo:a},n=al(t,0,null,n,!1,!1),n.parentFlushed=!0,e=Xc(t,e,null,n,c,Om,null,cx),u.push(e),t}function Xc(e,t,n,r,o,i,s,l){e.allPendingTasks++,n===null?e.pendingRootTasks++:n.pendingTasks++;var a={node:t,ping:function(){var u=e.pingedTasks;u.push(a),u.length===1&&Jm(e)},blockedBoundary:n,blockedSegment:r,abortSet:o,legacyContext:i,context:s,treeContext:l};return o.add(a),a}function al(e,t,n,r,o,i){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:r,boundary:n,lastPushedText:o,textEmbedded:i}}function ei(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function ul(e,t){var n=e.onShellError;n(t),n=e.onFatalError,n(t),e.destination!==null?(e.status=2,cm(e.destination,t)):(e.status=1,e.fatalError=t)}function Gm(e,t,n,r,o){for(rn={},Vc=t,qo=0,e=n(r,o);ol;)ol=!1,qo=0,il+=1,te=null,e=n(r,o);return Yc(),e}function Xm(e,t,n,r){var o=n.render(),i=r.childContextTypes;if(i!=null){var s=t.legacyContext;if(typeof n.getChildContext!="function")r=s;else{n=n.getChildContext();for(var l in n)if(!(l in i))throw Error(H(108,Uc(r)||"Unknown",l));r=Zo({},s,n)}t.legacyContext=r,rt(e,t,o),t.legacyContext=s}else rt(e,t,o)}function Qm(e,t){if(e&&e.defaultProps){t=Zo({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}function Qc(e,t,n,r,o){if(typeof n=="function")if(n.prototype&&n.prototype.isReactComponent){o=Lm(n,t.legacyContext);var i=n.contextType;i=new n(r,typeof i=="object"&&i!==null?i._currentValue:o),Bm(i,n,r,o),Xm(e,t,i,n)}else{i=Lm(n,t.legacyContext),o=Gm(e,t,n,r,i);var s=qo!==0;if(typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0)Bm(o,n,r,i),Xm(e,t,o,n);else if(s){r=t.treeContext,t.treeContext=Hc(r,1,0);try{rt(e,t,o)}finally{t.treeContext=r}}else rt(e,t,o)}else if(typeof n=="string"){switch(o=t.blockedSegment,i=u5(o.chunks,n,r,e.responseState,o.formatContext),o.lastPushedText=!1,s=o.formatContext,o.formatContext=r5(s,n,r),Zc(e,t,i),o.formatContext=s,n){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:o.chunks.push(c5,V(n),f5)}o.lastPushedText=!1}else{switch(n){case ax:case lx:case Cm:case Am:case Em:rt(e,t,r.children);return;case Rm:rt(e,t,r.children);return;case sx:throw Error(H(343));case Mm:e:{n=t.blockedBoundary,o=t.blockedSegment,i=r.fallback,r=r.children,s=new Set;var l={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:s,errorDigest:null},a=al(e,o.chunks.length,l,o.formatContext,!1,!1);o.children.push(a),o.lastPushedText=!1;var u=al(e,0,null,o.formatContext,!1,!1);u.parentFlushed=!0,t.blockedBoundary=l,t.blockedSegment=u;try{if(Zc(e,t,r),u.lastPushedText&&u.textEmbedded&&u.chunks.push(Lc),u.status=1,cl(l,u),l.pendingTasks===0)break e}catch(c){u.status=4,l.forceClientRender=!0,l.errorDigest=ei(e,c)}finally{t.blockedBoundary=n,t.blockedSegment=o}t=Xc(e,i,n,a,s,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof n=="object"&&n!==null)switch(n.$$typeof){case Pm:if(r=Gm(e,t,n.render,r,o),qo!==0){n=t.treeContext,t.treeContext=Hc(n,1,0);try{rt(e,t,r)}finally{t.treeContext=n}}else rt(e,t,r);return;case Nm:n=n.type,r=Qm(n,r),Qc(e,t,n,r,o);return;case $m:if(o=r.children,n=n._context,r=r.value,i=n._currentValue,n._currentValue=r,s=lr,lr=r={parent:s,depth:s===null?0:s.depth+1,context:n,parentValue:i,value:r},t.context=r,rt(e,t,o),e=lr,e===null)throw Error(H(403));r=e.parentValue,e.context._currentValue=r===ux?e.context._defaultValue:r,e=lr=e.parent,t.context=e;return;case Tm:r=r.children,r=r(n._currentValue),rt(e,t,r);return;case Bc:o=n._init,n=o(n._payload),r=Qm(n,r),Qc(e,t,n,r,void 0);return}throw Error(H(130,n==null?n:typeof n,""))}}function rt(e,t,n){if(t.node=n,typeof n=="object"&&n!==null){switch(n.$$typeof){case ix:Qc(e,t,n.type,n.props,n.ref);return;case _m:throw Error(H(257));case Bc:var r=n._init;n=r(n._payload),rt(e,t,n);return}if(Oc(n)){Zm(e,t,n);return}if(n===null||typeof n!="object"?r=null:(r=bm&&n[bm]||n["@@iterator"],r=typeof r=="function"?r:null),r&&(r=r.call(n))){if(n=r.next(),!n.done){var o=[];do o.push(n.value),n=r.next();while(!n.done);Zm(e,t,o)}return}throw e=Object.prototype.toString.call(n),Error(H(31,e==="[object Object]"?"object with keys {"+Object.keys(n).join(", ")+"}":e))}typeof n=="string"?(r=t.blockedSegment,r.lastPushedText=mm(t.blockedSegment.chunks,n,e.responseState,r.lastPushedText)):typeof n=="number"&&(r=t.blockedSegment,r.lastPushedText=mm(t.blockedSegment.chunks,""+n,e.responseState,r.lastPushedText))}function Zm(e,t,n){for(var r=n.length,o=0;o<r;o++){var i=t.treeContext;t.treeContext=Hc(i,r,o);try{Zc(e,t,n[o])}finally{t.treeContext=i}}}function Zc(e,t,n){var r=t.blockedSegment.formatContext,o=t.legacyContext,i=t.context;try{return rt(e,t,n)}catch(a){if(Yc(),typeof a=="object"&&a!==null&&typeof a.then=="function"){n=a;var s=t.blockedSegment,l=al(e,s.chunks.length,null,s.formatContext,s.lastPushedText,!0);s.children.push(l),s.lastPushedText=!1,e=Xc(e,t.node,t.blockedBoundary,l,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,n.then(e,e),t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=i,tl(i)}else throw t.blockedSegment.formatContext=r,t.legacyContext=o,t.context=i,tl(i),a}}function xx(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,qm(this,t,e)}function Km(e,t,n){var r=e.blockedBoundary;e.blockedSegment.status=3,r===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.close())):(r.pendingTasks--,r.forceClientRender||(r.forceClientRender=!0,e=n===void 0?Error(H(432)):n,r.errorDigest=t.onError(e),r.parentFlushed&&t.clientRenderedBoundaries.push(r)),r.fallbackAbortableTasks.forEach(function(o){return Km(o,t,n)}),r.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(r=t.onAllReady,r()))}function cl(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var n=t.children[0];n.id=t.id,n.parentFlushed=!0,n.status===1&&cl(e,n)}else e.completedSegments.push(t)}function qm(e,t,n){if(t===null){if(n.parentFlushed){if(e.completedRootSegment!==null)throw Error(H(389));e.completedRootSegment=n}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=Jo,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(n.parentFlushed&&n.status===1&&cl(t,n),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(xx,e),t.fallbackAbortableTasks.clear()):n.parentFlushed&&n.status===1&&(cl(t,n),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function Jm(e){if(e.status!==2){var t=lr,n=Gc.current;Gc.current=Ym;var r=ll;ll=e.responseState;try{var o=e.pingedTasks,i;for(i=0;i<o.length;i++){var s=o[i],l=e,a=s.blockedSegment;if(a.status===0){tl(s.context);try{rt(l,s,s.node),a.lastPushedText&&a.textEmbedded&&a.chunks.push(Lc),s.abortSet.delete(s),a.status=1,qm(l,s.blockedBoundary,a)}catch(y){if(Yc(),typeof y=="object"&&y!==null&&typeof y.then=="function"){var u=s.ping;y.then(u,u)}else{s.abortSet.delete(s),a.status=4;var c=s.blockedBoundary,f=y,d=ei(l,f);if(c===null?ul(l,f):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&l.clientRenderedBoundaries.push(c))),l.allPendingTasks--,l.allPendingTasks===0){var m=l.onAllReady;m()}}}finally{}}}o.splice(0,i),e.destination!==null&&Kc(e,e.destination)}catch(y){ei(e,y),ul(e,y)}finally{ll=r,Gc.current=n,n===Ym&&tl(t)}}}function fl(e,t,n){switch(n.parentFlushed=!0,n.status){case 0:var r=n.id=e.nextSegmentId++;return n.lastPushedText=!1,n.textEmbedded=!1,e=e.responseState,b(t,d5),b(t,e.placeholderPrefix),e=V(r.toString(16)),b(t,e),oe(t,p5);case 1:n.status=2;var o=!0;r=n.chunks;var i=0;n=n.children;for(var s=0;s<n.length;s++){for(o=n[s];i<o.index;i++)b(t,r[i]);o=dl(e,t,o)}for(;i<r.length-1;i++)b(t,r[i]);return i<r.length&&(o=oe(t,r[i])),o;default:throw Error(H(390))}}function dl(e,t,n){var r=n.boundary;if(r===null)return fl(e,t,n);if(r.parentFlushed=!0,r.forceClientRender)r=r.errorDigest,oe(t,y5),b(t,w5),r&&(b(t,S5),b(t,V(Ee(r))),b(t,x5)),oe(t,k5),fl(e,t,n);else if(0<r.pendingTasks){r.rootSegmentID=e.nextSegmentId++,0<r.completedSegments.length&&e.partialBoundaries.push(r);var o=e.responseState,i=o.nextSuspenseID++;o=P(o.boundaryPrefix+i.toString(16)),r=r.id=o,km(t,e.responseState,r),fl(e,t,n)}else if(r.byteSize>e.progressiveChunkSize)r.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(r),km(t,e.responseState,r.id),fl(e,t,n);else{if(oe(t,h5),n=r.completedSegments,n.length!==1)throw Error(H(391));dl(e,t,n[0])}return oe(t,v5)}function eg(e,t,n){return V5(t,e.responseState,n.formatContext,n.id),dl(e,t,n),W5(t,n.formatContext)}function tg(e,t,n){for(var r=n.completedSegments,o=0;o<r.length;o++)ng(e,t,n,r[o]);if(r.length=0,e=e.responseState,r=n.id,n=n.rootSegmentID,b(t,e.startInlineScript),e.sentCompleteBoundaryFunction?b(t,K5):(e.sentCompleteBoundaryFunction=!0,b(t,Z5)),r===null)throw Error(H(395));return n=V(n.toString(16)),b(t,r),b(t,q5),b(t,e.segmentPrefix),b(t,n),oe(t,J5)}function ng(e,t,n,r){if(r.status===2)return!0;var o=r.id;if(o===-1){if((r.id=n.rootSegmentID)===-1)throw Error(H(392));return eg(e,t,r)}return eg(e,t,r),e=e.responseState,b(t,e.startInlineScript),e.sentCompleteSegmentFunction?b(t,G5):(e.sentCompleteSegmentFunction=!0,b(t,Y5)),b(t,e.segmentPrefix),o=V(o.toString(16)),b(t,o),b(t,X5),b(t,e.placeholderPrefix),b(t,o),oe(t,Q5)}function Kc(e,t){et=new Uint8Array(512),tt=0;try{var n=e.completedRootSegment;if(n!==null&&e.pendingRootTasks===0){dl(e,t,n),e.completedRootSegment=null;var r=e.responseState.bootstrapChunks;for(n=0;n<r.length-1;n++)b(t,r[n]);n<r.length&&oe(t,r[n])}var o=e.clientRenderedBoundaries,i;for(i=0;i<o.length;i++){var s=o[i];r=t;var l=e.responseState,a=s.id,u=s.errorDigest,c=s.errorMessage,f=s.errorComponentStack;if(b(r,l.startInlineScript),l.sentClientRenderFunction?b(r,tx):(l.sentClientRenderFunction=!0,b(r,ex)),a===null)throw Error(H(395));b(r,a),b(r,nx),(u||c||f)&&(b(r,zc),b(r,V(jc(u||"")))),(c||f)&&(b(r,zc),b(r,V(jc(c||"")))),f&&(b(r,zc),b(r,V(jc(f)))),oe(r,rx)}o.splice(0,i);var d=e.completedBoundaries;for(i=0;i<d.length;i++)tg(e,t,d[i]);d.splice(0,i),am(t),et=new Uint8Array(512),tt=0;var m=e.partialBoundaries;for(i=0;i<m.length;i++){var y=m[i];e:{o=e,s=t;var v=y.completedSegments;for(l=0;l<v.length;l++)if(!ng(o,s,y,v[l])){l++,v.splice(0,l);var x=!1;break e}v.splice(0,l),x=!0}if(!x){e.destination=null,i++,m.splice(0,i);return}}m.splice(0,i);var h=e.completedBoundaries;for(i=0;i<h.length;i++)tg(e,t,h[i]);h.splice(0,i)}finally{am(t),e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.close()}}function rg(e,t){try{var n=e.abortableTasks;n.forEach(function(r){return Km(r,e,t)}),n.clear(),e.destination!==null&&Kc(e,e.destination)}catch(r){ei(e,r),ul(e,r)}}Rc.renderToReadableStream=function(e,t){return new Promise(function(n,r){var o,i,s=new Promise(function(c,f){i=c,o=f}),l=wx(e,t5(t?t.identifierPrefix:void 0,t?t.nonce:void 0,t?t.bootstrapScriptContent:void 0,t?t.bootstrapScripts:void 0,t?t.bootstrapModules:void 0),n5(t?t.namespaceURI:void 0),t?t.progressiveChunkSize:void 0,t?t.onError:void 0,i,function(){var c=new ReadableStream({type:"bytes",pull:function(f){if(l.status===1)l.status=2,cm(f,l.fatalError);else if(l.status!==2&&l.destination===null){l.destination=f;try{Kc(l,f)}catch(d){ei(l,d),ul(l,d)}}},cancel:function(){rg(l)}},{highWaterMark:0});c.allReady=s,n(c)},function(c){s.catch(function(){}),r(c)},o);if(t&&t.signal){var a=t.signal,u=function(){rg(l,a.reason),a.removeEventListener("abort",u)};a.addEventListener("abort",u)}Jm(l)})},Rc.version="18.2.0";var Ur,og;Ur=jr,og=Rc,Ur.version;var Sx=Ur.renderToString;Ur.renderToStaticMarkup,Ur.renderToNodeStream,Ur.renderToStaticNodeStream,og.renderToReadableStream;var ig={exports:{}},kx="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",_x=kx,Ex=_x;function sg(){}function lg(){}lg.resetWarningCache=sg;var Cx=function(){function e(r,o,i,s,l,a){if(a!==Ex){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}e.isRequired=e;function t(){return e}var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:lg,resetWarningCache:sg};return n.PropTypes=n,n};ig.exports=Cx();var Ax=ig.exports;const Pt=ql(Ax);var $x=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function ag(e,t){return e(t={exports:{}},t.exports),t.exports}var Tx=ag(function(e){(function(t){var n=function(x,h,p){if(!a(h)||c(h)||f(h)||d(h)||l(h))return h;var g,w=0,S=0;if(u(h))for(g=[],S=h.length;w<S;w++)g.push(n(x,h[w],p));else for(var E in g={},h)Object.prototype.hasOwnProperty.call(h,E)&&(g[x(E,p)]=n(x,h[E],p));return g},r=function(x){return m(x)?x:(x=x.replace(/[\-_\s]+(.)?/g,function(h,p){return p?p.toUpperCase():""})).substr(0,1).toLowerCase()+x.substr(1)},o=function(x){var h=r(x);return h.substr(0,1).toUpperCase()+h.substr(1)},i=function(x,h){return function(p,g){var w=(g=g||{}).separator||"_",S=g.split||/(?=[A-Z])/;return p.split(S).join(w)}(x,h).toLowerCase()},s=Object.prototype.toString,l=function(x){return typeof x=="function"},a=function(x){return x===Object(x)},u=function(x){return s.call(x)=="[object Array]"},c=function(x){return s.call(x)=="[object Date]"},f=function(x){return s.call(x)=="[object RegExp]"},d=function(x){return s.call(x)=="[object Boolean]"},m=function(x){return(x-=0)==x},y=function(x,h){var p=h&&"process"in h?h.process:h;return typeof p!="function"?x:function(g,w){return p(g,x,w)}},v={camelize:r,decamelize:i,pascalize:o,depascalize:i,camelizeKeys:function(x,h){return n(y(r,h),x)},decamelizeKeys:function(x,h){return n(y(i,h),x,h)},pascalizeKeys:function(x,h){return n(y(o,h),x)},depascalizeKeys:function(){return this.decamelizeKeys.apply(this,arguments)}};e.exports?e.exports=v:t.humps=v})($x)}).decamelize,Px=function(e){if(Array.isArray(e))return e},Mx=function(e,t){if(typeof Symbol<"u"&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var s,l=e[Symbol.iterator]();!(r=(s=l.next()).done)&&(n.push(s.value),!t||n.length!==t);r=!0);}catch(a){o=!0,i=a}finally{try{r||l.return==null||l.return()}finally{if(o)throw i}}return n}},ug=function(e,t){(t==null||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r},Rx=function(e,t){if(e){if(typeof e=="string")return ug(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return n==="Object"&&e.constructor&&(n=e.constructor.name),n==="Map"||n==="Set"?Array.from(e):n==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ug(e,t):void 0}},Nx=function(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)},bx=function(e,t){return Px(e)||Mx(e,t)||Rx(e,t)||Nx()},cg=ag(function(e){function t(){return e.exports=t=Object.assign||function(n){for(var r=1;r<arguments.length;r++){var o=arguments[r];for(var i in o)Object.prototype.hasOwnProperty.call(o,i)&&(n[i]=o[i])}return n},t.apply(this,arguments)}e.exports=t}),Ox=function(e,t){if(e==null)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o},fg=function(e,t){if(e==null)return{};var n,r,o=Ox(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o},Lx=N.createContext(null);function qc(e){var t=e.children,n=fg(e,["children"]);return typeof t!="string"&&(t=Sx(t)),Vt.createElement("template",cg({},n,{dangerouslySetInnerHTML:{__html:t}}))}function Jc(e){var t=e.root,n=e.children;return dc.createPortal(n,t)}function Ix(e){var t=N.forwardRef(function(n,r){var o,i,s=n.mode,l=n.delegatesFocus,a=n.styleSheets,u=n.ssr,c=n.children,f=fg(n,["mode","delegatesFocus","styleSheets","ssr","children"]),d=(i=N.useRef((o=r)&&o.current),N.useEffect(function(){o&&(o.current=i.current)},[o]),i),m=N.useState(null),y=bx(m,2),v=y[0],x=y[1],h="node_".concat(s).concat(l);return N.useLayoutEffect(function(){if(d.current)try{if(typeof r=="function"&&r(d.current),u){var p=d.current.shadowRoot;return void x(p)}var g=d.current.attachShadow({mode:s,delegatesFocus:l});a.length>0&&(g.adoptedStyleSheets=a),x(g)}catch(w){(function(S){var E=S.error,_=S.styleSheets,k=S.root;switch(E.name){case"NotSupportedError":_.length>0&&(k.adoptedStyleSheets=_);break;default:throw E}})({error:w,styleSheets:a,root:v})}},[r,d,a]),Vt.createElement(Vt.Fragment,null,Vt.createElement(e.tag,cg({key:h,ref:d},f),(v||u)&&Vt.createElement(Lx.Provider,{value:v},u?Vt.createElement(qc,{shadowroot:s,shadowrootmode:s},e.render({root:v,ssr:u,children:c})):Vt.createElement(Jc,{root:v},e.render({root:v,ssr:u,children:c})))))});return t.propTypes={mode:Pt.oneOf(["open","closed"]),delegatesFocus:Pt.bool,styleSheets:Pt.arrayOf(Pt.instanceOf(globalThis.CSSStyleSheet)),ssr:Pt.bool,children:Pt.node},t.defaultProps={mode:"open",delegatesFocus:!1,styleSheets:[],ssr:!1,children:null},t}qc.propTypes={children:Pt.oneOfType([Pt.string,Pt.node])},qc.defaultProps={children:""},Jc.propTypes={root:Pt.object.isRequired,children:Pt.node},Jc.defaultProps={children:null};var ef=new Map;function Fx(){var e=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},t=arguments.length>1&&arguments[1]!==void 0?arguments[1]:"core",n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:function(r){return r.children};return new Proxy(e,{get:function(r,o){var i=Tx(o,{separator:"-"}),s="".concat(t,"-").concat(i);return ef.has(s)||ef.set(s,Ix({tag:i,render:n})),ef.get(s)}})}var Dx=Fx();const zx=({onExit:e})=>M.jsx("button",{className:"glass glass-interactive px-2 py-1.5 text-sm",onClick:e,children:"Exit WhatFont"});function On(e){return dg(e)?(e.nodeName||"").toLowerCase():"#document"}function ot(e){var t;return(e==null||(t=e.ownerDocument)==null?void 0:t.defaultView)||window}function Ln(e){var t;return(t=(dg(e)?e.ownerDocument:e.document)||window.document)==null?void 0:t.documentElement}function dg(e){return e instanceof Node||e instanceof ot(e).Node}function it(e){return e instanceof Element||e instanceof ot(e).Element}function jt(e){return e instanceof HTMLElement||e instanceof ot(e).HTMLElement}function pg(e){return typeof ShadowRoot>"u"?!1:e instanceof ShadowRoot||e instanceof ot(e).ShadowRoot}function ti(e){const{overflow:t,overflowX:n,overflowY:r,display:o}=yt(e);return/auto|scroll|overlay|hidden|clip/.test(t+r+n)&&!["inline","contents"].includes(o)}function jx(e){return["table","td","th"].includes(On(e))}function tf(e){const t=nf(),n=yt(e);return n.transform!=="none"||n.perspective!=="none"||(n.containerType?n.containerType!=="normal":!1)||!t&&(n.backdropFilter?n.backdropFilter!=="none":!1)||!t&&(n.filter?n.filter!=="none":!1)||["transform","perspective","filter"].some(r=>(n.willChange||"").includes(r))||["paint","layout","strict","content"].some(r=>(n.contain||"").includes(r))}function hg(e){let t=Hr(e);for(;jt(t)&&!pl(t);){if(tf(t))return t;t=Hr(t)}return null}function nf(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function pl(e){return["html","body","#document"].includes(On(e))}function yt(e){return ot(e).getComputedStyle(e)}function hl(e){return it(e)?{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}:{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function Hr(e){if(On(e)==="html")return e;const t=e.assignedSlot||e.parentNode||pg(e)&&e.host||Ln(e);return pg(t)?t.host:t}function mg(e){const t=Hr(e);return pl(t)?e.ownerDocument?e.ownerDocument.body:e.body:jt(t)&&ti(t)?t:mg(t)}function rf(e,t,n){var r;t===void 0&&(t=[]),n===void 0&&(n=!0);const o=mg(e),i=o===((r=e.ownerDocument)==null?void 0:r.body),s=ot(o);return i?t.concat(s,s.visualViewport||[],ti(o)?o:[],s.frameElement&&n?rf(s.frameElement):[]):t.concat(o,rf(o,[],n))}const ni=Math.min,Vr=Math.max,ml=Math.round,In=e=>({x:e,y:e}),Bx={left:"right",right:"left",bottom:"top",top:"bottom"},Ux={start:"end",end:"start"};function of(e,t,n){return Vr(e,ni(t,n))}function ri(e,t){return typeof e=="function"?e(t):e}function ur(e){return e.split("-")[0]}function oi(e){return e.split("-")[1]}function gg(e){return e==="x"?"y":"x"}function sf(e){return e==="y"?"height":"width"}function gl(e){return["top","bottom"].includes(ur(e))?"y":"x"}function lf(e){return gg(gl(e))}function Hx(e,t,n){n===void 0&&(n=!1);const r=oi(e),o=lf(e),i=sf(o);let s=o==="x"?r===(n?"end":"start")?"right":"left":r==="start"?"bottom":"top";return t.reference[i]>t.floating[i]&&(s=yl(s)),[s,yl(s)]}function Vx(e){const t=yl(e);return[af(e),t,af(t)]}function af(e){return e.replace(/start|end/g,t=>Ux[t])}function Wx(e,t,n){const r=["left","right"],o=["right","left"],i=["top","bottom"],s=["bottom","top"];switch(e){case"top":case"bottom":return n?t?o:r:t?r:o;case"left":case"right":return t?i:s;default:return[]}}function Yx(e,t,n,r){const o=oi(e);let i=Wx(ur(e),n==="start",r);return o&&(i=i.map(s=>s+"-"+o),t&&(i=i.concat(i.map(af)))),i}function yl(e){return e.replace(/left|right|bottom|top/g,t=>Bx[t])}function Gx(e){return{top:0,right:0,bottom:0,left:0,...e}}function yg(e){return typeof e!="number"?Gx(e):{top:e,right:e,bottom:e,left:e}}function vl(e){return{...e,top:e.y,left:e.x,right:e.x+e.width,bottom:e.y+e.height}}function vg(e,t,n){let{reference:r,floating:o}=e;const i=gl(t),s=lf(t),l=sf(s),a=ur(t),u=i==="y",c=r.x+r.width/2-o.width/2,f=r.y+r.height/2-o.height/2,d=r[l]/2-o[l]/2;let m;switch(a){case"top":m={x:c,y:r.y-o.height};break;case"bottom":m={x:c,y:r.y+r.height};break;case"right":m={x:r.x+r.width,y:f};break;case"left":m={x:r.x-o.width,y:f};break;default:m={x:r.x,y:r.y}}switch(oi(t)){case"start":m[s]-=d*(n&&u?-1:1);break;case"end":m[s]+=d*(n&&u?-1:1);break}return m}const Xx=async(e,t,n)=>{const{placement:r="bottom",strategy:o="absolute",middleware:i=[],platform:s}=n,l=i.filter(Boolean),a=await(s.isRTL==null?void 0:s.isRTL(t));let u=await s.getElementRects({reference:e,floating:t,strategy:o}),{x:c,y:f}=vg(u,r,a),d=r,m={},y=0;for(let v=0;v<l.length;v++){const{name:x,fn:h}=l[v],{x:p,y:g,data:w,reset:S}=await h({x:c,y:f,initialPlacement:r,placement:d,strategy:o,middlewareData:m,rects:u,platform:s,elements:{reference:e,floating:t}});c=p??c,f=g??f,m={...m,[x]:{...m[x],...w}},S&&y<=50&&(y++,typeof S=="object"&&(S.placement&&(d=S.placement),S.rects&&(u=S.rects===!0?await s.getElementRects({reference:e,floating:t,strategy:o}):S.rects),{x:c,y:f}=vg(u,d,a)),v=-1)}return{x:c,y:f,placement:d,strategy:o,middlewareData:m}};async function wg(e,t){var n;t===void 0&&(t={});const{x:r,y:o,platform:i,rects:s,elements:l,strategy:a}=e,{boundary:u="clippingAncestors",rootBoundary:c="viewport",elementContext:f="floating",altBoundary:d=!1,padding:m=0}=ri(t,e),y=yg(m),x=l[d?f==="floating"?"reference":"floating":f],h=vl(await i.getClippingRect({element:(n=await(i.isElement==null?void 0:i.isElement(x)))==null||n?x:x.contextElement||await(i.getDocumentElement==null?void 0:i.getDocumentElement(l.floating)),boundary:u,rootBoundary:c,strategy:a})),p=f==="floating"?{...s.floating,x:r,y:o}:s.reference,g=await(i.getOffsetParent==null?void 0:i.getOffsetParent(l.floating)),w=await(i.isElement==null?void 0:i.isElement(g))?await(i.getScale==null?void 0:i.getScale(g))||{x:1,y:1}:{x:1,y:1},S=vl(i.convertOffsetParentRelativeRectToViewportRelativeRect?await i.convertOffsetParentRelativeRectToViewportRelativeRect({elements:l,rect:p,offsetParent:g,strategy:a}):p);return{top:(h.top-S.top+y.top)/w.y,bottom:(S.bottom-h.bottom+y.bottom)/w.y,left:(h.left-S.left+y.left)/w.x,right:(S.right-h.right+y.right)/w.x}}const Qx=e=>({name:"arrow",options:e,async fn(t){const{x:n,y:r,placement:o,rects:i,platform:s,elements:l,middlewareData:a}=t,{element:u,padding:c=0}=ri(e,t)||{};if(u==null)return{};const f=yg(c),d={x:n,y:r},m=lf(o),y=sf(m),v=await s.getDimensions(u),x=m==="y",h=x?"top":"left",p=x?"bottom":"right",g=x?"clientHeight":"clientWidth",w=i.reference[y]+i.reference[m]-d[m]-i.floating[y],S=d[m]-i.reference[m],E=await(s.getOffsetParent==null?void 0:s.getOffsetParent(u));let _=E?E[g]:0;(!_||!await(s.isElement==null?void 0:s.isElement(E)))&&(_=l.floating[g]||i.floating[y]);const k=w/2-S/2,A=_/2-v[y]/2-1,$=ni(f[h],A),L=ni(f[p],A),j=$,G=_-v[y]-L,W=_/2-v[y]/2+k,O=of(j,W,G),U=!a.arrow&&oi(o)!=null&&W!==O&&i.reference[y]/2-(W<j?$:L)-v[y]/2<0,D=U?W<j?W-j:W-G:0;return{[m]:d[m]+D,data:{[m]:O,centerOffset:W-O-D,...U&&{alignmentOffset:D}},reset:U}}}),Zx=function(e){return e===void 0&&(e={}),{name:"flip",options:e,async fn(t){var n,r;const{placement:o,middlewareData:i,rects:s,initialPlacement:l,platform:a,elements:u}=t,{mainAxis:c=!0,crossAxis:f=!0,fallbackPlacements:d,fallbackStrategy:m="bestFit",fallbackAxisSideDirection:y="none",flipAlignment:v=!0,...x}=ri(e,t);if((n=i.arrow)!=null&&n.alignmentOffset)return{};const h=ur(o),p=ur(l)===l,g=await(a.isRTL==null?void 0:a.isRTL(u.floating)),w=d||(p||!v?[yl(l)]:Vx(l));!d&&y!=="none"&&w.push(...Yx(l,v,y,g));const S=[l,...w],E=await wg(t,x),_=[];let k=((r=i.flip)==null?void 0:r.overflows)||[];if(c&&_.push(E[h]),f){const j=Hx(o,s,g);_.push(E[j[0]],E[j[1]])}if(k=[...k,{placement:o,overflows:_}],!_.every(j=>j<=0)){var A,$;const j=(((A=i.flip)==null?void 0:A.index)||0)+1,G=S[j];if(G)return{data:{index:j,overflows:k},reset:{placement:G}};let W=($=k.filter(O=>O.overflows[0]<=0).sort((O,U)=>O.overflows[1]-U.overflows[1])[0])==null?void 0:$.placement;if(!W)switch(m){case"bestFit":{var L;const O=(L=k.map(U=>[U.placement,U.overflows.filter(D=>D>0).reduce((D,T)=>D+T,0)]).sort((U,D)=>U[1]-D[1])[0])==null?void 0:L[0];O&&(W=O);break}case"initialPlacement":W=l;break}if(o!==W)return{reset:{placement:W}}}return{}}}};async function Kx(e,t){const{placement:n,platform:r,elements:o}=e,i=await(r.isRTL==null?void 0:r.isRTL(o.floating)),s=ur(n),l=oi(n),a=gl(n)==="y",u=["left","top"].includes(s)?-1:1,c=i&&a?-1:1,f=ri(t,e);let{mainAxis:d,crossAxis:m,alignmentAxis:y}=typeof f=="number"?{mainAxis:f,crossAxis:0,alignmentAxis:null}:{mainAxis:0,crossAxis:0,alignmentAxis:null,...f};return l&&typeof y=="number"&&(m=l==="end"?y*-1:y),a?{x:m*c,y:d*u}:{x:d*u,y:m*c}}const qx=function(e){return e===void 0&&(e=0),{name:"offset",options:e,async fn(t){var n,r;const{x:o,y:i,placement:s,middlewareData:l}=t,a=await Kx(t,e);return s===((n=l.offset)==null?void 0:n.placement)&&(r=l.arrow)!=null&&r.alignmentOffset?{}:{x:o+a.x,y:i+a.y,data:{...a,placement:s}}}}},Jx=function(e){return e===void 0&&(e={}),{name:"shift",options:e,async fn(t){const{x:n,y:r,placement:o}=t,{mainAxis:i=!0,crossAxis:s=!1,limiter:l={fn:x=>{let{x:h,y:p}=x;return{x:h,y:p}}},...a}=ri(e,t),u={x:n,y:r},c=await wg(t,a),f=gl(ur(o)),d=gg(f);let m=u[d],y=u[f];if(i){const x=d==="y"?"top":"left",h=d==="y"?"bottom":"right",p=m+c[x],g=m-c[h];m=of(p,m,g)}if(s){const x=f==="y"?"top":"left",h=f==="y"?"bottom":"right",p=y+c[x],g=y-c[h];y=of(p,y,g)}const v=l.fn({...t,[d]:m,[f]:y});return{...v,data:{x:v.x-n,y:v.y-r}}}}};function xg(e){const t=yt(e);let n=parseFloat(t.width)||0,r=parseFloat(t.height)||0;const o=jt(e),i=o?e.offsetWidth:n,s=o?e.offsetHeight:r,l=ml(n)!==i||ml(r)!==s;return l&&(n=i,r=s),{width:n,height:r,$:l}}function Sg(e){return it(e)?e:e.contextElement}function Wr(e){const t=Sg(e);if(!jt(t))return In(1);const n=t.getBoundingClientRect(),{width:r,height:o,$:i}=xg(t);let s=(i?ml(n.width):n.width)/r,l=(i?ml(n.height):n.height)/o;return(!s||!Number.isFinite(s))&&(s=1),(!l||!Number.isFinite(l))&&(l=1),{x:s,y:l}}const eS=In(0);function kg(e){const t=ot(e);return!nf()||!t.visualViewport?eS:{x:t.visualViewport.offsetLeft,y:t.visualViewport.offsetTop}}function tS(e,t,n){return t===void 0&&(t=!1),!n||t&&n!==ot(e)?!1:t}function ii(e,t,n,r){t===void 0&&(t=!1),n===void 0&&(n=!1);const o=e.getBoundingClientRect(),i=Sg(e);let s=In(1);t&&(r?it(r)&&(s=Wr(r)):s=Wr(e));const l=tS(i,n,r)?kg(i):In(0);let a=(o.left+l.x)/s.x,u=(o.top+l.y)/s.y,c=o.width/s.x,f=o.height/s.y;if(i){const d=ot(i),m=r&&it(r)?ot(r):r;let y=d.frameElement;for(;y&&r&&m!==d;){const v=Wr(y),x=y.getBoundingClientRect(),h=yt(y),p=x.left+(y.clientLeft+parseFloat(h.paddingLeft))*v.x,g=x.top+(y.clientTop+parseFloat(h.paddingTop))*v.y;a*=v.x,u*=v.y,c*=v.x,f*=v.y,a+=p,u+=g,y=ot(y).frameElement}}return vl({width:c,height:f,x:a,y:u})}const nS=[":popover-open",":modal"];function _g(e){let t=!1,n=0,r=0;function o(i){try{t=t||e.matches(i)}catch{}}if(nS.forEach(i=>{o(i)}),t){const i=hg(e);if(i){const s=i.getBoundingClientRect();n=s.x,r=s.y}}return[t,n,r]}function rS(e){let{elements:t,rect:n,offsetParent:r,strategy:o}=e;const i=Ln(r),[s]=t?_g(t.floating):[!1];if(r===i||s)return n;let l={scrollLeft:0,scrollTop:0},a=In(1);const u=In(0),c=jt(r);if((c||!c&&o!=="fixed")&&((On(r)!=="body"||ti(i))&&(l=hl(r)),jt(r))){const f=ii(r);a=Wr(r),u.x=f.x+r.clientLeft,u.y=f.y+r.clientTop}return{width:n.width*a.x,height:n.height*a.y,x:n.x*a.x-l.scrollLeft*a.x+u.x,y:n.y*a.y-l.scrollTop*a.y+u.y}}function oS(e){return Array.from(e.getClientRects())}function Eg(e){return ii(Ln(e)).left+hl(e).scrollLeft}function iS(e){const t=Ln(e),n=hl(e),r=e.ownerDocument.body,o=Vr(t.scrollWidth,t.clientWidth,r.scrollWidth,r.clientWidth),i=Vr(t.scrollHeight,t.clientHeight,r.scrollHeight,r.clientHeight);let s=-n.scrollLeft+Eg(e);const l=-n.scrollTop;return yt(r).direction==="rtl"&&(s+=Vr(t.clientWidth,r.clientWidth)-o),{width:o,height:i,x:s,y:l}}function sS(e,t){const n=ot(e),r=Ln(e),o=n.visualViewport;let i=r.clientWidth,s=r.clientHeight,l=0,a=0;if(o){i=o.width,s=o.height;const u=nf();(!u||u&&t==="fixed")&&(l=o.offsetLeft,a=o.offsetTop)}return{width:i,height:s,x:l,y:a}}function lS(e,t){const n=ii(e,!0,t==="fixed"),r=n.top+e.clientTop,o=n.left+e.clientLeft,i=jt(e)?Wr(e):In(1),s=e.clientWidth*i.x,l=e.clientHeight*i.y,a=o*i.x,u=r*i.y;return{width:s,height:l,x:a,y:u}}function Cg(e,t,n){let r;if(t==="viewport")r=sS(e,n);else if(t==="document")r=iS(Ln(e));else if(it(t))r=lS(t,n);else{const o=kg(e);r={...t,x:t.x-o.x,y:t.y-o.y}}return vl(r)}function Ag(e,t){const n=Hr(e);return n===t||!it(n)||pl(n)?!1:yt(n).position==="fixed"||Ag(n,t)}function aS(e,t){const n=t.get(e);if(n)return n;let r=rf(e,[],!1).filter(l=>it(l)&&On(l)!=="body"),o=null;const i=yt(e).position==="fixed";let s=i?Hr(e):e;for(;it(s)&&!pl(s);){const l=yt(s),a=tf(s);!a&&l.position==="fixed"&&(o=null),(i?!a&&!o:!a&&l.position==="static"&&!!o&&["absolute","fixed"].includes(o.position)||ti(s)&&!a&&Ag(e,s))?r=r.filter(c=>c!==s):o=l,s=Hr(s)}return t.set(e,r),r}function uS(e){let{element:t,boundary:n,rootBoundary:r,strategy:o}=e;const s=[...n==="clippingAncestors"?aS(t,this._c):[].concat(n),r],l=s[0],a=s.reduce((u,c)=>{const f=Cg(t,c,o);return u.top=Vr(f.top,u.top),u.right=ni(f.right,u.right),u.bottom=ni(f.bottom,u.bottom),u.left=Vr(f.left,u.left),u},Cg(t,l,o));return{width:a.right-a.left,height:a.bottom-a.top,x:a.left,y:a.top}}function cS(e){const{width:t,height:n}=xg(e);return{width:t,height:n}}function fS(e,t,n,r){const o=jt(t),i=Ln(t),s=n==="fixed",l=ii(e,!0,s,t);let a={scrollLeft:0,scrollTop:0};const u=In(0);if(o||!o&&!s)if((On(t)!=="body"||ti(i))&&(a=hl(t)),o){const v=ii(t,!0,s,t);u.x=v.x+t.clientLeft,u.y=v.y+t.clientTop}else i&&(u.x=Eg(i));let c=l.left+a.scrollLeft-u.x,f=l.top+a.scrollTop-u.y;const[d,m,y]=_g(r);return d&&(c+=m,f+=y,o&&(c+=t.clientLeft,f+=t.clientTop)),{x:c,y:f,width:l.width,height:l.height}}function $g(e,t){return!jt(e)||yt(e).position==="fixed"?null:t?t(e):e.offsetParent}function Tg(e,t){const n=ot(e);if(!jt(e))return n;let r=$g(e,t);for(;r&&jx(r)&&yt(r).position==="static";)r=$g(r,t);return r&&(On(r)==="html"||On(r)==="body"&&yt(r).position==="static"&&!tf(r))?n:r||hg(e)||n}const dS=async function(e){const t=this.getOffsetParent||Tg,n=this.getDimensions;return{reference:fS(e.reference,await t(e.floating),e.strategy,e.floating),floating:{x:0,y:0,...await n(e.floating)}}};function pS(e){return yt(e).direction==="rtl"}const Pg={convertOffsetParentRelativeRectToViewportRelativeRect:rS,getDocumentElement:Ln,getClippingRect:uS,getOffsetParent:Tg,getElementRects:dS,getClientRects:oS,getDimensions:cS,getScale:Wr,isElement:it,isRTL:pS},Mg=Jx,hS=Zx,Rg=Qx,mS=(e,t,n)=>{const r=new Map,o={platform:Pg,...n},i={...o.platform,_c:r};return Xx(e,t,{...o,platform:i})},gS=e=>{function t(n){return{}.hasOwnProperty.call(n,"current")}return{name:"arrow",options:e,fn(n){const{element:r,padding:o}=typeof e=="function"?e(n):e;return r&&t(r)?r.current!=null?Rg({element:r.current,padding:o}).fn(n):{}:r?Rg({element:r,padding:o}).fn(n):{}}}};var wl=typeof document<"u"?N.useLayoutEffect:N.useEffect;function xl(e,t){if(e===t)return!0;if(typeof e!=typeof t)return!1;if(typeof e=="function"&&e.toString()===t.toString())return!0;let n,r,o;if(e&&t&&typeof e=="object"){if(Array.isArray(e)){if(n=e.length,n!==t.length)return!1;for(r=n;r--!==0;)if(!xl(e[r],t[r]))return!1;return!0}if(o=Object.keys(e),n=o.length,n!==Object.keys(t).length)return!1;for(r=n;r--!==0;)if(!{}.hasOwnProperty.call(t,o[r]))return!1;for(r=n;r--!==0;){const i=o[r];if(!(i==="_owner"&&e.$$typeof)&&!xl(e[i],t[i]))return!1}return!0}return e!==e&&t!==t}function Ng(e){return typeof window>"u"?1:(e.ownerDocument.defaultView||window).devicePixelRatio||1}function bg(e,t){const n=Ng(e);return Math.round(t*n)/n}function Og(e){const t=N.useRef(e);return wl(()=>{t.current=e}),t}function yS(e){e===void 0&&(e={});const{placement:t="bottom",strategy:n="absolute",middleware:r=[],platform:o,elements:{reference:i,floating:s}={},transform:l=!0,whileElementsMounted:a,open:u}=e,[c,f]=N.useState({x:0,y:0,strategy:n,placement:t,middlewareData:{},isPositioned:!1}),[d,m]=N.useState(r);xl(d,r)||m(r);const[y,v]=N.useState(null),[x,h]=N.useState(null),p=N.useCallback(D=>{D!==E.current&&(E.current=D,v(D))},[]),g=N.useCallback(D=>{D!==_.current&&(_.current=D,h(D))},[]),w=i||y,S=s||x,E=N.useRef(null),_=N.useRef(null),k=N.useRef(c),A=a!=null,$=Og(a),L=Og(o),j=N.useCallback(()=>{if(!E.current||!_.current)return;const D={placement:t,strategy:n,middleware:d};L.current&&(D.platform=L.current),mS(E.current,_.current,D).then(T=>{const I={...T,isPositioned:!0};G.current&&!xl(k.current,I)&&(k.current=I,dc.flushSync(()=>{f(I)}))})},[d,t,n,L]);wl(()=>{u===!1&&k.current.isPositioned&&(k.current.isPositioned=!1,f(D=>({...D,isPositioned:!1})))},[u]);const G=N.useRef(!1);wl(()=>(G.current=!0,()=>{G.current=!1}),[]),wl(()=>{if(w&&(E.current=w),S&&(_.current=S),w&&S){if($.current)return $.current(w,S,j);j()}},[w,S,j,$,A]);const W=N.useMemo(()=>({reference:E,floating:_,setReference:p,setFloating:g}),[p,g]),O=N.useMemo(()=>({reference:w,floating:S}),[w,S]),U=N.useMemo(()=>{const D={position:n,left:0,top:0};if(!O.floating)return D;const T=bg(O.floating,c.x),I=bg(O.floating,c.y);return l?{...D,transform:"translate("+T+"px, "+I+"px)",...Ng(O.floating)>=1.5&&{willChange:"transform"}}:{position:n,left:T,top:I}},[n,l,O.floating,c.x,c.y]);return N.useMemo(()=>({...c,update:j,refs:W,elements:O,floatingStyles:U}),[c,j,W,O,U])}const vS=od.useInsertionEffect||(e=>e());function wS(e){const t=N.useRef(()=>{});return vS(()=>{t.current=e}),N.useCallback(function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return t.current==null?void 0:t.current(...r)},[])}var Lg=typeof document<"u"?N.useLayoutEffect:N.useEffect;function uf(){return uf=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},uf.apply(this,arguments)}let cf=!1,xS=0;const Ig=()=>"floating-ui-"+xS++;function SS(){const[e,t]=N.useState(()=>cf?Ig():void 0);return Lg(()=>{e==null&&t(Ig())},[]),N.useEffect(()=>{cf||(cf=!0)},[]),e}const Fg=od.useId||SS,kS=N.forwardRef(function(t,n){let{context:{placement:r,elements:{floating:o},middlewareData:{arrow:i}},width:s=14,height:l=7,tipRadius:a=0,strokeWidth:u=0,staticOffset:c,stroke:f,d,style:{transform:m,...y}={},...v}=t;const x=Fg();if(!o)return null;u*=2;const h=u/2,p=s/2*(a/-8+1),g=l/2*a/4,[w,S]=r.split("-"),E=Pg.isRTL(o),_=!!d,k=w==="top"||w==="bottom",A=c&&S==="end"?"bottom":"top";let $=c&&S==="end"?"right":"left";c&&E&&($=S==="end"?"left":"right");const L=(i==null?void 0:i.x)!=null?c||i.x:"",j=(i==null?void 0:i.y)!=null?c||i.y:"",G=d||"M0,0"+(" H"+s)+(" L"+(s-p)+","+(l-g))+(" Q"+s/2+","+l+" "+p+","+(l-g))+" Z",W={top:_?"rotate(180deg)":"",left:_?"rotate(90deg)":"rotate(-90deg)",bottom:_?"":"rotate(180deg)",right:_?"rotate(-90deg)":"rotate(90deg)"}[w];return N.createElement("svg",uf({},v,{"aria-hidden":!0,ref:n,width:_?s:s+u,height:s,viewBox:"0 0 "+s+" "+(l>s?l:s),style:{position:"absolute",pointerEvents:"none",[$]:L,[A]:j,[w]:k||_?"100%":"calc(100% - "+u/2+"px)",transform:""+W+(m??""),...y}}),u>0&&N.createElement("path",{clipPath:"url(#"+x+")",fill:"none",stroke:f,strokeWidth:u+(d?0:1),d:G}),N.createElement("path",{stroke:u&&!d?v.fill:"none",d:G}),N.createElement("clipPath",{id:x},N.createElement("rect",{x:-h,y:h*(_?-1:1),width:s+u,height:s})))});function _S(){const e=new Map;return{emit(t,n){var r;(r=e.get(t))==null||r.forEach(o=>o(n))},on(t,n){e.set(t,[...e.get(t)||[],n])},off(t,n){var r;e.set(t,((r=e.get(t))==null?void 0:r.filter(o=>o!==n))||[])}}}const ES=N.createContext(null),CS=N.createContext(null),AS=()=>{var e;return((e=N.useContext(ES))==null?void 0:e.id)||null},$S=()=>N.useContext(CS);function Dg(e){var t;e===void 0&&(e={});const{open:n=!1,onOpenChange:r,nodeId:o}=e,[i,s]=N.useState(null),l=((t=e.elements)==null?void 0:t.reference)||i,a=yS(e),u=$S(),c=AS()!=null,f=wS((S,E,_)=>{S&&(m.current.openEvent=E),y.emit("openchange",{open:S,event:E,reason:_,nested:c}),r==null||r(S,E,_)}),d=N.useRef(null),m=N.useRef({}),y=N.useState(()=>_S())[0],v=Fg(),x=N.useCallback(S=>{const E=it(S)?{getBoundingClientRect:()=>S.getBoundingClientRect(),contextElement:S}:S;a.refs.setReference(E)},[a.refs]),h=N.useCallback(S=>{(it(S)||S===null)&&(d.current=S,s(S)),(it(a.refs.reference.current)||a.refs.reference.current===null||S!==null&&!it(S))&&a.refs.setReference(S)},[a.refs]),p=N.useMemo(()=>({...a.refs,setReference:h,setPositionReference:x,domReference:d}),[a.refs,h,x]),g=N.useMemo(()=>({...a.elements,domReference:l}),[a.elements,l]),w=N.useMemo(()=>({...a,refs:p,elements:g,dataRef:m,nodeId:o,floatingId:v,events:y,open:n,onOpenChange:f}),[a,o,v,y,n,f,p,g]);return Lg(()=>{const S=u==null?void 0:u.nodesRef.current.find(E=>E.id===o);S&&(S.context=w)}),N.useMemo(()=>({...a,context:w,refs:p,elements:g}),[a,p,g,w])}const TS=14,zg=({refX:e,refY:t,fixed:n=!1,arrow:r=!1,children:o})=>{const i=N.useRef(null),s=r?TS:0,{refs:l,floatingStyles:a,context:u}=Dg({placement:"bottom-start",middleware:[qx({mainAxis:Math.max(12,s),crossAxis:Math.max(16,s)}),hS(),Mg(),r&&gS({element:i,padding:16})],strategy:n?"fixed":"absolute"});return N.useLayoutEffect(()=>{!e||!t||l.setPositionReference({getBoundingClientRect:()=>({width:0,height:0,x:e,y:t,left:e,right:e,top:t,bottom:t})})},[e,t,l]),M.jsxs("div",{ref:l.setFloating,style:a,className:"z-[2147483646]",children:[o,r&&M.jsx(kS,{ref:i,context:u,className:"fill-neutral-800/80"})]})};function jg(e){const[,t,n]=/(\d+\.?\d*)(\w+)?/.exec(e)||[];return t?Math.round(parseFloat(e))+n:e}function Sl(e){const t=getComputedStyle(e);return{fontFamily:t.getPropertyValue("font-family"),fontWeight:t.getPropertyValue("font-weight")||"normal",fontStyle:t.getPropertyValue("font-style")||"normal",fontSize:jg(t.getPropertyValue("font-size")),lineHeight:jg(t.getPropertyValue("line-height")),color:t.getPropertyValue("color")}}const Yr={fillStyle:"rgb(0,0,0)",height:50,size:"40px",textBaseline:"top",width:600};function PS(e){return e.fontStyle+" "+e.fontWeight+" "+Yr.size+" "+e.fontFamily}function Bg(e,t="abcdefghijklmnopqrstuvwxyz"){const n=document.createElement("canvas");n.width=Yr.width,n.height=Yr.height;const r=n.getContext("2d");return r?(Object.assign(r,Yr),r.font=PS(e),r.fillText(t,0,0),n):null}function Ug(e){var t;return e&&((t=e.getContext("2d"))==null?void 0:t.getImageData(0,0,Yr.width,Yr.height).data)}function MS(e,t){const n=Ug(e),r=Ug(t);if(!n||!r||n.length!==r.length)return!1;for(let o=0;o<n.length;o++)if(n[o]!==r[o])return!1;return!0}function kl(e,t){const n=Bg(e),r=Bg(t);return MS(n,r)}function RS(){const e=document.createElement("p"),t=document.createElement("p");e.style.fontFamily="S0m3F0n7",t.style.fontFamily="serif";const n=Sl(e),r=Sl(t);return kl(n,r)?"serif":"sans-serif"}const NS=e=>{const t=e.fontFamily.split(/,\s*/);for(let r=0;r<t.length;r++){const o={...e,fontFamily:t[r]+", serif"},i={...e,fontFamily:t[r]+", sans-serif"};if(kl(o,i)&&kl(o,e))return t[r]}const n=RS();if(n){const r={...e,fontFamily:n};if(kl(r,e))return n}return t[0]},ff={},Hg=e=>{const t=JSON.stringify(e);return ff[t]||(ff[t]=NS(e)),ff[t]};function bS({fontWeight:e,fontStyle:t}){return e==="normal"&&t==="normal"?"regular":e==="normal"?t:t==="normal"?e:e+" "+t}function Vg(e){return Hg(e).replace(/(^")|("$)/g,"")}function de(e,t){let n=e.length;Array.isArray(e[0])||(e=[e]),Array.isArray(t[0])||(t=t.map(s=>[s]));let r=t[0].length,o=t[0].map((s,l)=>t.map(a=>a[l])),i=e.map(s=>o.map(l=>{let a=0;if(!Array.isArray(s)){for(let u of l)a+=s*u;return a}for(let u=0;u<s.length;u++)a+=s[u]*(l[u]||0);return a}));return n===1&&(i=i[0]),r===1?i.map(s=>s[0]):i}function si(e){return Fn(e)==="string"}function Fn(e){return(Object.prototype.toString.call(e).match(/^\[object\s+(.*?)\]$/)[1]||"").toLowerCase()}function _l(e,t){e=+e,t=+t;let n=(Math.floor(e)+"").length;if(t>n)return+e.toFixed(t-n);{let r=10**(n-t);return Math.round(e/r)*r}}function Wg(e){if(!e)return;e=e.trim();const t=/^([a-z]+)\((.+?)\)$/i,n=/^-?[\d.]+$/;let r=e.match(t);if(r){let o=[];return r[2].replace(/\/?\s*([-\w.]+(?:%|deg)?)/g,(i,s)=>{/%$/.test(s)?(s=new Number(s.slice(0,-1)/100),s.type="<percentage>"):/deg$/.test(s)?(s=new Number(+s.slice(0,-3)),s.type="<angle>",s.unit="deg"):n.test(s)&&(s=new Number(s),s.type="<number>"),i.startsWith("/")&&(s=s instanceof Number?s:new Number(s),s.alpha=!0),o.push(s)}),{name:r[1].toLowerCase(),rawName:r[1],rawArgs:r[2],args:o}}}function Yg(e){return e[e.length-1]}function El(e,t,n){return isNaN(e)?t:isNaN(t)?e:e+(t-e)*n}function Gg(e,t,n){return(n-e)/(t-e)}function df(e,t,n){return El(t[0],t[1],Gg(e[0],e[1],n))}function Xg(e){return e.map(t=>t.split("|").map(n=>{n=n.trim();let r=n.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);if(r){let o=new String(r[1]);return o.range=[+r[2],+r[3]],o}return n}))}var OS=Object.freeze({__proto__:null,interpolate:El,interpolateInv:Gg,isString:si,last:Yg,mapRange:df,multiplyMatrices:de,parseCoordGrammar:Xg,parseFunction:Wg,toPrecision:_l,type:Fn});class LS{add(t,n,r){if(typeof arguments[0]!="string"){for(var t in arguments[0])this.add(t,arguments[0][t],arguments[1]);return}(Array.isArray(t)?t:[t]).forEach(function(o){this[o]=this[o]||[],n&&this[o][r?"unshift":"push"](n)},this)}run(t,n){this[t]=this[t]||[],this[t].forEach(function(r){r.call(n&&n.context?n.context:n,n)})}}const Dn=new LS;var Bt={gamut_mapping:"lch.c",precision:5,deltaE:"76"};const Mt={D50:[.3457/.3585,1,(1-.3457-.3585)/.3585],D65:[.3127/.329,1,(1-.3127-.329)/.329]};function pf(e){return Array.isArray(e)?e:Mt[e]}function Cl(e,t,n,r={}){if(e=pf(e),t=pf(t),!e||!t)throw new TypeError(`Missing white point to convert ${e?"":"from"}${!e&&!t?"/":""}${t?"":"to"}`);if(e===t)return n;let o={W1:e,W2:t,XYZ:n,options:r};if(Dn.run("chromatic-adaptation-start",o),o.M||(o.W1===Mt.D65&&o.W2===Mt.D50?o.M=[[1.0479298208405488,.022946793341019088,-.05019222954313557],[.029627815688159344,.990434484573249,-.01707382502938514],[-.009243058152591178,.015055144896577895,.7518742899580008]]:o.W1===Mt.D50&&o.W2===Mt.D65&&(o.M=[[.9554734527042182,-.023098536874261423,.0632593086610217],[-.028369706963208136,1.0099954580058226,.021041398966943008],[.012314001688319899,-.020507696433477912,1.3303659366080753]])),Dn.run("chromatic-adaptation-end",o),o.M)return de(o.M,o.XYZ);throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.")}const IS=75e-6,at=class at{constructor(t){var o,i,s;this.id=t.id,this.name=t.name,this.base=t.base?at.get(t.base):null,this.aliases=t.aliases,this.base&&(this.fromBase=t.fromBase,this.toBase=t.toBase);let n=t.coords??this.base.coords;for(let l in n)"name"in n[l]||(n[l].name=l);this.coords=n;let r=t.white??this.base.white??"D65";this.white=pf(r),this.formats=t.formats??{};for(let l in this.formats){let a=this.formats[l];a.type||(a.type="function"),a.name||(a.name=l)}t.cssId&&!((o=this.formats.functions)!=null&&o.color)?(this.formats.color={id:t.cssId},Object.defineProperty(this,"cssId",{value:t.cssId})):(i=this.formats)!=null&&i.color&&!((s=this.formats)!=null&&s.color.id)&&(this.formats.color.id=this.id),this.referred=t.referred,Object.defineProperty(this,"path",{value:FS(this).reverse(),writable:!1,enumerable:!0,configurable:!0}),Dn.run("colorspace-init-end",this)}inGamut(t,{epsilon:n=IS}={}){if(this.isPolar)return t=this.toBase(t),this.base.inGamut(t,{epsilon:n});let r=Object.values(this.coords);return t.every((o,i)=>{let s=r[i];if(s.type!=="angle"&&s.range){if(Number.isNaN(o))return!0;let[l,a]=s.range;return(l===void 0||o>=l-n)&&(a===void 0||o<=a+n)}return!0})}get cssId(){var t,n;return((n=(t=this.formats.functions)==null?void 0:t.color)==null?void 0:n.id)||this.id}get isPolar(){for(let t in this.coords)if(this.coords[t].type==="angle")return!0;return!1}getFormat(t){if(typeof t=="object")return t=Qg(t,this),t;let n;return t==="default"?n=Object.values(this.formats)[0]:n=this.formats[t],n?(n=Qg(n,this),n):null}equals(t){return t?this===t||this.id===t.id:!1}to(t,n){if(arguments.length===1&&([t,n]=[t.space,t.coords]),t=at.get(t),this.equals(t))return n;n=n.map(l=>Number.isNaN(l)?0:l);let r=this.path,o=t.path,i,s;for(let l=0;l<r.length&&r[l].equals(o[l]);l++)i=r[l],s=l;if(!i)throw new Error(`Cannot convert between color spaces ${this} and ${t}: no connection space was found`);for(let l=r.length-1;l>s;l--)n=r[l].toBase(n);for(let l=s+1;l<o.length;l++)n=o[l].fromBase(n);return n}from(t,n){return arguments.length===1&&([t,n]=[t.space,t.coords]),t=at.get(t),t.to(this,n)}toString(){return`${this.name} (${this.id})`}getMinCoords(){let t=[];for(let n in this.coords){let r=this.coords[n],o=r.range||r.refRange;t.push((o==null?void 0:o.min)??0)}return t}static get all(){return[...new Set(Object.values(at.registry))]}static register(t,n){if(arguments.length===1&&(n=arguments[0],t=n.id),n=this.get(n),this.registry[t]&&this.registry[t]!==n)throw new Error(`Duplicate color space registration: '${t}'`);if(this.registry[t]=n,arguments.length===1&&n.aliases)for(let r of n.aliases)this.register(r,n);return n}static get(t,...n){if(!t||t instanceof at)return t;if(Fn(t)==="string"){let o=at.registry[t.toLowerCase()];if(!o)throw new TypeError(`No color space found with id = "${t}"`);return o}if(n.length)return at.get(...n);throw new TypeError(`${t} is not a valid color space`)}static resolveCoord(t,n){var a;let r=Fn(t),o,i;if(r==="string"?t.includes(".")?[o,i]=t.split("."):[o,i]=[,t]:Array.isArray(t)?[o,i]=t:(o=t.space,i=t.coordId),o=at.get(o),o||(o=n),!o)throw new TypeError(`Cannot resolve coordinate reference ${t}: No color space specified and relative references are not allowed here`);if(r=Fn(i),r==="number"||r==="string"&&i>=0){let u=Object.entries(o.coords)[i];if(u)return{space:o,id:u[0],index:i,...u[1]}}o=at.get(o);let s=i.toLowerCase(),l=0;for(let u in o.coords){let c=o.coords[u];if(u.toLowerCase()===s||((a=c.name)==null?void 0:a.toLowerCase())===s)return{space:o,id:u,index:l,...c};l++}throw new TypeError(`No "${i}" coordinate found in ${o.name}. Its coordinates are: ${Object.keys(o.coords).join(", ")}`)}};Wf(at,"registry",{}),Wf(at,"DEFAULT_FORMAT",{type:"functions",name:"color"});let z=at;function FS(e){let t=[e];for(let n=e;n=n.base;)t.push(n);return t}function Qg(e,{coords:t}={}){if(e.coords&&!e.coordGrammar){e.type||(e.type="function"),e.name||(e.name="color"),e.coordGrammar=Xg(e.coords);let n=Object.entries(t).map(([r,o],i)=>{let s=e.coordGrammar[i][0],l=o.range||o.refRange,a=s.range,u="";return s=="<percentage>"?(a=[0,100],u="%"):s=="<angle>"&&(u="deg"),{fromRange:l,toRange:a,suffix:u}});e.serializeCoords=(r,o)=>r.map((i,s)=>{let{fromRange:l,toRange:a,suffix:u}=n[s];return l&&a&&(i=df(l,a,i)),i=_l(i,o),u&&(i+=u),i})}return e}var vt=new z({id:"xyz-d65",name:"XYZ D65",coords:{x:{name:"X"},y:{name:"Y"},z:{name:"Z"}},white:"D65",formats:{color:{ids:["xyz-d65","xyz"]}},aliases:["xyz"]});class He extends z{constructor(t){t.coords||(t.coords={r:{range:[0,1],name:"Red"},g:{range:[0,1],name:"Green"},b:{range:[0,1],name:"Blue"}}),t.base||(t.base=vt),t.toXYZ_M&&t.fromXYZ_M&&(t.toBase??(t.toBase=n=>{let r=de(t.toXYZ_M,n);return this.white!==this.base.white&&(r=Cl(this.white,this.base.white,r)),r}),t.fromBase??(t.fromBase=n=>(n=Cl(this.base.white,this.white,n),de(t.fromXYZ_M,n)))),t.referred??(t.referred="display"),super(t)}}function Zg(e,{meta:t}={}){var r,o,i,s,l;let n={str:(r=String(e))==null?void 0:r.trim()};if(Dn.run("parse-start",n),n.color)return n.color;if(n.parsed=Wg(n.str),n.parsed){let a=n.parsed.name;if(a==="color"){let u=n.parsed.args.shift(),c=n.parsed.rawArgs.indexOf("/")>0?n.parsed.args.pop():1;for(let d of z.all){let m=d.getFormat("color");if(m&&(u===m.id||(o=m.ids)!=null&&o.includes(u))){const y=Object.keys(d.coords).map((v,x)=>n.parsed.args[x]||0);return t&&(t.formatId="color"),{spaceId:d.id,coords:y,alpha:c}}}let f="";if(u in z.registry){let d=(l=(s=(i=z.registry[u].formats)==null?void 0:i.functions)==null?void 0:s.color)==null?void 0:l.id;d&&(f=`Did you mean color(${d})?`)}throw new TypeError(`Cannot parse color(${u}). `+(f||"Missing a plugin?"))}else for(let u of z.all){let c=u.getFormat(a);if(c&&c.type==="function"){let f=1;(c.lastAlpha||Yg(n.parsed.args).alpha)&&(f=n.parsed.args.pop());let d=n.parsed.args,m;return c.coordGrammar&&(m=Object.entries(u.coords).map(([y,v],x)=>{var E;let h=c.coordGrammar[x],p=(E=d[x])==null?void 0:E.type,g=h.find(_=>_==p);if(!g){let _=v.name||y;throw new TypeError(`${p} not allowed for ${_} in ${a}()`)}let w=g.range;p==="<percentage>"&&(w||(w=[0,1]));let S=v.range||v.refRange;return w&&S&&(d[x]=df(w,S,d[x])),g})),t&&Object.assign(t,{formatId:c.name,types:m}),{spaceId:u.id,coords:d,alpha:f}}}}else for(let a of z.all)for(let u in a.formats){let c=a.formats[u];if(c.type!=="custom"||c.test&&!c.test(n.str))continue;let f=c.parse(n.str);if(f)return f.alpha??(f.alpha=1),t&&(t.formatId=u),f}throw new TypeError(`Could not parse ${e} as a color. Missing a plugin?`)}function Z(e){if(!e)throw new TypeError("Empty color reference");si(e)&&(e=Zg(e));let t=e.space||e.spaceId;return t instanceof z||(e.space=z.get(t)),e.alpha===void 0&&(e.alpha=1),e}function li(e,t){return t=z.get(t),t.from(e)}function wt(e,t){let{space:n,index:r}=z.resolveCoord(t,e.space);return li(e,n)[r]}function Kg(e,t,n){return t=z.get(t),e.coords=t.to(e.space,n),e}function zn(e,t,n){if(e=Z(e),arguments.length===2&&Fn(arguments[1])==="object"){let r=arguments[1];for(let o in r)zn(e,o,r[o])}else{typeof n=="function"&&(n=n(wt(e,t)));let{space:r,index:o}=z.resolveCoord(t,e.space),i=li(e,r);i[o]=n,Kg(e,r,i)}return e}var hf=new z({id:"xyz-d50",name:"XYZ D50",white:"D50",base:vt,fromBase:e=>Cl(vt.white,"D50",e),toBase:e=>Cl("D50",vt.white,e),formats:{color:{}}});const DS=216/24389,qg=24/116,Al=24389/27;let mf=Mt.D50;var st=new z({id:"lab",name:"Lab",coords:{l:{refRange:[0,100],name:"L"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:mf,base:hf,fromBase(e){let n=e.map((r,o)=>r/mf[o]).map(r=>r>DS?Math.cbrt(r):(Al*r+16)/116);return[116*n[1]-16,500*(n[0]-n[1]),200*(n[1]-n[2])]},toBase(e){let t=[];return t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200,[t[0]>qg?Math.pow(t[0],3):(116*t[0]-16)/Al,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/Al,t[2]>qg?Math.pow(t[2],3):(116*t[2]-16)/Al].map((r,o)=>r*mf[o])},formats:{lab:{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function $l(e){return(e%360+360)%360}function zS(e,t){if(e==="raw")return t;let[n,r]=t.map($l),o=r-n;return e==="increasing"?o<0&&(r+=360):e==="decreasing"?o>0&&(n+=360):e==="longer"?-180<o&&o<180&&(o>0?n+=360:r+=360):e==="shorter"&&(o>180?n+=360:o<-180&&(r+=360)),[n,r]}var ai=new z({id:"lch",name:"LCH",coords:{l:{refRange:[0,100],name:"Lightness"},c:{refRange:[0,150],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},base:st,fromBase(e){let[t,n,r]=e,o;const i=.02;return Math.abs(n)<i&&Math.abs(r)<i?o=NaN:o=Math.atan2(r,n)*180/Math.PI,[t,Math.sqrt(n**2+r**2),$l(o)]},toBase(e){let[t,n,r]=e;return n<0&&(n=0),isNaN(r)&&(r=0),[t,n*Math.cos(r*Math.PI/180),n*Math.sin(r*Math.PI/180)]},formats:{lch:{coords:["<number> | <percentage>","<number> | <percentage>","<number> | <angle>"]}}});const Jg=25**7,Tl=Math.PI,e1=180/Tl,Gr=Tl/180;function gf(e,t,{kL:n=1,kC:r=1,kH:o=1}={}){let[i,s,l]=st.from(e),a=ai.from(st,[i,s,l])[1],[u,c,f]=st.from(t),d=ai.from(st,[u,c,f])[1];a<0&&(a=0),d<0&&(d=0);let y=((a+d)/2)**7,v=.5*(1-Math.sqrt(y/(y+Jg))),x=(1+v)*s,h=(1+v)*c,p=Math.sqrt(x**2+l**2),g=Math.sqrt(h**2+f**2),w=x===0&&l===0?0:Math.atan2(l,x),S=h===0&&f===0?0:Math.atan2(f,h);w<0&&(w+=2*Tl),S<0&&(S+=2*Tl),w*=e1,S*=e1;let E=u-i,_=g-p,k=S-w,A=w+S,$=Math.abs(k),L;p*g===0?L=0:$<=180?L=k:k>180?L=k-360:k<-180?L=k+360:console.log("the unthinkable has happened");let j=2*Math.sqrt(g*p)*Math.sin(L*Gr/2),G=(i+u)/2,W=(p+g)/2,O=Math.pow(W,7),U;p*g===0?U=A:$<=180?U=A/2:A<360?U=(A+360)/2:U=(A-360)/2;let D=(G-50)**2,T=1+.015*D/Math.sqrt(20+D),I=1+.045*W,F=1;F-=.17*Math.cos((U-30)*Gr),F+=.24*Math.cos(2*U*Gr),F+=.32*Math.cos((3*U+6)*Gr),F-=.2*Math.cos((4*U-63)*Gr);let q=1+.015*W*F,pe=30*Math.exp(-1*((U-275)/25)**2),eo=2*Math.sqrt(O/(O+Jg)),an=-1*Math.sin(2*pe*Gr)*eo,Hn=(E/(n*T))**2;return Hn+=(_/(r*I))**2,Hn+=(j/(o*q))**2,Hn+=an*(_/(r*I))*(j/(o*q)),Math.sqrt(Hn)}const jS=75e-6;function ui(e,t=e.space,{epsilon:n=jS}={}){e=Z(e),t=z.get(t);let r=e.coords;return t!==e.space&&(r=t.from(e)),t.inGamut(r,{epsilon:n})}function ci(e){return{space:e.space,coords:e.coords.slice(),alpha:e.alpha}}function jn(e,{method:t=Bt.gamut_mapping,space:n=e.space}={}){if(si(arguments[1])&&(n=arguments[1]),n=z.get(n),ui(e,n,{epsilon:0}))return Z(e);let r=xt(e,n);if(t!=="clip"&&!ui(e,n)){let o=jn(ci(r),{method:"clip",space:n});if(gf(e,o)>2){let i=z.resolveCoord(t),s=i.space,l=i.id,a=xt(r,s),c=(i.range||i.refRange)[0],f=.01,d=c,m=wt(a,l);for(;m-d>f;){let y=ci(a);y=jn(y,{space:n,method:"clip"}),gf(a,y)-2<f?d=wt(a,l):m=wt(a,l),zn(a,l,(d+m)/2)}r=xt(a,n)}else r=o}if(t==="clip"||!ui(r,n,{epsilon:0})){let o=Object.values(n.coords).map(i=>i.range||[]);r.coords=r.coords.map((i,s)=>{let[l,a]=o[s];return l!==void 0&&(i=Math.max(l,i)),a!==void 0&&(i=Math.min(i,a)),i})}return n!==e.space&&(r=xt(r,e.space)),e.coords=r.coords,e}jn.returns="color";function xt(e,t,{inGamut:n}={}){e=Z(e),t=z.get(t);let r=t.from(e),o={space:t,coords:r,alpha:e.alpha};return n&&(o=jn(o)),o}xt.returns="color";function Pl(e,{precision:t=Bt.precision,format:n="default",inGamut:r=!0,...o}={}){var a;let i;e=Z(e);let s=n;n=e.space.getFormat(n)??e.space.getFormat("default")??z.DEFAULT_FORMAT,r||(r=n.toGamut);let l=e.coords;if(l=l.map(u=>u||0),r&&!ui(e)&&(l=jn(ci(e),r===!0?void 0:r).coords),n.type==="custom")if(o.precision=t,n.serialize)i=n.serialize(l,e.alpha,o);else throw new TypeError(`format ${s} can only be used to parse colors, not for serialization`);else{let u=n.name||"color";n.serializeCoords?l=n.serializeCoords(l,t):t!==null&&(l=l.map(m=>_l(m,t)));let c=[...l];if(u==="color"){let m=n.id||((a=n.ids)==null?void 0:a[0])||e.space.id;c.unshift(m)}let f=e.alpha;t!==null&&(f=_l(f,t));let d=e.alpha<1&&!n.noAlpha?`${n.commas?",":" /"} ${f}`:"";i=`${u}(${c.join(n.commas?", ":" ")}${d})`}return i}const BS=[[.6369580483012914,.14461690358620832,.1688809751641721],[.2627002120112671,.6779980715188708,.05930171646986196],[0,.028072693049087428,1.060985057710791]],US=[[1.716651187971268,-.355670783776392,-.25336628137366],[-.666684351832489,1.616481236634939,.0157685458139111],[.017639857445311,-.042770613257809,.942103121235474]];var Ml=new He({id:"rec2020-linear",name:"Linear REC.2020",white:"D65",toXYZ_M:BS,fromXYZ_M:US,formats:{color:{}}});const Rl=1.09929682680944,t1=.018053968510807;var n1=new He({id:"rec2020",name:"REC.2020",base:Ml,toBase(e){return e.map(function(t){return t<t1*4.5?t/4.5:Math.pow((t+Rl-1)/Rl,1/.45)})},fromBase(e){return e.map(function(t){return t>=t1?Rl*Math.pow(t,.45)-(Rl-1):4.5*t})},formats:{color:{}}});const HS=[[.4865709486482162,.26566769316909306,.1982172852343625],[.2289745640697488,.6917385218365064,.079286914093745],[0,.04511338185890264,1.043944368900976]],VS=[[2.493496911941425,-.9313836179191239,-.40271078445071684],[-.8294889695615747,1.7626640603183463,.023624685841943577],[.03584583024378447,-.07617238926804182,.9568845240076872]];var r1=new He({id:"p3-linear",name:"Linear P3",white:"D65",toXYZ_M:HS,fromXYZ_M:VS});const WS=[[.41239079926595934,.357584339383878,.1804807884018343],[.21263900587151027,.715168678767756,.07219231536073371],[.01933081871559182,.11919477979462598,.9505321522496607]],YS=[[3.2409699419045226,-1.537383177570094,-.4986107602930034],[-.9692436362808796,1.8759675015077202,.04155505740717559],[.05563007969699366,-.20397695888897652,1.0569715142428786]];var o1=new He({id:"srgb-linear",name:"Linear sRGB",white:"D65",toXYZ_M:WS,fromXYZ_M:YS,formats:{color:{}}}),i1={aliceblue:[240/255,248/255,1],antiquewhite:[250/255,235/255,215/255],aqua:[0,1,1],aquamarine:[127/255,1,212/255],azure:[240/255,1,1],beige:[245/255,245/255,220/255],bisque:[1,228/255,196/255],black:[0,0,0],blanchedalmond:[1,235/255,205/255],blue:[0,0,1],blueviolet:[138/255,43/255,226/255],brown:[165/255,42/255,42/255],burlywood:[222/255,184/255,135/255],cadetblue:[95/255,158/255,160/255],chartreuse:[127/255,1,0],chocolate:[210/255,105/255,30/255],coral:[1,127/255,80/255],cornflowerblue:[100/255,149/255,237/255],cornsilk:[1,248/255,220/255],crimson:[220/255,20/255,60/255],cyan:[0,1,1],darkblue:[0,0,139/255],darkcyan:[0,139/255,139/255],darkgoldenrod:[184/255,134/255,11/255],darkgray:[169/255,169/255,169/255],darkgreen:[0,100/255,0],darkgrey:[169/255,169/255,169/255],darkkhaki:[189/255,183/255,107/255],darkmagenta:[139/255,0,139/255],darkolivegreen:[85/255,107/255,47/255],darkorange:[1,140/255,0],darkorchid:[153/255,50/255,204/255],darkred:[139/255,0,0],darksalmon:[233/255,150/255,122/255],darkseagreen:[143/255,188/255,143/255],darkslateblue:[72/255,61/255,139/255],darkslategray:[47/255,79/255,79/255],darkslategrey:[47/255,79/255,79/255],darkturquoise:[0,206/255,209/255],darkviolet:[148/255,0,211/255],deeppink:[1,20/255,147/255],deepskyblue:[0,191/255,1],dimgray:[105/255,105/255,105/255],dimgrey:[105/255,105/255,105/255],dodgerblue:[30/255,144/255,1],firebrick:[178/255,34/255,34/255],floralwhite:[1,250/255,240/255],forestgreen:[34/255,139/255,34/255],fuchsia:[1,0,1],gainsboro:[220/255,220/255,220/255],ghostwhite:[248/255,248/255,1],gold:[1,215/255,0],goldenrod:[218/255,165/255,32/255],gray:[128/255,128/255,128/255],green:[0,128/255,0],greenyellow:[173/255,1,47/255],grey:[128/255,128/255,128/255],honeydew:[240/255,1,240/255],hotpink:[1,105/255,180/255],indianred:[205/255,92/255,92/255],indigo:[75/255,0,130/255],ivory:[1,1,240/255],khaki:[240/255,230/255,140/255],lavender:[230/255,230/255,250/255],lavenderblush:[1,240/255,245/255],lawngreen:[124/255,252/255,0],lemonchiffon:[1,250/255,205/255],lightblue:[173/255,216/255,230/255],lightcoral:[240/255,128/255,128/255],lightcyan:[224/255,1,1],lightgoldenrodyellow:[250/255,250/255,210/255],lightgray:[211/255,211/255,211/255],lightgreen:[144/255,238/255,144/255],lightgrey:[211/255,211/255,211/255],lightpink:[1,182/255,193/255],lightsalmon:[1,160/255,122/255],lightseagreen:[32/255,178/255,170/255],lightskyblue:[135/255,206/255,250/255],lightslategray:[119/255,136/255,153/255],lightslategrey:[119/255,136/255,153/255],lightsteelblue:[176/255,196/255,222/255],lightyellow:[1,1,224/255],lime:[0,1,0],limegreen:[50/255,205/255,50/255],linen:[250/255,240/255,230/255],magenta:[1,0,1],maroon:[128/255,0,0],mediumaquamarine:[102/255,205/255,170/255],mediumblue:[0,0,205/255],mediumorchid:[186/255,85/255,211/255],mediumpurple:[147/255,112/255,219/255],mediumseagreen:[60/255,179/255,113/255],mediumslateblue:[123/255,104/255,238/255],mediumspringgreen:[0,250/255,154/255],mediumturquoise:[72/255,209/255,204/255],mediumvioletred:[199/255,21/255,133/255],midnightblue:[25/255,25/255,112/255],mintcream:[245/255,1,250/255],mistyrose:[1,228/255,225/255],moccasin:[1,228/255,181/255],navajowhite:[1,222/255,173/255],navy:[0,0,128/255],oldlace:[253/255,245/255,230/255],olive:[128/255,128/255,0],olivedrab:[107/255,142/255,35/255],orange:[1,165/255,0],orangered:[1,69/255,0],orchid:[218/255,112/255,214/255],palegoldenrod:[238/255,232/255,170/255],palegreen:[152/255,251/255,152/255],paleturquoise:[175/255,238/255,238/255],palevioletred:[219/255,112/255,147/255],papayawhip:[1,239/255,213/255],peachpuff:[1,218/255,185/255],peru:[205/255,133/255,63/255],pink:[1,192/255,203/255],plum:[221/255,160/255,221/255],powderblue:[176/255,224/255,230/255],purple:[128/255,0,128/255],rebeccapurple:[102/255,51/255,153/255],red:[1,0,0],rosybrown:[188/255,143/255,143/255],royalblue:[65/255,105/255,225/255],saddlebrown:[139/255,69/255,19/255],salmon:[250/255,128/255,114/255],sandybrown:[244/255,164/255,96/255],seagreen:[46/255,139/255,87/255],seashell:[1,245/255,238/255],sienna:[160/255,82/255,45/255],silver:[192/255,192/255,192/255],skyblue:[135/255,206/255,235/255],slateblue:[106/255,90/255,205/255],slategray:[112/255,128/255,144/255],slategrey:[112/255,128/255,144/255],snow:[1,250/255,250/255],springgreen:[0,1,127/255],steelblue:[70/255,130/255,180/255],tan:[210/255,180/255,140/255],teal:[0,128/255,128/255],thistle:[216/255,191/255,216/255],tomato:[1,99/255,71/255],turquoise:[64/255,224/255,208/255],violet:[238/255,130/255,238/255],wheat:[245/255,222/255,179/255],white:[1,1,1],whitesmoke:[245/255,245/255,245/255],yellow:[1,1,0],yellowgreen:[154/255,205/255,50/255]};let s1=Array(3).fill("<percentage> | <number>[0, 255]"),l1=Array(3).fill("<number>[0, 255]");var fi=new He({id:"srgb",name:"sRGB",base:o1,fromBase:e=>e.map(t=>{let n=t<0?-1:1,r=t*n;return r>.0031308?n*(1.055*r**(1/2.4)-.055):12.92*t}),toBase:e=>e.map(t=>{let n=t<0?-1:1,r=t*n;return r<.04045?t/12.92:n*((r+.055)/1.055)**2.4}),formats:{rgb:{coords:s1},rgb_number:{name:"rgb",commas:!0,coords:l1,noAlpha:!0},color:{},rgba:{coords:s1,commas:!0,lastAlpha:!0},rgba_number:{name:"rgba",commas:!0,coords:l1},hex:{type:"custom",toGamut:!0,test:e=>/^#([a-f0-9]{3,4}){1,2}$/i.test(e),parse(e){e.length<=5&&(e=e.replace(/[a-f0-9]/gi,"$&$&"));let t=[];return e.replace(/[a-f0-9]{2}/gi,n=>{t.push(parseInt(n,16)/255)}),{spaceId:"srgb",coords:t.slice(0,3),alpha:t.slice(3)[0]}},serialize:(e,t,{collapse:n=!0}={})=>{t<1&&e.push(t),e=e.map(i=>Math.round(i*255));let r=n&&e.every(i=>i%17===0);return"#"+e.map(i=>r?(i/17).toString(16):i.toString(16).padStart(2,"0")).join("")}},keyword:{type:"custom",test:e=>/^[a-z]+$/i.test(e),parse(e){e=e.toLowerCase();let t={spaceId:"srgb",coords:null,alpha:1};if(e==="transparent"?(t.coords=i1.black,t.alpha=0):t.coords=i1[e],t.coords)return t}}}}),a1=new He({id:"p3",name:"P3",base:r1,fromBase:fi.fromBase,toBase:fi.toBase,formats:{color:{id:"display-p3"}}});if(Bt.display_space=fi,typeof CSS<"u"&&CSS.supports)for(let e of[st,n1,a1]){let t=e.getMinCoords(),r=Pl({space:e,coords:t,alpha:1});if(CSS.supports("color",r)){Bt.display_space=e;break}}function GS(e,{space:t=Bt.display_space,...n}={}){let r=Pl(e,n);if(typeof CSS>"u"||CSS.supports("color",r)||!Bt.display_space)r=new String(r),r.color=e;else{let o=xt(e,t);r=new String(Pl(o,n)),r.color=o}return r}function u1(e,t,n="lab"){n=z.get(n);let r=n.from(e),o=n.from(t);return Math.sqrt(r.reduce((i,s,l)=>{let a=o[l];return isNaN(s)||isNaN(a)?i:i+(a-s)**2},0))}function XS(e,t){return e=Z(e),t=Z(t),e.space===t.space&&e.alpha===t.alpha&&e.coords.every((n,r)=>n===t.coords[r])}function Bn(e){return wt(e,[vt,"y"])}function c1(e,t){zn(e,[vt,"y"],t)}function QS(e){Object.defineProperty(e.prototype,"luminance",{get(){return Bn(this)},set(t){c1(this,t)}})}var ZS=Object.freeze({__proto__:null,getLuminance:Bn,register:QS,setLuminance:c1});function KS(e,t){e=Z(e),t=Z(t);let n=Math.max(Bn(e),0),r=Math.max(Bn(t),0);return r>n&&([n,r]=[r,n]),(n+.05)/(r+.05)}const qS=.56,JS=.57,ek=.62,tk=.65,f1=.022,nk=1.414,rk=.1,ok=5e-4,ik=1.14,d1=.027,sk=1.14;function p1(e){return e>=f1?e:e+(f1-e)**nk}function Xr(e){let t=e<0?-1:1,n=Math.abs(e);return t*Math.pow(n,2.4)}function lk(e,t){t=Z(t),e=Z(e);let n,r,o,i,s,l;t=xt(t,"srgb"),[i,s,l]=t.coords;let a=Xr(i)*.2126729+Xr(s)*.7151522+Xr(l)*.072175;e=xt(e,"srgb"),[i,s,l]=e.coords;let u=Xr(i)*.2126729+Xr(s)*.7151522+Xr(l)*.072175,c=p1(a),f=p1(u),d=f>c;return Math.abs(f-c)<ok?r=0:d?(n=f**qS-c**JS,r=n*ik):(n=f**tk-c**ek,r=n*sk),Math.abs(r)<rk?o=0:r>0?o=r-d1:o=r+d1,o*100}function ak(e,t){e=Z(e),t=Z(t);let n=Math.max(Bn(e),0),r=Math.max(Bn(t),0);r>n&&([n,r]=[r,n]);let o=n+r;return o===0?0:(n-r)/o}const uk=5e4;function ck(e,t){e=Z(e),t=Z(t);let n=Math.max(Bn(e),0),r=Math.max(Bn(t),0);return r>n&&([n,r]=[r,n]),r===0?uk:(n-r)/r}function fk(e,t){e=Z(e),t=Z(t);let n=wt(e,[st,"l"]),r=wt(t,[st,"l"]);return Math.abs(n-r)}const dk=216/24389,h1=24/116,Nl=24389/27;let yf=Mt.D65;var vf=new z({id:"lab-d65",name:"Lab D65",coords:{l:{refRange:[0,100],name:"L"},a:{refRange:[-125,125]},b:{refRange:[-125,125]}},white:yf,base:vt,fromBase(e){let n=e.map((r,o)=>r/yf[o]).map(r=>r>dk?Math.cbrt(r):(Nl*r+16)/116);return[116*n[1]-16,500*(n[0]-n[1]),200*(n[1]-n[2])]},toBase(e){let t=[];return t[1]=(e[0]+16)/116,t[0]=e[1]/500+t[1],t[2]=t[1]-e[2]/200,[t[0]>h1?Math.pow(t[0],3):(116*t[0]-16)/Nl,e[0]>8?Math.pow((e[0]+16)/116,3):e[0]/Nl,t[2]>h1?Math.pow(t[2],3):(116*t[2]-16)/Nl].map((r,o)=>r*yf[o])},formats:{"lab-d65":{coords:["<number> | <percentage>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});const wf=Math.pow(5,.5)*.5+.5;function pk(e,t){e=Z(e),t=Z(t);let n=wt(e,[vf,"l"]),r=wt(t,[vf,"l"]),o=Math.abs(Math.pow(n,wf)-Math.pow(r,wf)),i=Math.pow(o,1/wf)*Math.SQRT2-40;return i<7.5?0:i}var bl=Object.freeze({__proto__:null,contrastAPCA:lk,contrastDeltaPhi:pk,contrastLstar:fk,contrastMichelson:ak,contrastWCAG21:KS,contrastWeber:ck});function hk(e,t,n={}){si(n)&&(n={algorithm:n});let{algorithm:r,...o}=n;if(!r){let i=Object.keys(bl).map(s=>s.replace(/^contrast/,"")).join(", ");throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${i}`)}e=Z(e),t=Z(t);for(let i in bl)if("contrast"+r.toLowerCase()===i.toLowerCase())return bl[i](e,t,o);throw new TypeError(`Unknown contrast algorithm: ${r}`)}function m1(e){let[t,n,r]=li(e,vt),o=t+15*n+3*r;return[4*t/o,9*n/o]}function g1(e){let[t,n,r]=li(e,vt),o=t+n+r;return[t/o,n/o]}function mk(e){Object.defineProperty(e.prototype,"uv",{get(){return m1(this)}}),Object.defineProperty(e.prototype,"xy",{get(){return g1(this)}})}var gk=Object.freeze({__proto__:null,register:mk,uv:m1,xy:g1});function yk(e,t){return u1(e,t,"lab")}const y1=Math.PI/180;function vk(e,t,{l:n=2,c:r=1}={}){let[o,i,s]=st.from(e),[,l,a]=ai.from(st,[o,i,s]),[u,c,f]=st.from(t),d=ai.from(st,[u,c,f])[1];l<0&&(l=0),d<0&&(d=0);let m=o-u,y=l-d,v=i-c,x=s-f,h=v**2+x**2-y**2,p=.511;o>=16&&(p=.040975*o/(1+.01765*o));let g=.0638*l/(1+.0131*l)+.638,w;Number.isNaN(a)&&(a=0),a>=164&&a<=345?w=.56+Math.abs(.2*Math.cos((a+168)*y1)):w=.36+Math.abs(.4*Math.cos((a+35)*y1));let S=Math.pow(l,4),E=Math.sqrt(S/(S+1900)),_=g*(E*w+1-E),k=(m/(n*p))**2;return k+=(y/(r*g))**2,k+=h/_**2,Math.sqrt(k)}const v1=203;var xf=new z({id:"xyz-abs-d65",name:"Absolute XYZ D65",coords:{x:{refRange:[0,9504.7],name:"Xa"},y:{refRange:[0,1e4],name:"Ya"},z:{refRange:[0,10888.3],name:"Za"}},base:vt,fromBase(e){return e.map(t=>Math.max(t*v1,0))},toBase(e){return e.map(t=>Math.max(t/v1,0))}});const Ol=1.15,Ll=.66,w1=2610/2**14,wk=2**14/2610,x1=3424/2**12,S1=2413/2**7,k1=2392/2**7,xk=1.7*2523/2**5,_1=2**5/(1.7*2523),Il=-.56,Sf=16295499532821565e-27,Sk=[[.41478972,.579999,.014648],[-.20151,1.120649,.0531008],[-.0166008,.2648,.6684799]],kk=[[1.9242264357876067,-1.0047923125953657,.037651404030618],[.35031676209499907,.7264811939316552,-.06538442294808501],[-.09098281098284752,-.3127282905230739,1.5227665613052603]],_k=[[.5,.5,0],[3.524,-4.066708,.542708],[.199076,1.096799,-1.295875]],Ek=[[1,.1386050432715393,.05804731615611886],[.9999999999999999,-.1386050432715393,-.05804731615611886],[.9999999999999998,-.09601924202631895,-.8118918960560388]];var E1=new z({id:"jzazbz",name:"Jzazbz",coords:{jz:{refRange:[0,1],name:"Jz"},az:{refRange:[-.5,.5]},bz:{refRange:[-.5,.5]}},base:xf,fromBase(e){let[t,n,r]=e,o=Ol*t-(Ol-1)*r,i=Ll*n-(Ll-1)*t,l=de(Sk,[o,i,r]).map(function(d){let m=x1+S1*(d/1e4)**w1,y=1+k1*(d/1e4)**w1;return(m/y)**xk}),[a,u,c]=de(_k,l);return[(1+Il)*a/(1+Il*a)-Sf,u,c]},toBase(e){let[t,n,r]=e,o=(t+Sf)/(1+Il-Il*(t+Sf)),s=de(Ek,[o,n,r]).map(function(d){let m=x1-d**_1,y=k1*d**_1-S1;return 1e4*(m/y)**wk}),[l,a,u]=de(kk,s),c=(l+(Ol-1)*u)/Ol,f=(a+(Ll-1)*c)/Ll;return[c,f,u]},formats:{color:{}}}),kf=new z({id:"jzczhz",name:"JzCzHz",coords:{jz:{refRange:[0,1],name:"Jz"},cz:{refRange:[0,1],name:"Chroma"},hz:{refRange:[0,360],type:"angle",name:"Hue"}},base:E1,fromBase(e){let[t,n,r]=e,o;const i=2e-4;return Math.abs(n)<i&&Math.abs(r)<i?o=NaN:o=Math.atan2(r,n)*180/Math.PI,[t,Math.sqrt(n**2+r**2),$l(o)]},toBase(e){return[e[0],e[1]*Math.cos(e[2]*Math.PI/180),e[1]*Math.sin(e[2]*Math.PI/180)]},formats:{color:{}}});function Ck(e,t){let[n,r,o]=kf.from(e),[i,s,l]=kf.from(t),a=n-i,u=r-s;Number.isNaN(o)&&Number.isNaN(l)?(o=0,l=0):Number.isNaN(o)?o=l:Number.isNaN(l)&&(l=o);let c=o-l,f=2*Math.sqrt(r*s)*Math.sin(c/2*(Math.PI/180));return Math.sqrt(a**2+u**2+f**2)}const C1=3424/4096,A1=2413/128,$1=2392/128,T1=2610/16384,Ak=2523/32,$k=16384/2610,P1=32/2523,Tk=[[.3592,.6976,-.0358],[-.1922,1.1004,.0755],[.007,.0749,.8434]],Pk=[[2048/4096,2048/4096,0],[6610/4096,-13613/4096,7003/4096],[17933/4096,-17390/4096,-543/4096]],Mk=[[.9999888965628402,.008605050147287059,.11103437159861648],[1.00001110343716,-.008605050147287059,-.11103437159861648],[1.0000320633910054,.56004913547279,-.3206339100541203]],Rk=[[2.0701800566956137,-1.326456876103021,.20661600684785517],[.3649882500326575,.6804673628522352,-.04542175307585323],[-.04959554223893211,-.04942116118675749,1.1879959417328034]];var _f=new z({id:"ictcp",name:"ICTCP",coords:{i:{refRange:[0,1],name:"I"},ct:{refRange:[-.5,.5],name:"CT"},cp:{refRange:[-.5,.5],name:"CP"}},base:xf,fromBase(e){let t=de(Tk,e);return Nk(t)},toBase(e){let t=bk(e);return de(Rk,t)},formats:{color:{}}});function Nk(e){let t=e.map(function(n){let r=C1+A1*(n/1e4)**T1,o=1+$1*(n/1e4)**T1;return(r/o)**Ak});return de(Pk,t)}function bk(e){return de(Mk,e).map(function(r){let o=Math.max(r**P1-C1,0),i=A1-$1*r**P1;return 1e4*(o/i)**$k})}function Ok(e,t){let[n,r,o]=_f.from(e),[i,s,l]=_f.from(t);return 720*Math.sqrt((n-i)**2+.25*(r-s)**2+(o-l)**2)}const Lk=[[.8190224432164319,.3619062562801221,-.12887378261216414],[.0329836671980271,.9292868468965546,.03614466816999844],[.048177199566046255,.26423952494422764,.6335478258136937]],Ik=[[1.2268798733741557,-.5578149965554813,.28139105017721583],[-.04057576262431372,1.1122868293970594,-.07171106666151701],[-.07637294974672142,-.4214933239627914,1.5869240244272418]],Fk=[[.2104542553,.793617785,-.0040720468],[1.9779984951,-2.428592205,.4505937099],[.0259040371,.7827717662,-.808675766]],Dk=[[.9999999984505198,.39633779217376786,.2158037580607588],[1.0000000088817609,-.10556134232365635,-.06385417477170591],[1.0000000546724108,-.08948418209496575,-1.2914855378640917]];var Fl=new z({id:"oklab",name:"Oklab",coords:{l:{refRange:[0,1],name:"L"},a:{refRange:[-.4,.4]},b:{refRange:[-.4,.4]}},white:"D65",base:vt,fromBase(e){let n=de(Lk,e).map(r=>Math.cbrt(r));return de(Fk,n)},toBase(e){let n=de(Dk,e).map(r=>r**3);return de(Ik,n)},formats:{oklab:{coords:["<percentage> | <number>","<number> | <percentage>[-1,1]","<number> | <percentage>[-1,1]"]}}});function zk(e,t){let[n,r,o]=Fl.from(e),[i,s,l]=Fl.from(t),a=n-i,u=r-s,c=o-l;return Math.sqrt(a**2+u**2+c**2)}var Dl={deltaE76:yk,deltaECMC:vk,deltaE2000:gf,deltaEJz:Ck,deltaEITP:Ok,deltaEOK:zk};function di(e,t,n={}){si(n)&&(n={method:n});let{method:r=Bt.deltaE,...o}=n;e=Z(e),t=Z(t);for(let i in Dl)if("deltae"+r.toLowerCase()===i.toLowerCase())return Dl[i](e,t,o);throw new TypeError(`Unknown deltaE method: ${r}`)}function jk(e,t=.25){let r=[z.get("oklch","lch"),"l"];return zn(e,r,o=>o*(1+t))}function Bk(e,t=.25){let r=[z.get("oklch","lch"),"l"];return zn(e,r,o=>o*(1-t))}var Uk=Object.freeze({__proto__:null,darken:Bk,lighten:jk});function M1(e,t,n=.5,r={}){[e,t]=[Z(e),Z(t)],Fn(n)==="object"&&([n,r]=[.5,n]);let{space:o,outputSpace:i,premultiplied:s}=r;return pi(e,t,{space:o,outputSpace:i,premultiplied:s})(n)}function R1(e,t,n={}){let r;Ef(e)&&([r,n]=[e,t],[e,t]=r.rangeArgs.colors);let{maxDeltaE:o,deltaEMethod:i,steps:s=2,maxSteps:l=1e3,...a}=n;r||([e,t]=[Z(e),Z(t)],r=pi(e,t,a));let u=di(e,t),c=o>0?Math.max(s,Math.ceil(u/o)+1):s,f=[];if(l!==void 0&&(c=Math.min(c,l)),c===1)f=[{p:.5,color:r(.5)}];else{let d=1/(c-1);f=Array.from({length:c},(m,y)=>{let v=y*d;return{p:v,color:r(v)}})}if(o>0){let d=f.reduce((m,y,v)=>{if(v===0)return 0;let x=di(y.color,f[v-1].color,i);return Math.max(m,x)},0);for(;d>o;){d=0;for(let m=1;m<f.length&&f.length<l;m++){let y=f[m-1],v=f[m],x=(v.p+y.p)/2,h=r(x);d=Math.max(d,di(h,y.color),di(h,v.color)),f.splice(m,0,{p:x,color:r(x)}),m++}}}return f=f.map(d=>d.color),f}function pi(e,t,n={}){if(Ef(e)){let[a,u]=[e,t];return pi(...a.rangeArgs.colors,{...a.rangeArgs.options,...u})}let{space:r,outputSpace:o,progression:i,premultiplied:s}=n;e=Z(e),t=Z(t),e=ci(e),t=ci(t);let l={colors:[e,t],options:n};if(r?r=z.get(r):r=z.registry[Bt.interpolationSpace]||e.space,o=o?z.get(o):r,e=xt(e,r),t=xt(t,r),e=jn(e),t=jn(t),r.coords.h&&r.coords.h.type==="angle"){let a=n.hue=n.hue||"shorter",u=[r,"h"],[c,f]=[wt(e,u),wt(t,u)];[c,f]=zS(a,[c,f]),zn(e,u,c),zn(t,u,f)}return s&&(e.coords=e.coords.map(a=>a*e.alpha),t.coords=t.coords.map(a=>a*t.alpha)),Object.assign(a=>{a=i?i(a):a;let u=e.coords.map((d,m)=>{let y=t.coords[m];return El(d,y,a)}),c=El(e.alpha,t.alpha,a),f={space:r,coords:u,alpha:c};return s&&(f.coords=f.coords.map(d=>d/c)),o!==r&&(f=xt(f,o)),f},{rangeArgs:l})}function Ef(e){return Fn(e)==="function"&&!!e.rangeArgs}Bt.interpolationSpace="lab";function Hk(e){e.defineFunction("mix",M1,{returns:"color"}),e.defineFunction("range",pi,{returns:"function<color>"}),e.defineFunction("steps",R1,{returns:"array<color>"})}var Vk=Object.freeze({__proto__:null,isRange:Ef,mix:M1,range:pi,register:Hk,steps:R1}),N1=new z({id:"hsl",name:"HSL",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},l:{range:[0,100],name:"Lightness"}},base:fi,fromBase:e=>{let t=Math.max(...e),n=Math.min(...e),[r,o,i]=e,[s,l,a]=[NaN,0,(n+t)/2],u=t-n;if(u!==0){switch(l=a===0||a===1?0:(t-a)/Math.min(a,1-a),t){case r:s=(o-i)/u+(o<i?6:0);break;case o:s=(i-r)/u+2;break;case i:s=(r-o)/u+4}s=s*60}return[s,l*100,a*100]},toBase:e=>{let[t,n,r]=e;t=t%360,t<0&&(t+=360),n/=100,r/=100;function o(i){let s=(i+t/30)%12,l=n*Math.min(r,1-r);return r-l*Math.max(-1,Math.min(s-3,9-s,1))}return[o(0),o(8),o(4)]},formats:{hsl:{toGamut:!0,coords:["<number> | <angle>","<percentage>","<percentage>"]},hsla:{coords:["<number> | <angle>","<percentage>","<percentage>"],commas:!0,lastAlpha:!0}}}),b1=new z({id:"hsv",name:"HSV",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},s:{range:[0,100],name:"Saturation"},v:{range:[0,100],name:"Value"}},base:N1,fromBase(e){let[t,n,r]=e;n/=100,r/=100;let o=r+n*Math.min(r,1-r);return[t,o===0?0:200*(1-r/o),100*o]},toBase(e){let[t,n,r]=e;n/=100,r/=100;let o=r*(1-n/2);return[t,o===0||o===1?0:(r-o)/Math.min(o,1-o)*100,o*100]},formats:{color:{toGamut:!0}}}),Wk=new z({id:"hwb",name:"HWB",coords:{h:{refRange:[0,360],type:"angle",name:"Hue"},w:{range:[0,100],name:"Whiteness"},b:{range:[0,100],name:"Blackness"}},base:b1,fromBase(e){let[t,n,r]=e;return[t,r*(100-n)/100,100-r]},toBase(e){let[t,n,r]=e;n/=100,r/=100;let o=n+r;if(o>=1){let l=n/o;return[t,0,l*100]}let i=1-r,s=i===0?0:1-n/i;return[t,s*100,i*100]},formats:{hwb:{toGamut:!0,coords:["<number> | <angle>","<percentage>","<percentage>"]}}});const Yk=[[.5766690429101305,.1855582379065463,.1882286462349947],[.29734497525053605,.6273635662554661,.07529145849399788],[.02703136138641234,.07068885253582723,.9913375368376388]],Gk=[[2.0415879038107465,-.5650069742788596,-.34473135077832956],[-.9692436362808795,1.8759675015077202,.04155505740717557],[.013444280632031142,-.11836239223101838,1.0151749943912054]];var O1=new He({id:"a98rgb-linear",name:"Linear Adobe® 98 RGB compatible",white:"D65",toXYZ_M:Yk,fromXYZ_M:Gk}),Xk=new He({id:"a98rgb",name:"Adobe® 98 RGB compatible",base:O1,toBase:e=>e.map(t=>Math.pow(Math.abs(t),563/256)*Math.sign(t)),fromBase:e=>e.map(t=>Math.pow(Math.abs(t),256/563)*Math.sign(t)),formats:{color:{id:"a98-rgb"}}});const Qk=[[.7977604896723027,.13518583717574031,.0313493495815248],[.2880711282292934,.7118432178101014,8565396060525902e-20],[0,0,.8251046025104601]],Zk=[[1.3457989731028281,-.25558010007997534,-.05110628506753401],[-.5446224939028347,1.5082327413132781,.02053603239147973],[0,0,1.2119675456389454]];var L1=new He({id:"prophoto-linear",name:"Linear ProPhoto",white:"D50",base:hf,toXYZ_M:Qk,fromXYZ_M:Zk});const Kk=1/512,qk=16/512;var Jk=new He({id:"prophoto",name:"ProPhoto",base:L1,toBase(e){return e.map(t=>t<qk?t/16:t**1.8)},fromBase(e){return e.map(t=>t>=Kk?t**(1/1.8):16*t)},formats:{color:{id:"prophoto-rgb"}}}),e_=new z({id:"oklch",name:"Oklch",coords:{l:{refRange:[0,1],name:"Lightness"},c:{refRange:[0,.4],name:"Chroma"},h:{refRange:[0,360],type:"angle",name:"Hue"}},white:"D65",base:Fl,fromBase(e){let[t,n,r]=e,o;const i=2e-4;return Math.abs(n)<i&&Math.abs(r)<i?o=NaN:o=Math.atan2(r,n)*180/Math.PI,[t,Math.sqrt(n**2+r**2),$l(o)]},toBase(e){let[t,n,r]=e,o,i;return isNaN(r)?(o=0,i=0):(o=n*Math.cos(r*Math.PI/180),i=n*Math.sin(r*Math.PI/180)),[t,o,i]},formats:{oklch:{coords:["<number> | <percentage>","<number> | <percentage>[0,1]","<number> | <angle>"]}}});const I1=203,F1=2610/2**14,t_=2**14/2610,n_=2523/2**5,D1=2**5/2523,z1=3424/2**12,j1=2413/2**7,B1=2392/2**7;var r_=new He({id:"rec2100pq",name:"REC.2100-PQ",base:Ml,toBase(e){return e.map(function(t){return(Math.max(t**D1-z1,0)/(j1-B1*t**D1))**t_*1e4/I1})},fromBase(e){return e.map(function(t){let n=Math.max(t*I1/1e4,0),r=z1+j1*n**F1,o=1+B1*n**F1;return(r/o)**n_})},formats:{color:{id:"rec2100-pq"}}});const U1=.17883277,H1=.28466892,V1=.55991073,Cf=3.7743;var o_=new He({id:"rec2100hlg",cssid:"rec2100-hlg",name:"REC.2100-HLG",referred:"scene",base:Ml,toBase(e){return e.map(function(t){return t<=.5?t**2/3*Cf:(Math.exp((t-V1)/U1)+H1)/12*Cf})},fromBase(e){return e.map(function(t){return t/=Cf,t<=1/12?Math.sqrt(3*t):U1*Math.log(12*t-H1)+V1})},formats:{color:{id:"rec2100-hlg"}}});const W1={};Dn.add("chromatic-adaptation-start",e=>{e.options.method&&(e.M=Y1(e.W1,e.W2,e.options.method))}),Dn.add("chromatic-adaptation-end",e=>{e.M||(e.M=Y1(e.W1,e.W2,e.options.method))});function zl({id:e,toCone_M:t,fromCone_M:n}){W1[e]=arguments[0]}function Y1(e,t,n="Bradford"){let r=W1[n],[o,i,s]=de(r.toCone_M,e),[l,a,u]=de(r.toCone_M,t),c=[[l/o,0,0],[0,a/i,0],[0,0,u/s]],f=de(c,r.toCone_M);return de(r.fromCone_M,f)}zl({id:"von Kries",toCone_M:[[.40024,.7076,-.08081],[-.2263,1.16532,.0457],[0,0,.91822]],fromCone_M:[[1.8599364,-1.1293816,.2198974],[.3611914,.6388125,-64e-7],[0,0,1.0890636]]}),zl({id:"Bradford",toCone_M:[[.8951,.2664,-.1614],[-.7502,1.7135,.0367],[.0389,-.0685,1.0296]],fromCone_M:[[.9869929,-.1470543,.1599627],[.4323053,.5183603,.0492912],[-.0085287,.0400428,.9684867]]}),zl({id:"CAT02",toCone_M:[[.7328,.4296,-.1624],[-.7036,1.6975,.0061],[.003,.0136,.9834]],fromCone_M:[[1.0961238,-.278869,.1827452],[.454369,.4735332,.0720978],[-.0096276,-.005698,1.0153256]]}),zl({id:"CAT16",toCone_M:[[.401288,.650173,-.051461],[-.250268,1.204414,.045854],[-.002079,.048952,.953127]],fromCone_M:[[1.862067855087233,-1.011254630531685,.1491867754444518],[.3875265432361372,.6214474419314753,-.008973985167612518],[-.01584149884933386,-.03412293802851557,1.04996443687785]]}),Object.assign(Mt,{A:[1.0985,1,.35585],C:[.98074,1,1.18232],D55:[.95682,1,.92149],D75:[.94972,1,1.22638],E:[1,1,1],F2:[.99186,1,.67393],F7:[.95041,1,1.08747],F11:[1.00962,1,.6435]}),Mt.ACES=[.32168/.33767,1,(1-.32168-.33767)/.33767];const i_=[[.6624541811085053,.13400420645643313,.1561876870049078],[.27222871678091454,.6740817658111484,.05368951740793705],[-.005574649490394108,.004060733528982826,1.0103391003129971]],s_=[[1.6410233796943257,-.32480329418479,-.23642469523761225],[-.6636628587229829,1.6153315916573379,.016756347685530137],[.011721894328375376,-.008284441996237409,.9883948585390215]];var G1=new He({id:"acescg",name:"ACEScg",coords:{r:{range:[0,65504],name:"Red"},g:{range:[0,65504],name:"Green"},b:{range:[0,65504],name:"Blue"}},referred:"scene",white:Mt.ACES,toXYZ_M:i_,fromXYZ_M:s_,formats:{color:{}}});const jl=2**-16,Af=-.35828683,Bl=(Math.log2(65504)+9.72)/17.52;var l_=new He({id:"acescc",name:"ACEScc",coords:{r:{range:[Af,Bl],name:"Red"},g:{range:[Af,Bl],name:"Green"},b:{range:[Af,Bl],name:"Blue"}},referred:"scene",base:G1,toBase(e){const t=-.3013698630136986;return e.map(function(n){return n<=t?(2**(n*17.52-9.72)-jl)*2:n<Bl?2**(n*17.52-9.72):65504})},fromBase(e){return e.map(function(t){return t<=0?(Math.log2(jl)+9.72)/17.52:t<jl?(Math.log2(jl+t*.5)+9.72)/17.52:(Math.log2(t)+9.72)/17.52})},formats:{color:{}}}),X1=Object.freeze({__proto__:null,A98RGB:Xk,A98RGB_Linear:O1,ACEScc:l_,ACEScg:G1,HSL:N1,HSV:b1,HWB:Wk,ICTCP:_f,JzCzHz:kf,Jzazbz:E1,LCH:ai,Lab:st,Lab_D65:vf,OKLCH:e_,OKLab:Fl,P3:a1,P3_Linear:r1,ProPhoto:Jk,ProPhoto_Linear:L1,REC_2020:n1,REC_2020_Linear:Ml,REC_2100_HLG:o_,REC_2100_PQ:r_,XYZ_ABS_D65:xf,XYZ_D50:hf,XYZ_D65:vt,sRGB:fi,sRGB_Linear:o1});let lt=class We{constructor(...t){let n;t.length===1&&(n=Z(t[0]));let r,o,i;n?(r=n.space||n.spaceId,o=n.coords,i=n.alpha):[r,o,i]=t,Object.defineProperty(this,"space",{value:z.get(r),writable:!1,enumerable:!0,configurable:!0}),this.coords=o?o.slice():[0,0,0],this.alpha=i<1?i:1;for(let s=0;s<this.coords.length;s++)this.coords[s]==="NaN"&&(this.coords[s]=NaN);for(let s in this.space.coords)Object.defineProperty(this,s,{get:()=>this.get(s),set:l=>this.set(s,l)})}get spaceId(){return this.space.id}clone(){return new We(this.space,this.coords,this.alpha)}toJSON(){return{spaceId:this.spaceId,coords:this.coords,alpha:this.alpha}}display(...t){let n=GS(this,...t);return n.color=new We(n.color),n}static get(t,...n){return t instanceof We?t:new We(t,...n)}static defineFunction(t,n,r=n){let{instance:o=!0,returns:i}=r,s=function(...l){let a=n(...l);if(i==="color")a=We.get(a);else if(i==="function<color>"){let u=a;a=function(...c){let f=u(...c);return We.get(f)},Object.assign(a,u)}else i==="array<color>"&&(a=a.map(u=>We.get(u)));return a};t in We||(We[t]=s),o&&(We.prototype[t]=function(...l){return s(this,...l)})}static defineFunctions(t){for(let n in t)We.defineFunction(n,t[n],t[n])}static extend(t){if(t.register)t.register(We);else for(let n in t)We.defineFunction(n,t[n])}};lt.defineFunctions({get:wt,getAll:li,set:zn,setAll:Kg,to:xt,equals:XS,inGamut:ui,toGamut:jn,distance:u1,toString:Pl}),Object.assign(lt,{util:OS,hooks:Dn,WHITES:Mt,Space:z,spaces:z.registry,parse:Zg,defaults:Bt});for(let e of Object.keys(X1))z.register(X1[e]);for(let e in z.registry)$f(e,z.registry[e]);Dn.add("colorspace-init-end",e=>{var t;$f(e.id,e),(t=e.aliases)==null||t.forEach(n=>{$f(n,e)})});function $f(e,t){Object.keys(t.coords),Object.values(t.coords).map(r=>r.name);let n=e.replace(/-/g,"_");Object.defineProperty(lt.prototype,n,{get(){let r=this.getAll(e);return typeof Proxy>"u"?r:new Proxy(r,{has:(o,i)=>{try{return z.resolveCoord([t,i]),!0}catch{}return Reflect.has(o,i)},get:(o,i,s)=>{if(i&&typeof i!="symbol"&&!(i in o)){let{index:l}=z.resolveCoord([t,i]);if(l>=0)return o[l]}return Reflect.get(o,i,s)},set:(o,i,s,l)=>{if(i&&typeof i!="symbol"&&!(i in o)||i>=0){let{index:a}=z.resolveCoord([t,i]);if(a>=0)return o[a]=s,this.setAll(e,o),!0}return Reflect.set(o,i,s,l)}})},set(r){this.setAll(e,r)},configurable:!0,enumerable:!0})}lt.extend(Dl),lt.extend({deltaE:di}),Object.assign(lt,{deltaEMethods:Dl}),lt.extend(Uk),lt.extend({contrast:hk}),lt.extend(gk),lt.extend(ZS),lt.extend(Vk),lt.extend(bl);function a_(e){try{const t=new lt(e);return Object.fromEntries(["hex","srgb","hsl","hwb","lch","oklch","lab","oklab"].map(n=>[n,n==="hex"?t.to("srgb").toString({format:"hex"}):t.to(n).toString({precision:4})]))}catch{return null}}const u_=({color:e})=>{const[t,n]=e.split("(");return M.jsxs(M.Fragment,{children:[t,n&&M.jsxs(M.Fragment,{children:[M.jsx("wbr",{}),M.jsxs("span",{className:"whitespace-nowrap",children:["(",n]})]})]})},c_=({color:e})=>{const t=a_(e),{refs:n,floatingStyles:r}=Dg({middleware:[Mg()],placement:"bottom-start"});return M.jsxs("div",{className:"group",children:[M.jsxs("div",{className:"flex items-start",ref:n.setReference,children:[M.jsxs("div",{className:"relative mr-1 mt-0.5 h-3 w-3 shrink-0 border border-white shadow-[0_0_0_1px_black]",children:[M.jsx("div",{className:"absolute left-0 top-0 h-1/2 w-1/2 bg-black"}),M.jsx("div",{className:"absolute left-1/2 top-0 h-1/2 w-1/2 bg-white"}),M.jsx("div",{className:"absolute left-0 top-1/2 h-1/2 w-1/2 bg-white"}),M.jsx("div",{className:"absolute left-1/2 top-1/2 h-1/2 w-1/2 bg-black"}),M.jsx("div",{className:"absolute inset-0",style:{background:e}})]}),M.jsx("div",{ref:n.setPositionReference,children:M.jsx(u_,{color:e})})]}),t&&M.jsx("div",{className:"-ml-2 hidden pt-1.5 group-hover:block",ref:n.setFloating,style:r,children:M.jsx("div",{className:"glass-dark px-2 py-1",children:Object.entries(t).map(([o,i])=>M.jsx("div",{className:"my-1",children:i},o))})})]})},Qr=({label:e,children:t})=>M.jsxs("div",{className:"text-xs",children:[M.jsx("div",{className:"text-stone-300",children:e}),M.jsx("div",{children:t})]}),Q1=/(['",])/g,Z1=({children:e})=>M.jsx(M.Fragment,{children:e.split(Q1).map((t,n)=>t.match(Q1)?M.jsx("span",{className:"font-normal text-neutral-400",children:t},n):t)}),f_=({current:e,children:t})=>M.jsx(M.Fragment,{children:t.split(new RegExp(`(${e})`,"gi")).map((n,r)=>n===e?M.jsx("span",{className:"font-bold",children:M.jsx(Z1,{children:n})},r):M.jsx(Z1,{children:n},r))}),d_=({onDismiss:e,css:t})=>{const n=[Vg(t),bS(t)].join(" - ");return M.jsxs("div",{className:"glass w-[340px] p-3",children:[M.jsxs("div",{className:"flex items-center",children:[M.jsx("div",{className:"flex-1 pr-5 text-base",children:n}),M.jsx("button",{className:"text-xl hover:text-neutral-300",type:"button",onClick:e,title:"Close",children:M.jsxs("svg",{width:"16",height:"16",viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg",children:[M.jsx("g",{strokeLinecap:"round",strokeLinejoin:"round"}),M.jsx("g",{children:M.jsx("path",{fillRule:"evenodd",clipRule:"evenodd",d:"M5.29289 5.29289C5.68342 4.90237 6.31658 4.90237 6.70711 5.29289L12 10.5858L17.2929 5.29289C17.6834 4.90237 18.3166 4.90237 18.7071 5.29289C19.0976 5.68342 19.0976 6.31658 18.7071 6.70711L13.4142 12L18.7071 17.2929C19.0976 17.6834 19.0976 18.3166 18.7071 18.7071C18.3166 19.0976 17.6834 19.0976 17.2929 18.7071L12 13.4142L6.70711 18.7071C6.31658 19.0976 5.68342 19.0976 5.29289 18.7071C4.90237 18.3166 4.90237 17.6834 5.29289 17.2929L10.5858 12L5.29289 6.70711C4.90237 6.31658 4.90237 5.68342 5.29289 5.29289Z",fill:"currentColor"})})]})})]}),M.jsx("div",{className:"pt-4",children:M.jsx(Qr,{label:"Family",children:M.jsx(f_,{current:Hg(t),children:t.fontFamily})})}),M.jsxs("div",{className:"grid grid-cols-[minmax(min-content,_1fr)_minmax(max-content,_1fr)_minmax(33.3%,_max-content)] gap-x-5 gap-y-3 pt-4",children:[M.jsx(Qr,{label:"Style",children:t.fontStyle}),M.jsx(Qr,{label:"Weight",children:t.fontWeight}),M.jsx("div",{className:"row-span-2",children:M.jsx(Qr,{label:"Color",children:M.jsx(c_,{color:t.color})})}),M.jsx(Qr,{label:"Size",children:t.fontSize}),M.jsx(Qr,{label:"Line Height",children:t.lineHeight})]}),M.jsx("div",{className:"no-scrollbar overflow-x-scroll pt-5 text-base",style:{...t,color:void 0,fontSize:void 0,lineHeight:void 0},children:"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz"})]})},p_=({children:e})=>M.jsx("div",{className:"glass px-2 py-1 text-sm",children:M.jsx("div",{children:e})}),h_='*,:before,:after{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}:before,:after{--tw-content: ""}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;-o-tab-size:4;tab-size:4;font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,"Apple Color Emoji","Segoe UI Emoji",Segoe UI Symbol,"Noto Color Emoji";font-feature-settings:normal;font-variation-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,samp,pre{font-family:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-feature-settings:inherit;font-variation-settings:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dl,dd,h1,h2,h3,h4,h5,h6,hr,figure,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}ol,ul,menu{list-style:none;margin:0;padding:0}dialog{padding:0}textarea{resize:vertical}input::-moz-placeholder,textarea::-moz-placeholder{opacity:1;color:#9ca3af}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}button,[role=button]{cursor:pointer}:disabled{cursor:default}img,svg,video,canvas,audio,iframe,embed,object{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}:host{all:initial}*,:before,:after{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x: 0;--tw-border-spacing-y: 0;--tw-translate-x: 0;--tw-translate-y: 0;--tw-rotate: 0;--tw-skew-x: 0;--tw-skew-y: 0;--tw-scale-x: 1;--tw-scale-y: 1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness: proximity;--tw-gradient-from-position: ;--tw-gradient-via-position: ;--tw-gradient-to-position: ;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width: 0px;--tw-ring-offset-color: #fff;--tw-ring-color: rgb(59 130 246 / .5);--tw-ring-offset-shadow: 0 0 #0000;--tw-ring-shadow: 0 0 #0000;--tw-shadow: 0 0 #0000;--tw-shadow-colored: 0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.glass{border-radius:6px;--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity));background-color:#262626cc;background-blend-mode:luminosity;--tw-backdrop-blur: blur(8px);-webkit-backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)}.glass-dark{border-radius:6px;--tw-text-opacity: 1;color:rgb(255 255 255 / var(--tw-text-opacity));background-color:#262626f2;background-blend-mode:luminosity;--tw-backdrop-blur: blur(8px);-webkit-backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia);backdrop-filter:var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)}.glass-interactive:hover{background-color:#171717cc}.glass-interactive:active{background-color:#000c}.fixed{position:fixed}.absolute{position:absolute}.relative{position:relative}.inset-0{top:0;right:0;bottom:0;left:0}.left-0{left:0}.left-1\\/2{left:50%}.right-4{right:16px}.top-0{top:0}.top-1\\/2{top:50%}.top-4{top:16px}.z-\\[2147483646\\]{z-index:2147483646}.z-\\[2147483647\\]{z-index:2147483647}.row-span-2{grid-row:span 2 / span 2}.my-1{margin-top:4px;margin-bottom:4px}.-ml-2{margin-left:-8px}.mb-4{margin-bottom:16px}.mr-1{margin-right:4px}.mt-0{margin-top:0}.mt-0\\.5{margin-top:2px}.inline{display:inline}.flex{display:flex}.grid{display:grid}.hidden{display:none}.h-1\\/2{height:50%}.h-3{height:12px}.w-1\\/2{width:50%}.w-3{width:12px}.w-\\[340px\\]{width:340px}.flex-1{flex:1 1 0%}.shrink-0{flex-shrink:0}.grid-cols-\\[minmax\\(min-content\\,_1fr\\)_minmax\\(max-content\\,_1fr\\)_minmax\\(33\\.3\\%\\,_max-content\\)\\]{grid-template-columns:minmax(min-content,1fr) minmax(max-content,1fr) minmax(33.3%,max-content)}.items-start{align-items:flex-start}.items-center{align-items:center}.gap-x-5{-moz-column-gap:20px;column-gap:20px}.gap-y-3{row-gap:12px}.overflow-x-scroll{overflow-x:scroll}.whitespace-nowrap{white-space:nowrap}.rounded{border-radius:4px}.border{border-width:1px}.border-white{--tw-border-opacity: 1;border-color:rgb(255 255 255 / var(--tw-border-opacity))}.bg-black{--tw-bg-opacity: 1;background-color:rgb(0 0 0 / var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity: 1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.fill-neutral-800\\/80{fill:#262626cc}.p-3{padding:12px}.px-2{padding-left:8px;padding-right:8px}.py-1{padding-top:4px;padding-bottom:4px}.py-1\\.5{padding-top:6px;padding-bottom:6px}.pr-5{padding-right:20px}.pt-1{padding-top:4px}.pt-1\\.5{padding-top:6px}.pt-4{padding-top:16px}.pt-5{padding-top:20px}.font-sans{font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,"Apple Color Emoji","Segoe UI Emoji",Segoe UI Symbol,"Noto Color Emoji"}.text-base{font-size:16px;line-height:24px}.text-sm{font-size:14px;line-height:20px}.text-xl{font-size:20px;line-height:28px}.text-xs{font-size:12px;line-height:16px}.font-bold{font-weight:700}.font-normal{font-weight:400}.text-neutral-400{--tw-text-opacity: 1;color:rgb(163 163 163 / var(--tw-text-opacity))}.text-stone-300{--tw-text-opacity: 1;color:rgb(214 211 209 / var(--tw-text-opacity))}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow{--tw-shadow: 0 1px 3px 0 rgb(0 0 0 / .1), 0 1px 2px -1px rgb(0 0 0 / .1);--tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color), 0 1px 2px -1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.shadow-\\[0_0_0_1px_black\\]{--tw-shadow: 0 0 0 1px black;--tw-shadow-colored: 0 0 0 1px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000),var(--tw-ring-shadow, 0 0 #0000),var(--tw-shadow)}.no-scrollbar::-webkit-scrollbar{display:none}.no-scrollbar{-ms-overflow-style:none;scrollbar-width:none}.hover\\:text-neutral-300:hover{--tw-text-opacity: 1;color:rgb(212 212 212 / var(--tw-text-opacity))}.group:hover .group-hover\\:block{display:block}',K1="data-wf-app-root",q1=e=>!!e.closest(`[${K1}]`),m_=({onExit:e})=>{const[t,n]=N.useState(null),[r,o]=N.useState([]);N.useEffect(()=>{const s=({target:a,clientX:u,clientY:c})=>{if(!a||!(a instanceof HTMLElement)||q1(a)){n(null);return}n({refX:u,refY:c,css:Sl(a)})},l=()=>{n(null)};return document.addEventListener("mousemove",s),document.addEventListener("mouseout",l),()=>{document.removeEventListener("mousemove",s),document.removeEventListener("mouseout",l)}},[]),N.useEffect(()=>{const s=l=>{const{target:a,clientX:u,clientY:c}=l;!a||!(a instanceof HTMLElement)||q1(a)||(l.stopPropagation(),l.preventDefault(),o(f=>[...f,{refX:u,refY:c,css:Sl(a)}]),n(null))};return document.addEventListener("click",s,{capture:!0,passive:!1}),()=>{document.removeEventListener("click",s,{capture:!0})}},[]),N.useEffect(()=>{const s=l=>{l.key==="Escape"&&e()};return document.addEventListener("keydown",s),()=>{document.removeEventListener("keydown",s)}},[e]);const i=s=>{o(l=>{const a=[...l],[u]=a.splice(s,1);return u?(a.push(u),a):l})};return M.jsxs(Dx.div,{mode:"closed",[K1]:!0,children:[M.jsxs("div",{className:"font-sans text-base antialiased",children:[M.jsx("div",{className:"fixed right-4 top-4 z-[2147483647]",children:M.jsx(zx,{onExit:e})}),M.jsx(zg,{refX:t==null?void 0:t.refX,refY:t==null?void 0:t.refY,fixed:!0,children:t&&M.jsx(p_,{children:Vg(t.css)})}),r.map(({refX:s,refY:l,css:a},u)=>M.jsx("div",{onClick:c=>{c.stopPropagation(),i(u)},children:M.jsx(zg,{refX:s,refY:l,arrow:!0,children:M.jsx(d_,{css:a,onDismiss:()=>{o(c=>{const f=[...c];return f.splice(u,1),f})}})})},[s,l,a.fontFamily].join("-")))]}),M.jsx("style",{type:"text/css",children:h_})]})},J1=Object.prototype.toString;function ey(e){switch(J1.call(e)){case"[object Error]":case"[object Exception]":case"[object DOMException]":return!0;default:return Vl(e,Error)}}function hi(e,t){return J1.call(e)===`[object ${t}]`}function ty(e){return hi(e,"ErrorEvent")}function ny(e){return hi(e,"DOMError")}function g_(e){return hi(e,"DOMException")}function y_(e){return hi(e,"String")}function Tf(e){return typeof e=="object"&&e!==null&&"__sentry_template_string__"in e&&"__sentry_template_values__"in e}function v_(e){return e===null||Tf(e)||typeof e!="object"&&typeof e!="function"}function Zr(e){return hi(e,"Object")}function Ul(e){return typeof Event<"u"&&Vl(e,Event)}function w_(e){return typeof Element<"u"&&Vl(e,Element)}function Hl(e){return!!(e&&e.then&&typeof e.then=="function")}function x_(e){return Zr(e)&&"nativeEvent"in e&&"preventDefault"in e&&"stopPropagation"in e}function S_(e){return typeof e=="number"&&e!==e}function Vl(e,t){try{return e instanceof t}catch{return!1}}function k_(e){return!!(typeof e=="object"&&e!==null&&(e.__isVue||e._isVue))}function mi(e,t=0){return typeof e!="string"||t===0||e.length<=t?e:`${e.slice(0,t)}...`}function Wl(e){return e&&e.Math==Math?e:void 0}const Ve=typeof globalThis=="object"&&Wl(globalThis)||typeof window=="object"&&Wl(window)||typeof self=="object"&&Wl(self)||typeof global=="object"&&Wl(global)||function(){return this}()||{};function __(){return Ve}function ry(e,t,n){const r=n||Ve,o=r.__SENTRY__=r.__SENTRY__||{};return o[e]||(o[e]=t())}const E_=__(),C_=80;function A_(e,t={}){if(!e)return"<unknown>";try{let n=e;const r=5,o=[];let i=0,s=0;const l=" > ",a=l.length;let u;const c=Array.isArray(t)?t:t.keyAttrs,f=!Array.isArray(t)&&t.maxStringLength||C_;for(;n&&i++<r&&(u=$_(n,c),!(u==="html"||i>1&&s+o.length*a+u.length>=f));)o.push(u),s+=u.length,n=n.parentNode;return o.reverse().join(l)}catch{return"<unknown>"}}function $_(e,t){const n=e,r=[];let o,i,s,l,a;if(!n||!n.tagName)return"";if(E_.HTMLElement&&n instanceof HTMLElement&&n.dataset&&n.dataset.sentryComponent)return n.dataset.sentryComponent;r.push(n.tagName.toLowerCase());const u=t&&t.length?t.filter(f=>n.getAttribute(f)).map(f=>[f,n.getAttribute(f)]):null;if(u&&u.length)u.forEach(f=>{r.push(`[${f[0]}="${f[1]}"]`)});else if(n.id&&r.push(`#${n.id}`),o=n.className,o&&y_(o))for(i=o.split(/\s+/),a=0;a<i.length;a++)r.push(`.${i[a]}`);const c=["aria-label","type","name","title","alt"];for(a=0;a<c.length;a++)s=c[a],l=n.getAttribute(s),l&&r.push(`[${s}="${l}"]`);return r.join("")}const Pf=typeof __SENTRY_DEBUG__>"u"||__SENTRY_DEBUG__,T_="Sentry Logger ",oy=["debug","info","warn","error","log","assert","trace"],iy={};function Mf(e){if(!("console"in Ve))return e();const t=Ve.console,n={},r=Object.keys(iy);r.forEach(o=>{const i=iy[o];n[o]=t[o],t[o]=i});try{return e()}finally{r.forEach(o=>{t[o]=n[o]})}}function P_(){let e=!1;const t={enable:()=>{e=!0},disable:()=>{e=!1},isEnabled:()=>e};return Pf?oy.forEach(n=>{t[n]=(...r)=>{e&&Mf(()=>{Ve.console[n](`${T_}[${n}]:`,...r)})}}):oy.forEach(n=>{t[n]=()=>{}}),t}const Q=P_(),M_=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;function R_(e){return e==="http"||e==="https"}function gi(e,t=!1){const{host:n,path:r,pass:o,port:i,projectId:s,protocol:l,publicKey:a}=e;return`${l}://${a}${t&&o?`:${o}`:""}@${n}${i?`:${i}`:""}/${r&&`${r}/`}${s}`}function N_(e){const t=M_.exec(e);if(!t){Mf(()=>{console.error(`Invalid Sentry Dsn: ${e}`)});return}const[n,r,o="",i,s="",l]=t.slice(1);let a="",u=l;const c=u.split("/");if(c.length>1&&(a=c.slice(0,-1).join("/"),u=c.pop()),u){const f=u.match(/^\d+/);f&&(u=f[0])}return sy({host:i,pass:o,path:a,projectId:u,port:s,protocol:n,publicKey:r})}function sy(e){return{protocol:e.protocol,publicKey:e.publicKey||"",pass:e.pass||"",host:e.host,port:e.port||"",path:e.path||"",projectId:e.projectId}}function b_(e){if(!Pf)return!0;const{port:t,projectId:n,protocol:r}=e;return["protocol","publicKey","host","projectId"].find(s=>e[s]?!1:(Q.error(`Invalid Sentry Dsn: ${s} missing`),!0))?!1:n.match(/^\d+$/)?R_(r)?t&&isNaN(parseInt(t,10))?(Q.error(`Invalid Sentry Dsn: Invalid port ${t}`),!1):!0:(Q.error(`Invalid Sentry Dsn: Invalid protocol ${r}`),!1):(Q.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),!1)}function O_(e){const t=typeof e=="string"?N_(e):sy(e);if(!(!t||!b_(t)))return t}class Ut extends Error{constructor(t,n="warn"){super(t),this.message=t,this.name=new.target.prototype.constructor.name,Object.setPrototypeOf(this,new.target.prototype),this.logLevel=n}}function L_(e,t,n){try{Object.defineProperty(e,t,{value:n,writable:!0,configurable:!0})}catch{Pf&&Q.log(`Failed to add non-enumerable property "${t}" to object`,e)}}function I_(e){return Object.keys(e).map(t=>`${encodeURIComponent(t)}=${encodeURIComponent(e[t])}`).join("&")}function ly(e){if(ey(e))return{message:e.message,name:e.name,stack:e.stack,...uy(e)};if(Ul(e)){const t={type:e.type,target:ay(e.target),currentTarget:ay(e.currentTarget),...uy(e)};return typeof CustomEvent<"u"&&Vl(e,CustomEvent)&&(t.detail=e.detail),t}else return e}function ay(e){try{return w_(e)?A_(e):Object.prototype.toString.call(e)}catch{return"<unknown>"}}function uy(e){if(typeof e=="object"&&e!==null){const t={};for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t}else return{}}function F_(e,t=40){const n=Object.keys(ly(e));if(n.sort(),!n.length)return"[object has no keys]";if(n[0].length>=t)return mi(n[0],t);for(let r=n.length;r>0;r--){const o=n.slice(0,r).join(", ");if(!(o.length>t))return r===n.length?o:mi(o,t)}return""}function on(e){return Rf(e,new Map)}function Rf(e,t){if(D_(e)){const n=t.get(e);if(n!==void 0)return n;const r={};t.set(e,r);for(const o of Object.keys(e))typeof e[o]<"u"&&(r[o]=Rf(e[o],t));return r}if(Array.isArray(e)){const n=t.get(e);if(n!==void 0)return n;const r=[];return t.set(e,r),e.forEach(o=>{r.push(Rf(o,t))}),r}return e}function D_(e){if(!Zr(e))return!1;try{const t=Object.getPrototypeOf(e).constructor.name;return!t||t==="Object"}catch{return!0}}const cy=50,fy=/\(error: (.*)\)/,dy=/captureMessage|captureException/;function z_(...e){const t=e.sort((n,r)=>n[0]-r[0]).map(n=>n[1]);return(n,r=0)=>{const o=[],i=n.split(`
`);for(let s=r;s<i.length;s++){const l=i[s];if(l.length>1024)continue;const a=fy.test(l)?l.replace(fy,"$1"):l;if(!a.match(/\S*Error: /)){for(const u of t){const c=u(a);if(c){o.push(c);break}}if(o.length>=cy)break}}return j_(o)}}function j_(e){if(!e.length)return[];const t=Array.from(e);return/sentryWrapped/.test(t[t.length-1].function||"")&&t.pop(),t.reverse(),dy.test(t[t.length-1].function||"")&&(t.pop(),dy.test(t[t.length-1].function||"")&&t.pop()),t.slice(0,cy).map(n=>({...n,filename:n.filename||t[t.length-1].filename,function:n.function||"?"}))}const Nf="<anonymous>";function B_(e){try{return!e||typeof e!="function"?Nf:e.name||Nf}catch{return Nf}}function Rt(){const e=Ve,t=e.crypto||e.msCrypto;let n=()=>Math.random()*16;try{if(t&&t.randomUUID)return t.randomUUID().replace(/-/g,"");t&&t.getRandomValues&&(n=()=>{const r=new Uint8Array(1);return t.getRandomValues(r),r[0]})}catch{}return("10000000100040008000"+1e11).replace(/[018]/g,r=>(r^(n()&15)>>r/4).toString(16))}function U_(e){return e.exception&&e.exception.values?e.exception.values[0]:void 0}function py(e,t,n){const r=e.exception=e.exception||{},o=r.values=r.values||[],i=o[0]=o[0]||{};i.value||(i.value=t||""),i.type||(i.type=n||"Error")}function Yl(e,t){const n=U_(e);if(!n)return;const r={type:"generic",handled:!0},o=n.mechanism;if(n.mechanism={...r,...o,...t},t&&"data"in t){const i={...o&&o.data,...t.data};n.mechanism.data=i}}function hy(e){if(e&&e.__sentry_captured__)return!0;try{L_(e,"__sentry_captured__",!0)}catch{}return!1}function H_(e){return Array.isArray(e)?e:[e]}function V_(e){return e&&/^function fetch\(\)\s+\{\s+\[native code\]\s+\}$/.test(e.toString())}function W_(){return"npm"}function Y_(){const e=typeof WeakSet=="function",t=e?new WeakSet:[];function n(o){if(e)return t.has(o)?!0:(t.add(o),!1);for(let i=0;i<t.length;i++)if(t[i]===o)return!0;return t.push(o),!1}function r(o){if(e)t.delete(o);else for(let i=0;i<t.length;i++)if(t[i]===o){t.splice(i,1);break}}return[n,r]}function Un(e,t=100,n=1/0){try{return bf("",e,t,n)}catch(r){return{ERROR:`**non-serializable** (${r})`}}}function my(e,t=3,n=100*1024){const r=Un(e,t);return Z_(r)>n?my(e,t-1,n):r}function bf(e,t,n=1/0,r=1/0,o=Y_()){const[i,s]=o;if(t==null||["number","boolean","string"].includes(typeof t)&&!S_(t))return t;const l=G_(e,t);if(!l.startsWith("[object "))return l;if(t.__sentry_skip_normalization__)return t;const a=typeof t.__sentry_override_normalization_depth__=="number"?t.__sentry_override_normalization_depth__:n;if(a===0)return l.replace("object ","");if(i(t))return"[Circular ~]";const u=t;if(u&&typeof u.toJSON=="function")try{const m=u.toJSON();return bf("",m,a-1,r,o)}catch{}const c=Array.isArray(t)?[]:{};let f=0;const d=ly(t);for(const m in d){if(!Object.prototype.hasOwnProperty.call(d,m))continue;if(f>=r){c[m]="[MaxProperties ~]";break}const y=d[m];c[m]=bf(m,y,a-1,r,o),f++}return s(t),c}function G_(e,t){try{if(e==="domain"&&t&&typeof t=="object"&&t._events)return"[Domain]";if(e==="domainEmitter")return"[DomainEmitter]";if(typeof global<"u"&&t===global)return"[Global]";if(typeof window<"u"&&t===window)return"[Window]";if(typeof document<"u"&&t===document)return"[Document]";if(k_(t))return"[VueViewModel]";if(x_(t))return"[SyntheticEvent]";if(typeof t=="number"&&t!==t)return"[NaN]";if(typeof t=="function")return`[Function: ${B_(t)}]`;if(typeof t=="symbol")return`[${String(t)}]`;if(typeof t=="bigint")return`[BigInt: ${String(t)}]`;const n=X_(t);return/^HTML(\w*)Element$/.test(n)?`[HTMLElement: ${n}]`:`[object ${n}]`}catch(n){return`**non-serializable** (${n})`}}function X_(e){const t=Object.getPrototypeOf(e);return t?t.constructor.name:"null prototype"}function Q_(e){return~-encodeURI(e).split(/%..|./).length}function Z_(e){return Q_(JSON.stringify(e))}var sn;(function(e){e[e.PENDING=0]="PENDING";const n=1;e[e.RESOLVED=n]="RESOLVED";const r=2;e[e.REJECTED=r]="REJECTED"})(sn||(sn={}));function Kr(e){return new St(t=>{t(e)})}function Of(e){return new St((t,n)=>{n(e)})}class St{constructor(t){St.prototype.__init.call(this),St.prototype.__init2.call(this),St.prototype.__init3.call(this),St.prototype.__init4.call(this),this._state=sn.PENDING,this._handlers=[];try{t(this._resolve,this._reject)}catch(n){this._reject(n)}}then(t,n){return new St((r,o)=>{this._handlers.push([!1,i=>{if(!t)r(i);else try{r(t(i))}catch(s){o(s)}},i=>{if(!n)o(i);else try{r(n(i))}catch(s){o(s)}}]),this._executeHandlers()})}catch(t){return this.then(n=>n,t)}finally(t){return new St((n,r)=>{let o,i;return this.then(s=>{i=!1,o=s,t&&t()},s=>{i=!0,o=s,t&&t()}).then(()=>{if(i){r(o);return}n(o)})})}__init(){this._resolve=t=>{this._setResult(sn.RESOLVED,t)}}__init2(){this._reject=t=>{this._setResult(sn.REJECTED,t)}}__init3(){this._setResult=(t,n)=>{if(this._state===sn.PENDING){if(Hl(n)){n.then(this._resolve,this._reject);return}this._state=t,this._value=n,this._executeHandlers()}}}__init4(){this._executeHandlers=()=>{if(this._state===sn.PENDING)return;const t=this._handlers.slice();this._handlers=[],t.forEach(n=>{n[0]||(this._state===sn.RESOLVED&&n[1](this._value),this._state===sn.REJECTED&&n[2](this._value),n[0]=!0)})}}}function K_(e){const t=[];function n(){return e===void 0||t.length<e}function r(s){return t.splice(t.indexOf(s),1)[0]}function o(s){if(!n())return Of(new Ut("Not adding Promise because buffer limit was reached."));const l=s();return t.indexOf(l)===-1&&t.push(l),l.then(()=>r(l)).then(null,()=>r(l).then(null,()=>{})),l}function i(s){return new St((l,a)=>{let u=t.length;if(!u)return l(!0);const c=setTimeout(()=>{s&&s>0&&l(!1)},s);t.forEach(f=>{Kr(f).then(()=>{--u||(clearTimeout(c),l(!0))},a)})})}return{$:t,add:o,drain:i}}const gy=1e3;function yi(){return Date.now()/gy}function q_(){const{performance:e}=Ve;if(!e||!e.now)return yi;const t=Date.now()-e.now(),n=e.timeOrigin==null?t:e.timeOrigin;return()=>(n+e.now())/gy}const yy=q_();(()=>{const{performance:e}=Ve;if(!e||!e.now)return;const t=3600*1e3,n=e.now(),r=Date.now(),o=e.timeOrigin?Math.abs(e.timeOrigin+n-r):t,i=o<t,s=e.timing&&e.timing.navigationStart,a=typeof s=="number"?Math.abs(s+n-r):t,u=a<t;return i||u?o<=a?e.timeOrigin:s:r})();function qr(e,t=[]){return[e,t]}function J_(e,t){const[n,r]=e;return[n,[...r,t]]}function vy(e,t){const n=e[1];for(const r of n){const o=r[0].type;if(t(r,o))return!0}return!1}function Lf(e,t){return(t||new TextEncoder).encode(e)}function e3(e,t){const[n,r]=e;let o=JSON.stringify(n);function i(s){typeof o=="string"?o=typeof s=="string"?o+s:[Lf(o,t),s]:o.push(typeof s=="string"?Lf(s,t):s)}for(const s of r){const[l,a]=s;if(i(`
${JSON.stringify(l)}
`),typeof a=="string"||a instanceof Uint8Array)i(a);else{let u;try{u=JSON.stringify(a)}catch{u=JSON.stringify(Un(a))}i(u)}}return typeof o=="string"?o:t3(o)}function t3(e){const t=e.reduce((o,i)=>o+i.length,0),n=new Uint8Array(t);let r=0;for(const o of e)n.set(o,r),r+=o.length;return n}function n3(e,t){const n=typeof e.data=="string"?Lf(e.data,t):e.data;return[on({type:"attachment",length:n.length,filename:e.filename,content_type:e.contentType,attachment_type:e.attachmentType}),n]}const r3={session:"session",sessions:"session",attachment:"attachment",transaction:"transaction",event:"error",client_report:"internal",user_report:"default",profile:"profile",replay_event:"replay",replay_recording:"replay",check_in:"monitor",feedback:"feedback",statsd:"unknown"};function wy(e){return r3[e]}function xy(e){if(!e||!e.sdk)return;const{name:t,version:n}=e.sdk;return{name:t,version:n}}function o3(e,t,n,r){const o=e.sdkProcessingMetadata&&e.sdkProcessingMetadata.dynamicSamplingContext;return{event_id:e.event_id,sent_at:new Date().toISOString(),...t&&{sdk:t},...!!n&&r&&{dsn:gi(r)},...o&&{trace:on({...o})}}}function i3(e,t,n){const r=[{type:"client_report"},{timestamp:n||yi(),discarded_events:e}];return qr(t?{dsn:t}:{},[r])}const s3=60*1e3;function l3(e,t=Date.now()){const n=parseInt(`${e}`,10);if(!isNaN(n))return n*1e3;const r=Date.parse(`${e}`);return isNaN(r)?s3:r-t}function a3(e,t){return e[t]||e.all||0}function u3(e,t,n=Date.now()){return a3(e,t)>n}function c3(e,{statusCode:t,headers:n},r=Date.now()){const o={...e},i=n&&n["x-sentry-rate-limits"],s=n&&n["retry-after"];if(i)for(const l of i.trim().split(",")){const[a,u]=l.split(":",2),c=parseInt(a,10),f=(isNaN(c)?60:c)*1e3;if(!u)o.all=r+f;else for(const d of u.split(";"))o[d]=r+f}else s?o.all=r+l3(s,r):t===429&&(o.all=r+60*1e3);return o}const ve=typeof __SENTRY_DEBUG__>"u"||__SENTRY_DEBUG__,If="production";function Ff(){return ry("globalEventProcessors",()=>[])}function f3(e){Ff().push(e)}function Gl(e,t,n,r=0){return new St((o,i)=>{const s=e[r];if(t===null||typeof s!="function")o(t);else{const l=s({...t},n);ve&&s.id&&l===null&&Q.log(`Event processor "${s.id}" dropped event`),Hl(l)?l.then(a=>Gl(e,a,n,r+1).then(o)).then(null,i):Gl(e,l,n,r+1).then(o).then(null,i)}})}function d3(e){const t=yy(),n={sid:Rt(),init:!0,timestamp:t,started:t,duration:0,status:"ok",errors:0,ignoreDuration:!1,toJSON:()=>h3(n)};return e&&Jr(n,e),n}function Jr(e,t={}){if(t.user&&(!e.ipAddress&&t.user.ip_address&&(e.ipAddress=t.user.ip_address),!e.did&&!t.did&&(e.did=t.user.id||t.user.email||t.user.username)),e.timestamp=t.timestamp||yy(),t.abnormal_mechanism&&(e.abnormal_mechanism=t.abnormal_mechanism),t.ignoreDuration&&(e.ignoreDuration=t.ignoreDuration),t.sid&&(e.sid=t.sid.length===32?t.sid:Rt()),t.init!==void 0&&(e.init=t.init),!e.did&&t.did&&(e.did=`${t.did}`),typeof t.started=="number"&&(e.started=t.started),e.ignoreDuration)e.duration=void 0;else if(typeof t.duration=="number")e.duration=t.duration;else{const n=e.timestamp-e.started;e.duration=n>=0?n:0}t.release&&(e.release=t.release),t.environment&&(e.environment=t.environment),!e.ipAddress&&t.ipAddress&&(e.ipAddress=t.ipAddress),!e.userAgent&&t.userAgent&&(e.userAgent=t.userAgent),typeof t.errors=="number"&&(e.errors=t.errors),t.status&&(e.status=t.status)}function p3(e,t){let n={};t?n={status:t}:e.status==="ok"&&(n={status:"exited"}),Jr(e,n)}function h3(e){return on({sid:`${e.sid}`,init:e.init,started:new Date(e.started*1e3).toISOString(),timestamp:new Date(e.timestamp*1e3).toISOString(),status:e.status,errors:e.errors,did:typeof e.did=="number"||typeof e.did=="string"?`${e.did}`:void 0,duration:e.duration,abnormal_mechanism:e.abnormal_mechanism,attrs:{release:e.release,environment:e.environment,ip_address:e.ipAddress,user_agent:e.userAgent}})}const m3=1;function g3(e){const{spanId:t,traceId:n}=e.spanContext(),{data:r,op:o,parent_span_id:i,status:s,tags:l,origin:a}=vi(e);return on({data:r,op:o,parent_span_id:i,span_id:t,status:s,tags:l,trace_id:n,origin:a})}function vi(e){return y3(e)?e.getSpanJSON():typeof e.toJSON=="function"?e.toJSON():{}}function y3(e){return typeof e.getSpanJSON=="function"}function v3(e){const{traceFlags:t}=e.spanContext();return!!(t&m3)}function w3(e,t,n,r,o,i){const{normalizeDepth:s=3,normalizeMaxBreadth:l=1e3}=e,a={...t,event_id:t.event_id||n.event_id||Rt(),timestamp:t.timestamp||yi()},u=n.integrations||e.integrations.map(x=>x.name);x3(a,e),_3(a,u),t.type===void 0&&S3(a,e.stackParser);const c=C3(r,n.captureContext);n.mechanism&&Yl(a,n.mechanism);const f=o&&o.getEventProcessors?o.getEventProcessors():[],d=O3().getScopeData();if(i){const x=i.getScopeData();Ay(d,x)}if(c){const x=c.getScopeData();Ay(d,x)}const m=[...n.attachments||[],...d.attachments];m.length&&(n.attachments=m),Cy(a,d);const y=[...f,...Ff(),...d.eventProcessors];return Gl(y,a,n).then(x=>(x&&k3(x),typeof s=="number"&&s>0?E3(x,s,l):x))}function x3(e,t){const{environment:n,release:r,dist:o,maxValueLength:i=250}=t;"environment"in e||(e.environment="environment"in t?n:If),e.release===void 0&&r!==void 0&&(e.release=r),e.dist===void 0&&o!==void 0&&(e.dist=o),e.message&&(e.message=mi(e.message,i));const s=e.exception&&e.exception.values&&e.exception.values[0];s&&s.value&&(s.value=mi(s.value,i));const l=e.request;l&&l.url&&(l.url=mi(l.url,i))}const Sy=new WeakMap;function S3(e,t){const n=Ve._sentryDebugIds;if(!n)return;let r;const o=Sy.get(t);o?r=o:(r=new Map,Sy.set(t,r));const i=Object.keys(n).reduce((s,l)=>{let a;const u=r.get(l);u?a=u:(a=t(l),r.set(l,a));for(let c=a.length-1;c>=0;c--){const f=a[c];if(f.filename){s[f.filename]=n[l];break}}return s},{});try{e.exception.values.forEach(s=>{s.stacktrace.frames.forEach(l=>{l.filename&&(l.debug_id=i[l.filename])})})}catch{}}function k3(e){const t={};try{e.exception.values.forEach(r=>{r.stacktrace.frames.forEach(o=>{o.debug_id&&(o.abs_path?t[o.abs_path]=o.debug_id:o.filename&&(t[o.filename]=o.debug_id),delete o.debug_id)})})}catch{}if(Object.keys(t).length===0)return;e.debug_meta=e.debug_meta||{},e.debug_meta.images=e.debug_meta.images||[];const n=e.debug_meta.images;Object.keys(t).forEach(r=>{n.push({type:"sourcemap",code_file:r,debug_id:t[r]})})}function _3(e,t){t.length>0&&(e.sdk=e.sdk||{},e.sdk.integrations=[...e.sdk.integrations||[],...t])}function E3(e,t,n){if(!e)return null;const r={...e,...e.breadcrumbs&&{breadcrumbs:e.breadcrumbs.map(o=>({...o,...o.data&&{data:Un(o.data,t,n)}}))},...e.user&&{user:Un(e.user,t,n)},...e.contexts&&{contexts:Un(e.contexts,t,n)},...e.extra&&{extra:Un(e.extra,t,n)}};return e.contexts&&e.contexts.trace&&r.contexts&&(r.contexts.trace=e.contexts.trace,e.contexts.trace.data&&(r.contexts.trace.data=Un(e.contexts.trace.data,t,n))),e.spans&&(r.spans=e.spans.map(o=>{const i=vi(o).data;return i&&(o.data=Un(i,t,n)),o})),r}function C3(e,t){if(!t)return e;const n=e?e.clone():new ln;return n.update(t),n}function ky(){return Ql().getClient()}function A3(){return Ql().getScope()}function _y(e){return e.transaction}function Ey(e,t,n){const r=t.getOptions(),{publicKey:o}=t.getDsn()||{},{segment:i}=n&&n.getUser()||{},s=on({environment:r.environment||If,release:r.release,user_segment:i,public_key:o,trace_id:e});return t.emit&&t.emit("createDsc",s),s}function $3(e){const t=ky();if(!t)return{};const n=Ey(vi(e).trace_id||"",t,A3()),r=_y(e);if(!r)return n;const o=r&&r._frozenDynamicSamplingContext;if(o)return o;const{sampleRate:i,source:s}=r.metadata;i!=null&&(n.sample_rate=`${i}`);const l=vi(r);return s&&s!=="url"&&(n.transaction=l.description),n.sampled=String(v3(r)),t.emit&&t.emit("createDsc",n),n}function Cy(e,t){const{fingerprint:n,span:r,breadcrumbs:o,sdkProcessingMetadata:i}=t;T3(e,t),r&&R3(e,r),N3(e,n),P3(e,o),M3(e,i)}function Ay(e,t){const{extra:n,tags:r,user:o,contexts:i,level:s,sdkProcessingMetadata:l,breadcrumbs:a,fingerprint:u,eventProcessors:c,attachments:f,propagationContext:d,transactionName:m,span:y}=t;wi(e,"extra",n),wi(e,"tags",r),wi(e,"user",o),wi(e,"contexts",i),wi(e,"sdkProcessingMetadata",l),s&&(e.level=s),m&&(e.transactionName=m),y&&(e.span=y),a.length&&(e.breadcrumbs=[...e.breadcrumbs,...a]),u.length&&(e.fingerprint=[...e.fingerprint,...u]),c.length&&(e.eventProcessors=[...e.eventProcessors,...c]),f.length&&(e.attachments=[...e.attachments,...f]),e.propagationContext={...e.propagationContext,...d}}function wi(e,t,n){if(n&&Object.keys(n).length){e[t]={...e[t]};for(const r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[t][r]=n[r])}}function T3(e,t){const{extra:n,tags:r,user:o,contexts:i,level:s,transactionName:l}=t,a=on(n);a&&Object.keys(a).length&&(e.extra={...a,...e.extra});const u=on(r);u&&Object.keys(u).length&&(e.tags={...u,...e.tags});const c=on(o);c&&Object.keys(c).length&&(e.user={...c,...e.user});const f=on(i);f&&Object.keys(f).length&&(e.contexts={...f,...e.contexts}),s&&(e.level=s),l&&(e.transaction=l)}function P3(e,t){const n=[...e.breadcrumbs||[],...t];e.breadcrumbs=n.length?n:void 0}function M3(e,t){e.sdkProcessingMetadata={...e.sdkProcessingMetadata,...t}}function R3(e,t){e.contexts={trace:g3(t),...e.contexts};const n=_y(t);if(n){e.sdkProcessingMetadata={dynamicSamplingContext:$3(t),...e.sdkProcessingMetadata};const r=vi(n).description;r&&(e.tags={transaction:r,...e.tags})}}function N3(e,t){e.fingerprint=e.fingerprint?H_(e.fingerprint):[],t&&(e.fingerprint=e.fingerprint.concat(t)),e.fingerprint&&!e.fingerprint.length&&delete e.fingerprint}const b3=100;let Df;class ln{constructor(){this._notifyingListeners=!1,this._scopeListeners=[],this._eventProcessors=[],this._breadcrumbs=[],this._attachments=[],this._user={},this._tags={},this._extra={},this._contexts={},this._sdkProcessingMetadata={},this._propagationContext=$y()}static clone(t){return t?t.clone():new ln}clone(){const t=new ln;return t._breadcrumbs=[...this._breadcrumbs],t._tags={...this._tags},t._extra={...this._extra},t._contexts={...this._contexts},t._user=this._user,t._level=this._level,t._span=this._span,t._session=this._session,t._transactionName=this._transactionName,t._fingerprint=this._fingerprint,t._eventProcessors=[...this._eventProcessors],t._requestSession=this._requestSession,t._attachments=[...this._attachments],t._sdkProcessingMetadata={...this._sdkProcessingMetadata},t._propagationContext={...this._propagationContext},t._client=this._client,t}setClient(t){this._client=t}getClient(){return this._client}addScopeListener(t){this._scopeListeners.push(t)}addEventProcessor(t){return this._eventProcessors.push(t),this}setUser(t){return this._user=t||{email:void 0,id:void 0,ip_address:void 0,segment:void 0,username:void 0},this._session&&Jr(this._session,{user:t}),this._notifyScopeListeners(),this}getUser(){return this._user}getRequestSession(){return this._requestSession}setRequestSession(t){return this._requestSession=t,this}setTags(t){return this._tags={...this._tags,...t},this._notifyScopeListeners(),this}setTag(t,n){return this._tags={...this._tags,[t]:n},this._notifyScopeListeners(),this}setExtras(t){return this._extra={...this._extra,...t},this._notifyScopeListeners(),this}setExtra(t,n){return this._extra={...this._extra,[t]:n},this._notifyScopeListeners(),this}setFingerprint(t){return this._fingerprint=t,this._notifyScopeListeners(),this}setLevel(t){return this._level=t,this._notifyScopeListeners(),this}setTransactionName(t){return this._transactionName=t,this._notifyScopeListeners(),this}setContext(t,n){return n===null?delete this._contexts[t]:this._contexts[t]=n,this._notifyScopeListeners(),this}setSpan(t){return this._span=t,this._notifyScopeListeners(),this}getSpan(){return this._span}getTransaction(){const t=this._span;return t&&t.transaction}setSession(t){return t?this._session=t:delete this._session,this._notifyScopeListeners(),this}getSession(){return this._session}update(t){if(!t)return this;const n=typeof t=="function"?t(this):t;if(n instanceof ln){const r=n.getScopeData();this._tags={...this._tags,...r.tags},this._extra={...this._extra,...r.extra},this._contexts={...this._contexts,...r.contexts},r.user&&Object.keys(r.user).length&&(this._user=r.user),r.level&&(this._level=r.level),r.fingerprint.length&&(this._fingerprint=r.fingerprint),n.getRequestSession()&&(this._requestSession=n.getRequestSession()),r.propagationContext&&(this._propagationContext=r.propagationContext)}else if(Zr(n)){const r=t;this._tags={...this._tags,...r.tags},this._extra={...this._extra,...r.extra},this._contexts={...this._contexts,...r.contexts},r.user&&(this._user=r.user),r.level&&(this._level=r.level),r.fingerprint&&(this._fingerprint=r.fingerprint),r.requestSession&&(this._requestSession=r.requestSession),r.propagationContext&&(this._propagationContext=r.propagationContext)}return this}clear(){return this._breadcrumbs=[],this._tags={},this._extra={},this._user={},this._contexts={},this._level=void 0,this._transactionName=void 0,this._fingerprint=void 0,this._requestSession=void 0,this._span=void 0,this._session=void 0,this._notifyScopeListeners(),this._attachments=[],this._propagationContext=$y(),this}addBreadcrumb(t,n){const r=typeof n=="number"?n:b3;if(r<=0)return this;const o={timestamp:yi(),...t},i=this._breadcrumbs;return i.push(o),this._breadcrumbs=i.length>r?i.slice(-r):i,this._notifyScopeListeners(),this}getLastBreadcrumb(){return this._breadcrumbs[this._breadcrumbs.length-1]}clearBreadcrumbs(){return this._breadcrumbs=[],this._notifyScopeListeners(),this}addAttachment(t){return this._attachments.push(t),this}getAttachments(){return this.getScopeData().attachments}clearAttachments(){return this._attachments=[],this}getScopeData(){const{_breadcrumbs:t,_attachments:n,_contexts:r,_tags:o,_extra:i,_user:s,_level:l,_fingerprint:a,_eventProcessors:u,_propagationContext:c,_sdkProcessingMetadata:f,_transactionName:d,_span:m}=this;return{breadcrumbs:t,attachments:n,contexts:r,tags:o,extra:i,user:s,level:l,fingerprint:a||[],eventProcessors:u,propagationContext:c,sdkProcessingMetadata:f,transactionName:d,span:m}}applyToEvent(t,n={},r=[]){Cy(t,this.getScopeData());const o=[...r,...Ff(),...this._eventProcessors];return Gl(o,t,n)}setSDKProcessingMetadata(t){return this._sdkProcessingMetadata={...this._sdkProcessingMetadata,...t},this}setPropagationContext(t){return this._propagationContext=t,this}getPropagationContext(){return this._propagationContext}captureException(t,n){const r=n&&n.event_id?n.event_id:Rt();if(!this._client)return Q.warn("No client configured on scope - will not capture exception!"),r;const o=new Error("Sentry syntheticException");return this._client.captureException(t,{originalException:t,syntheticException:o,...n,event_id:r},this),r}captureMessage(t,n,r){const o=r&&r.event_id?r.event_id:Rt();if(!this._client)return Q.warn("No client configured on scope - will not capture message!"),o;const i=new Error(t);return this._client.captureMessage(t,n,{originalException:t,syntheticException:i,...r,event_id:o},this),o}captureEvent(t,n){const r=n&&n.event_id?n.event_id:Rt();return this._client?(this._client.captureEvent(t,{...n,event_id:r},this),r):(Q.warn("No client configured on scope - will not capture event!"),r)}_notifyScopeListeners(){this._notifyingListeners||(this._notifyingListeners=!0,this._scopeListeners.forEach(t=>{t(this)}),this._notifyingListeners=!1)}}function O3(){return Df||(Df=new ln),Df}function $y(){return{traceId:Rt(),spanId:Rt().substring(16)}}const zf="7.102.1",Ty=parseFloat(zf),L3=100;class Py{constructor(t,n,r,o=Ty){this._version=o;let i;n?i=n:(i=new ln,i.setClient(t));let s;r?s=r:(s=new ln,s.setClient(t)),this._stack=[{scope:i}],t&&this.bindClient(t),this._isolationScope=s}isOlderThan(t){return this._version<t}bindClient(t){const n=this.getStackTop();n.client=t,n.scope.setClient(t),t&&t.setupIntegrations&&t.setupIntegrations()}pushScope(){const t=this.getScope().clone();return this.getStack().push({client:this.getClient(),scope:t}),t}popScope(){return this.getStack().length<=1?!1:!!this.getStack().pop()}withScope(t){const n=this.pushScope();let r;try{r=t(n)}catch(o){throw this.popScope(),o}return Hl(r)?r.then(o=>(this.popScope(),o),o=>{throw this.popScope(),o}):(this.popScope(),r)}getClient(){return this.getStackTop().client}getScope(){return this.getStackTop().scope}getIsolationScope(){return this._isolationScope}getStack(){return this._stack}getStackTop(){return this._stack[this._stack.length-1]}captureException(t,n){const r=this._lastEventId=n&&n.event_id?n.event_id:Rt(),o=new Error("Sentry syntheticException");return this.getScope().captureException(t,{originalException:t,syntheticException:o,...n,event_id:r}),r}captureMessage(t,n,r){const o=this._lastEventId=r&&r.event_id?r.event_id:Rt(),i=new Error(t);return this.getScope().captureMessage(t,n,{originalException:t,syntheticException:i,...r,event_id:o}),o}captureEvent(t,n){const r=n&&n.event_id?n.event_id:Rt();return t.type||(this._lastEventId=r),this.getScope().captureEvent(t,{...n,event_id:r}),r}lastEventId(){return this._lastEventId}addBreadcrumb(t,n){const{scope:r,client:o}=this.getStackTop();if(!o)return;const{beforeBreadcrumb:i=null,maxBreadcrumbs:s=L3}=o.getOptions&&o.getOptions()||{};if(s<=0)return;const a={timestamp:yi(),...t},u=i?Mf(()=>i(a,n)):a;u!==null&&(o.emit&&o.emit("beforeAddBreadcrumb",u,n),r.addBreadcrumb(u,s))}setUser(t){this.getScope().setUser(t),this.getIsolationScope().setUser(t)}setTags(t){this.getScope().setTags(t),this.getIsolationScope().setTags(t)}setExtras(t){this.getScope().setExtras(t),this.getIsolationScope().setExtras(t)}setTag(t,n){this.getScope().setTag(t,n),this.getIsolationScope().setTag(t,n)}setExtra(t,n){this.getScope().setExtra(t,n),this.getIsolationScope().setExtra(t,n)}setContext(t,n){this.getScope().setContext(t,n),this.getIsolationScope().setContext(t,n)}configureScope(t){const{scope:n,client:r}=this.getStackTop();r&&t(n)}run(t){const n=My(this);try{t(this)}finally{My(n)}}getIntegration(t){const n=this.getClient();if(!n)return null;try{return n.getIntegration(t)}catch{return ve&&Q.warn(`Cannot retrieve integration ${t.id} from the current Hub`),null}}startTransaction(t,n){const r=this._callExtensionMethod("startTransaction",t,n);return ve&&!r&&(this.getClient()?Q.warn(`Tracing extension 'startTransaction' has not been added. Call 'addTracingExtensions' before calling 'init':
Sentry.addTracingExtensions();
Sentry.init({...});
`):Q.warn("Tracing extension 'startTransaction' is missing. You should 'init' the SDK before calling 'startTransaction'")),r}traceHeaders(){return this._callExtensionMethod("traceHeaders")}captureSession(t=!1){if(t)return this.endSession();this._sendSessionUpdate()}endSession(){const n=this.getStackTop().scope,r=n.getSession();r&&p3(r),this._sendSessionUpdate(),n.setSession()}startSession(t){const{scope:n,client:r}=this.getStackTop(),{release:o,environment:i=If}=r&&r.getOptions()||{},{userAgent:s}=Ve.navigator||{},l=d3({release:o,environment:i,user:n.getUser(),...s&&{userAgent:s},...t}),a=n.getSession&&n.getSession();return a&&a.status==="ok"&&Jr(a,{status:"exited"}),this.endSession(),n.setSession(l),l}shouldSendDefaultPii(){const t=this.getClient(),n=t&&t.getOptions();return!!(n&&n.sendDefaultPii)}_sendSessionUpdate(){const{scope:t,client:n}=this.getStackTop(),r=t.getSession();r&&n&&n.captureSession&&n.captureSession(r)}_callExtensionMethod(t,...n){const o=Xl().__SENTRY__;if(o&&o.extensions&&typeof o.extensions[t]=="function")return o.extensions[t].apply(this,n);ve&&Q.warn(`Extension method ${t} couldn't be found, doing nothing.`)}}function Xl(){return Ve.__SENTRY__=Ve.__SENTRY__||{extensions:{},hub:void 0},Ve}function My(e){const t=Xl(),n=jf(t);return Ry(t,e),n}function Ql(){const e=Xl();if(e.__SENTRY__&&e.__SENTRY__.acs){const t=e.__SENTRY__.acs.getCurrentHub();if(t)return t}return F3(e)}function I3(){return Ql().getIsolationScope()}function F3(e=Xl()){return(!D3(e)||jf(e).isOlderThan(Ty))&&Ry(e,new Py),jf(e)}function D3(e){return!!(e&&e.__SENTRY__&&e.__SENTRY__.hub)}function jf(e){return ry("hub",()=>new Py,e)}function Ry(e,t){if(!e)return!1;const n=e.__SENTRY__=e.__SENTRY__||{};return n.hub=t,!0}function z3(e,t){return t&&(e.sdk=e.sdk||{},e.sdk.name=e.sdk.name||t.name,e.sdk.version=e.sdk.version||t.version,e.sdk.integrations=[...e.sdk.integrations||[],...t.integrations||[]],e.sdk.packages=[...e.sdk.packages||[],...t.packages||[]]),e}function j3(e,t,n,r){const o=xy(n),i={sent_at:new Date().toISOString(),...o&&{sdk:o},...!!r&&t&&{dsn:gi(t)}},s="aggregates"in e?[{type:"sessions"},e]:[{type:"session"},e.toJSON()];return qr(i,[s])}function B3(e,t,n,r){const o=xy(n),i=e.type&&e.type!=="replay_event"?e.type:"event";z3(e,n&&n.sdk);const s=o3(e,o,r,t);return delete e.sdkProcessingMetadata,qr(s,[[{type:i},e]])}const U3="7";function H3(e){const t=e.protocol?`${e.protocol}:`:"",n=e.port?`:${e.port}`:"";return`${t}//${e.host}${n}${e.path?`/${e.path}`:""}/api/`}function V3(e){return`${H3(e)}${e.projectId}/envelope/`}function W3(e,t){return I_({sentry_key:e.publicKey,sentry_version:U3,...t&&{sentry_client:`${t.name}/${t.version}`}})}function Y3(e,t={}){const n=typeof t=="string"?t:t.tunnel,r=typeof t=="string"||!t._metadata?void 0:t._metadata.sdk;return n||`${V3(e)}?${W3(e,r)}`}const Ny=[];function G3(e,t){const n={};return t.forEach(r=>{r&&Oy(e,r,n)}),n}function by(e,t){for(const n of t)n&&n.afterAllSetup&&n.afterAllSetup(e)}function Oy(e,t,n){if(n[t.name]){ve&&Q.log(`Integration skipped because it was already installed: ${t.name}`);return}if(n[t.name]=t,Ny.indexOf(t.name)===-1&&(t.setupOnce(f3,Ql),Ny.push(t.name)),t.setup&&typeof t.setup=="function"&&t.setup(e),e.on&&typeof t.preprocessEvent=="function"){const r=t.preprocessEvent.bind(t);e.on("preprocessEvent",(o,i)=>r(o,i,e))}if(e.addEventProcessor&&typeof t.processEvent=="function"){const r=t.processEvent.bind(t),o=Object.assign((i,s)=>r(i,s,e),{id:t.name});e.addEventProcessor(o)}ve&&Q.log(`Integration installed: ${t.name}`)}function X3(e){let t="";for(const n of e){const r=Object.entries(n.tags),o=r.length>0?`|#${r.map(([i,s])=>`${i}:${s}`).join(",")}`:"";t+=`${n.name}@${n.unit}:${n.metric}|${n.metricType}${o}|T${n.timestamp}
`}return t}function Q3(e,t,n,r){const o={sent_at:new Date().toISOString()};n&&n.sdk&&(o.sdk={name:n.sdk.name,version:n.sdk.version}),r&&t&&(o.dsn=gi(t));const i=Z3(e);return qr(o,[i])}function Z3(e){const t=X3(e);return[{type:"statsd",length:t.length},t]}const Ly="Not capturing exception because it's already been captured.";class K3{constructor(t){if(this._options=t,this._integrations={},this._integrationsInitialized=!1,this._numProcessing=0,this._outcomes={},this._hooks={},this._eventProcessors=[],t.dsn?this._dsn=O_(t.dsn):ve&&Q.warn("No DSN provided, client will not send events."),this._dsn){const n=Y3(this._dsn,t);this._transport=t.transport({recordDroppedEvent:this.recordDroppedEvent.bind(this),...t.transportOptions,url:n})}}captureException(t,n,r){if(hy(t)){ve&&Q.log(Ly);return}let o=n&&n.event_id;return this._process(this.eventFromException(t,n).then(i=>this._captureEvent(i,n,r)).then(i=>{o=i})),o}captureMessage(t,n,r,o){let i=r&&r.event_id;const s=Tf(t)?t:String(t),l=v_(t)?this.eventFromMessage(s,n,r):this.eventFromException(t,r);return this._process(l.then(a=>this._captureEvent(a,r,o)).then(a=>{i=a})),i}captureEvent(t,n,r){if(n&&n.originalException&&hy(n.originalException)){ve&&Q.log(Ly);return}let o=n&&n.event_id;const s=(t.sdkProcessingMetadata||{}).capturedSpanScope;return this._process(this._captureEvent(t,n,s||r).then(l=>{o=l})),o}captureSession(t){typeof t.release!="string"?ve&&Q.warn("Discarded session because of missing or non-string release"):(this.sendSession(t),Jr(t,{init:!1}))}getDsn(){return this._dsn}getOptions(){return this._options}getSdkMetadata(){return this._options._metadata}getTransport(){return this._transport}flush(t){const n=this._transport;return n?(this.metricsAggregator&&this.metricsAggregator.flush(),this._isClientDoneProcessing(t).then(r=>n.flush(t).then(o=>r&&o))):Kr(!0)}close(t){return this.flush(t).then(n=>(this.getOptions().enabled=!1,this.metricsAggregator&&this.metricsAggregator.close(),n))}getEventProcessors(){return this._eventProcessors}addEventProcessor(t){this._eventProcessors.push(t)}setupIntegrations(t){(t&&!this._integrationsInitialized||this._isEnabled()&&!this._integrationsInitialized)&&this._setupIntegrations()}init(){this._isEnabled()&&this._setupIntegrations()}getIntegrationById(t){return this.getIntegrationByName(t)}getIntegrationByName(t){return this._integrations[t]}getIntegration(t){try{return this._integrations[t.id]||null}catch{return ve&&Q.warn(`Cannot retrieve integration ${t.id} from the current Client`),null}}addIntegration(t){const n=this._integrations[t.name];Oy(this,t,this._integrations),n||by(this,[t])}sendEvent(t,n={}){this.emit("beforeSendEvent",t,n);let r=B3(t,this._dsn,this._options._metadata,this._options.tunnel);for(const i of n.attachments||[])r=J_(r,n3(i,this._options.transportOptions&&this._options.transportOptions.textEncoder));const o=this._sendEnvelope(r);o&&o.then(i=>this.emit("afterSendEvent",t,i),null)}sendSession(t){const n=j3(t,this._dsn,this._options._metadata,this._options.tunnel);this._sendEnvelope(n)}recordDroppedEvent(t,n,r){if(this._options.sendClientReports){const o=`${t}:${n}`;ve&&Q.log(`Adding outcome: "${o}"`),this._outcomes[o]=this._outcomes[o]+1||1}}captureAggregateMetrics(t){ve&&Q.log(`Flushing aggregated metrics, number of metrics: ${t.length}`);const n=Q3(t,this._dsn,this._options._metadata,this._options.tunnel);this._sendEnvelope(n)}on(t,n){this._hooks[t]||(this._hooks[t]=[]),this._hooks[t].push(n)}emit(t,...n){this._hooks[t]&&this._hooks[t].forEach(r=>r(...n))}_setupIntegrations(){const{integrations:t}=this._options;this._integrations=G3(this,t),by(this,t),this._integrationsInitialized=!0}_updateSessionFromEvent(t,n){let r=!1,o=!1;const i=n.exception&&n.exception.values;if(i){o=!0;for(const a of i){const u=a.mechanism;if(u&&u.handled===!1){r=!0;break}}}const s=t.status==="ok";(s&&t.errors===0||s&&r)&&(Jr(t,{...r&&{status:"crashed"},errors:t.errors||Number(o||r)}),this.captureSession(t))}_isClientDoneProcessing(t){return new St(n=>{let r=0;const o=1,i=setInterval(()=>{this._numProcessing==0?(clearInterval(i),n(!0)):(r+=o,t&&r>=t&&(clearInterval(i),n(!1)))},o)})}_isEnabled(){return this.getOptions().enabled!==!1&&this._transport!==void 0}_prepareEvent(t,n,r,o=I3()){const i=this.getOptions(),s=Object.keys(this._integrations);return!n.integrations&&s.length>0&&(n.integrations=s),this.emit("preprocessEvent",t,n),w3(i,t,n,r,this,o).then(l=>{if(l===null)return l;const a={...o.getPropagationContext(),...r?r.getPropagationContext():void 0};if(!(l.contexts&&l.contexts.trace)&&a){const{traceId:c,spanId:f,parentSpanId:d,dsc:m}=a;l.contexts={trace:{trace_id:c,span_id:f,parent_span_id:d},...l.contexts};const y=m||Ey(c,this,r);l.sdkProcessingMetadata={dynamicSamplingContext:y,...l.sdkProcessingMetadata}}return l})}_captureEvent(t,n={},r){return this._processEvent(t,n,r).then(o=>o.event_id,o=>{if(ve){const i=o;i.logLevel==="log"?Q.log(i.message):Q.warn(i)}})}_processEvent(t,n,r){const o=this.getOptions(),{sampleRate:i}=o,s=Fy(t),l=Iy(t),a=t.type||"error",u=`before send for type \`${a}\``;if(l&&typeof i=="number"&&Math.random()>i)return this.recordDroppedEvent("sample_rate","error",t),Of(new Ut(`Discarding event because it's not included in the random sample (sampling rate = ${i})`,"log"));const c=a==="replay_event"?"replay":a,d=(t.sdkProcessingMetadata||{}).capturedSpanIsolationScope;return this._prepareEvent(t,n,r,d).then(m=>{if(m===null)throw this.recordDroppedEvent("event_processor",c,t),new Ut("An event processor returned `null`, will not send event.","log");if(n.data&&n.data.__sentry__===!0)return m;const v=J3(o,m,n);return q3(v,u)}).then(m=>{if(m===null)throw this.recordDroppedEvent("before_send",c,t),new Ut(`${u} returned \`null\`, will not send event.`,"log");const y=r&&r.getSession();!s&&y&&this._updateSessionFromEvent(y,m);const v=m.transaction_info;if(s&&v&&m.transaction!==t.transaction){const x="custom";m.transaction_info={...v,source:x}}return this.sendEvent(m,n),m}).then(null,m=>{throw m instanceof Ut?m:(this.captureException(m,{data:{__sentry__:!0},originalException:m}),new Ut(`Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.
Reason: ${m}`))})}_process(t){this._numProcessing++,t.then(n=>(this._numProcessing--,n),n=>(this._numProcessing--,n))}_sendEnvelope(t){if(this.emit("beforeEnvelope",t),this._isEnabled()&&this._transport)return this._transport.send(t).then(null,n=>{ve&&Q.error("Error while sending event:",n)});ve&&Q.error("Transport disabled")}_clearOutcomes(){const t=this._outcomes;return this._outcomes={},Object.keys(t).map(n=>{const[r,o]=n.split(":");return{reason:r,category:o,quantity:t[n]}})}}function q3(e,t){const n=`${t} must return \`null\` or a valid event.`;if(Hl(e))return e.then(r=>{if(!Zr(r)&&r!==null)throw new Ut(n);return r},r=>{throw new Ut(`${t} rejected with ${r}`)});if(!Zr(e)&&e!==null)throw new Ut(n);return e}function J3(e,t,n){const{beforeSend:r,beforeSendTransaction:o}=e;return Iy(t)&&r?r(t,n):Fy(t)&&o?o(t,n):t}function Iy(e){return e.type===void 0}function Fy(e){return e.type==="transaction"}const eE=30;function tE(e,t,n=K_(e.bufferSize||eE)){let r={};const o=s=>n.drain(s);function i(s){const l=[];if(vy(s,(f,d)=>{const m=wy(d);if(u3(r,m)){const y=Dy(f,d);e.recordDroppedEvent("ratelimit_backoff",m,y)}else l.push(f)}),l.length===0)return Kr();const a=qr(s[0],l),u=f=>{vy(a,(d,m)=>{const y=Dy(d,m);e.recordDroppedEvent(f,wy(m),y)})},c=()=>t({body:e3(a,e.textEncoder)}).then(f=>(f.statusCode!==void 0&&(f.statusCode<200||f.statusCode>=300)&&ve&&Q.warn(`Sentry responded with status code ${f.statusCode} to sent event.`),r=c3(r,f),f),f=>{throw u("network_error"),f});return n.add(c).then(f=>f,f=>{if(f instanceof Ut)return ve&&Q.error("Skipped sending event because buffer is full."),u("queue_overflow"),Kr();throw f})}return i.__sentry__baseTransport__=!0,{send:i,flush:o}}function Dy(e,t){if(!(t!=="event"&&t!=="transaction"))return Array.isArray(e)?e[1]:void 0}function nE(e,t,n=[t],r="npm"){const o=e._metadata||{};o.sdk||(o.sdk={name:`sentry.javascript.${t}`,packages:n.map(i=>({name:`${r}:@sentry/${i}`,version:zf})),version:zf}),e._metadata=o}const Ht=Ve,xi=typeof __SENTRY_DEBUG__>"u"||__SENTRY_DEBUG__;function rE(e,t){const n=Uf(e,t),r={type:t&&t.name,value:lE(t)};return n.length&&(r.stacktrace={frames:n}),r.type===void 0&&r.value===""&&(r.value="Unrecoverable error caught"),r}function oE(e,t,n,r){const o=ky(),i=o&&o.getOptions().normalizeDepth,s={exception:{values:[{type:Ul(t)?t.constructor.name:r?"UnhandledRejection":"Error",value:fE(t,{isUnhandledRejection:r})}]},extra:{__serialized__:my(t,i)}};if(n){const l=Uf(e,n);l.length&&(s.exception.values[0].stacktrace={frames:l})}return s}function Bf(e,t){return{exception:{values:[rE(e,t)]}}}function Uf(e,t){const n=t.stacktrace||t.stack||"",r=sE(t);try{return e(n,r)}catch{}return[]}const iE=/Minified React error #\d+;/i;function sE(e){if(e){if(typeof e.framesToPop=="number")return e.framesToPop;if(iE.test(e.message))return 1}return 0}function lE(e){const t=e&&e.message;return t?t.error&&typeof t.error.message=="string"?t.error.message:t:"No error message"}function aE(e,t,n,r){const o=n&&n.syntheticException||void 0,i=cE(e,t,o,r);return Yl(i),i.level="error",n&&n.event_id&&(i.event_id=n.event_id),Kr(i)}function uE(e,t,n="info",r,o){const i=r&&r.syntheticException||void 0,s=Hf(e,t,i,o);return s.level=n,r&&r.event_id&&(s.event_id=r.event_id),Kr(s)}function cE(e,t,n,r,o){let i;if(ty(t)&&t.error)return Bf(e,t.error);if(ny(t)||g_(t)){const s=t;if("stack"in t)i=Bf(e,t);else{const l=s.name||(ny(s)?"DOMError":"DOMException"),a=s.message?`${l}: ${s.message}`:l;i=Hf(e,a,n,r),py(i,a)}return"code"in s&&(i.tags={...i.tags,"DOMException.code":`${s.code}`}),i}return ey(t)?Bf(e,t):Zr(t)||Ul(t)?(i=oE(e,t,n,o),Yl(i,{synthetic:!0}),i):(i=Hf(e,t,n,r),py(i,`${t}`,void 0),Yl(i,{synthetic:!0}),i)}function Hf(e,t,n,r){const o={};if(r&&n){const i=Uf(e,n);i.length&&(o.exception={values:[{value:t,stacktrace:{frames:i}}]})}if(Tf(t)){const{__sentry_template_string__:i,__sentry_template_values__:s}=t;return o.logentry={message:i,params:s},o}return o.message=t,o}function fE(e,{isUnhandledRejection:t}){const n=F_(e),r=t?"promise rejection":"exception";return ty(e)?`Event \`ErrorEvent\` captured as ${r} with message \`${e.message}\``:Ul(e)?`Event \`${dE(e)}\` (type=${e.type}) captured as ${r}`:`Object captured as ${r} with keys: ${n}`}function dE(e){try{const t=Object.getPrototypeOf(e);return t?t.constructor.name:void 0}catch{}}function pE(e,{metadata:t,tunnel:n,dsn:r}){const o={event_id:e.event_id,sent_at:new Date().toISOString(),...t&&t.sdk&&{sdk:{name:t.sdk.name,version:t.sdk.version}},...!!n&&!!r&&{dsn:gi(r)}},i=hE(e);return qr(o,[i])}function hE(e){return[{type:"user_report"},e]}class mE extends K3{constructor(t){const n=Ht.SENTRY_SDK_SOURCE||W_();nE(t,"browser",["browser"],n),super(t),t.sendClientReports&&Ht.document&&Ht.document.addEventListener("visibilitychange",()=>{Ht.document.visibilityState==="hidden"&&this._flushOutcomes()})}eventFromException(t,n){return aE(this._options.stackParser,t,n,this._options.attachStacktrace)}eventFromMessage(t,n="info",r){return uE(this._options.stackParser,t,n,r,this._options.attachStacktrace)}captureUserFeedback(t){if(!this._isEnabled()){xi&&Q.warn("SDK not enabled, will not capture user feedback.");return}const n=pE(t,{metadata:this.getSdkMetadata(),dsn:this.getDsn(),tunnel:this.getOptions().tunnel});this._sendEnvelope(n)}_prepareEvent(t,n,r){return t.platform=t.platform||"javascript",super._prepareEvent(t,n,r)}_flushOutcomes(){const t=this._clearOutcomes();if(t.length===0){xi&&Q.log("No outcomes to send");return}if(!this._dsn){xi&&Q.log("No dsn provided, will not send outcomes");return}xi&&Q.log("Sending outcomes:",t);const n=i3(t,this._options.tunnel&&gi(this._dsn));this._sendEnvelope(n)}}let Si;function gE(){if(Si)return Si;if(V_(Ht.fetch))return Si=Ht.fetch.bind(Ht);const e=Ht.document;let t=Ht.fetch;if(e&&typeof e.createElement=="function")try{const n=e.createElement("iframe");n.hidden=!0,e.head.appendChild(n);const r=n.contentWindow;r&&r.fetch&&(t=r.fetch),e.head.removeChild(n)}catch(n){xi&&Q.warn("Could not create sandbox iframe for pure fetch check, bailing to window.fetch: ",n)}return Si=t.bind(Ht)}function yE(){Si=void 0}function vE(e,t=gE()){let n=0,r=0;function o(i){const s=i.body.length;n+=s,r++;const l={body:i.body,method:"POST",referrerPolicy:"origin",headers:e.headers,keepalive:n<=6e4&&r<15,...e.fetchOptions};try{return t(e.url,l).then(a=>(n-=s,r--,{statusCode:a.status,headers:{"x-sentry-rate-limits":a.headers.get("X-Sentry-Rate-Limits"),"retry-after":a.headers.get("Retry-After")}}))}catch(a){return yE(),n-=s,r--,Of(a)}}return tE(e,o)}const Zl="?",wE=30,xE=40,SE=50;function Vf(e,t,n,r){const o={filename:e,function:t,in_app:!0};return n!==void 0&&(o.lineno=n),r!==void 0&&(o.colno=r),o}const kE=/^\s*at (?:(.+?\)(?: \[.+\])?|.*?) ?\((?:address at )?)?(?:async )?((?:<anonymous>|[-a-z]+:|.*bundle|\/)?.*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i,_E=/\((\S*)(?::(\d+))(?::(\d+))\)/,EE=[wE,e=>{const t=kE.exec(e);if(t){if(t[2]&&t[2].indexOf("eval")===0){const i=_E.exec(t[2]);i&&(t[2]=i[1],t[3]=i[2],t[4]=i[3])}const[r,o]=zy(t[1]||Zl,t[2]);return Vf(o,r,t[3]?+t[3]:void 0,t[4]?+t[4]:void 0)}}],CE=/^\s*(.*?)(?:\((.*?)\))?(?:^|@)?((?:[-a-z]+)?:\/.*?|\[native code\]|[^@]*(?:bundle|\d+\.js)|\/[\w\-. /=]+)(?::(\d+))?(?::(\d+))?\s*$/i,AE=/(\S+) line (\d+)(?: > eval line \d+)* > eval/i,$E=[SE,e=>{const t=CE.exec(e);if(t){if(t[3]&&t[3].indexOf(" > eval")>-1){const i=AE.exec(t[3]);i&&(t[1]=t[1]||"eval",t[3]=i[1],t[4]=i[2],t[5]="")}let r=t[3],o=t[1]||Zl;return[o,r]=zy(o,r),Vf(r,o,t[4]?+t[4]:void 0,t[5]?+t[5]:void 0)}}],TE=/^\s*at (?:((?:\[object object\])?.+) )?\(?((?:[-a-z]+):.*?):(\d+)(?::(\d+))?\)?\s*$/i,PE=z_(...[EE,$E,[xE,e=>{const t=TE.exec(e);return t?Vf(t[2],t[1]||Zl,+t[3],t[4]?+t[4]:void 0):void 0}]]),zy=(e,t)=>{const n=e.indexOf("safari-extension")!==-1,r=e.indexOf("safari-web-extension")!==-1;return n||r?[e.indexOf("@")!==-1?e.split("@")[0]:Zl,n?`safari-extension:${t}`:`safari-web-extension:${t}`]:[e,t]},ME=new mE({dsn:"https://fe1aa23219cc6bc8921f8329253dd665@o4506814553522176.ingest.sentry.io/4506814688657408",transport:vE,stackParser:PE,integrations:[],debug:!1,environment:"production"}),jy=new ln;jy.setClient(ME);function RE(e){try{return e()}catch(t){jy.captureException(t)}}RE(()=>{const e="what-font-ext-container";function t(s,l){const a=document.getElementById(l);a&&a.remove();const u=document.createElement(s);return u.setAttribute("id",l),u}hc(`Initiating: v${dw.version}`);let n,r;function o(){hc("Removing"),r==null||r.unmount(),n==null||n.remove(),delete window.___WHAT_FONT_REMOVE,gh.runtime.sendMessage({event:pc.Deactivated})}function i(){hc("Activating"),n=t("div",e),document.body.appendChild(n),r=oa.createRoot(n),r.render(M.jsx(Vt.StrictMode,{children:M.jsx(m_,{onExit:o})})),window.___WHAT_FONT_REMOVE=o,gh.runtime.sendMessage({event:pc.Activated})}window.___WHAT_FONT_REMOVE?window.___WHAT_FONT_REMOVE():i()})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
